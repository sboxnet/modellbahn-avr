
sb3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bldrapp      00000ea8  0000d000  0000d000  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bldrinit     0000019c  00010000  00010000  0000238c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bldrvec      00000040  00010200  00010200  00002528  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bootloader   000001a8  00010242  00010242  00002568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .bldrstatic   000001d6  00010c00  00010c00  00002710  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bldrstatvec  00000008  00010ff0  00010ff0  000028e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text         0000138e  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .data         00000002  00802000  0000138e  000014e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000187  00802002  00802002  000028ee  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000028ee  2**0
                  CONTENTS, READONLY
 10 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY
 11 .debug_aranges 00000340  00000000  00000000  00002960  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00009442  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ee  00000000  00000000  0000c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c9d  00000000  00000000  0000f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007a4  00000000  00000000  00013170  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00021507  00000000  00000000  00013914  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00003633  00000000  00000000  00034e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000608  00000000  00000000  0003844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0000a2b7  00000000  00000000  00038a56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .bldrapp:

0000d000 <crc_ccitt_update>:
 * Verhindert das der Linker diesen Bereich nutzt.
 * 
 */
BLDR_CRC_SECTION NOINLINE __ATTR_NAKED __ATTR_USED
static void bldr_crc_section(void) {
    __asm__ __volatile__ (
    d000:	86 27       	eor	r24, r22
    d002:	08 2e       	mov	r0, r24
    d004:	82 95       	swap	r24
    d006:	80 7f       	andi	r24, 0xF0	; 240
    d008:	80 25       	eor	r24, r0
    d00a:	09 2e       	mov	r0, r25
    d00c:	98 2f       	mov	r25, r24
    d00e:	82 95       	swap	r24
    d010:	8f 70       	andi	r24, 0x0F	; 15
    d012:	08 26       	eor	r0, r24
    d014:	86 95       	lsr	r24
    d016:	98 27       	eor	r25, r24
    d018:	89 27       	eor	r24, r25
    d01a:	88 0f       	add	r24, r24
    d01c:	88 0f       	add	r24, r24
    d01e:	88 0f       	add	r24, r24
    d020:	80 25       	eor	r24, r0
    d022:	08 95       	ret

0000d024 <bldr_process_cmd_net_reset>:
    d024:	9f b7       	in	r25, 0x3f	; 63
    d026:	f8 94       	cli
    d028:	8f ef       	ldi	r24, 0xFF	; 255
    d02a:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <g_v>
    d02e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d032:	88 60       	ori	r24, 0x08	; 8
    d034:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d038:	9f bf       	out	0x3f, r25	; 63
    d03a:	08 95       	ret

0000d03c <bldr_random>:
    d03c:	4f b7       	in	r20, 0x3f	; 63
    d03e:	f8 94       	cli
    d040:	e6 e1       	ldi	r30, 0x16	; 22
    d042:	f0 e2       	ldi	r31, 0x20	; 32
    d044:	80 8d       	ldd	r24, Z+24	; 0x18
    d046:	91 8d       	ldd	r25, Z+25	; 0x19
    d048:	9c 01       	movw	r18, r24
    d04a:	22 0f       	add	r18, r18
    d04c:	33 1f       	adc	r19, r19
    d04e:	82 27       	eor	r24, r18
    d050:	93 27       	eor	r25, r19
    d052:	9c 01       	movw	r18, r24
    d054:	36 95       	lsr	r19
    d056:	27 95       	ror	r18
    d058:	32 95       	swap	r19
    d05a:	22 95       	swap	r18
    d05c:	2f 70       	andi	r18, 0x0F	; 15
    d05e:	23 27       	eor	r18, r19
    d060:	3f 70       	andi	r19, 0x0F	; 15
    d062:	23 27       	eor	r18, r19
    d064:	82 27       	eor	r24, r18
    d066:	93 27       	eor	r25, r19
    d068:	9c 01       	movw	r18, r24
    d06a:	22 0f       	add	r18, r18
    d06c:	33 1f       	adc	r19, r19
    d06e:	22 0f       	add	r18, r18
    d070:	33 1f       	adc	r19, r19
    d072:	82 27       	eor	r24, r18
    d074:	93 27       	eor	r25, r19
    d076:	80 8f       	std	Z+24, r24	; 0x18
    d078:	91 8f       	std	Z+25, r25	; 0x19
    d07a:	4f bf       	out	0x3f, r20	; 63
    d07c:	08 95       	ret

0000d07e <bldr_process_msg>:
    d07e:	cf 92       	push	r12
    d080:	df 92       	push	r13
    d082:	ef 92       	push	r14
    d084:	ff 92       	push	r15
    d086:	0f 93       	push	r16
    d088:	1f 93       	push	r17
    d08a:	cf 93       	push	r28
    d08c:	df 93       	push	r29
    d08e:	ec 01       	movw	r28, r24
    d090:	89 81       	ldd	r24, Y+1	; 0x01
    d092:	81 11       	cpse	r24, r1
    d094:	03 c0       	rjmp	.+6      	; 0xd09c <bldr_process_msg+0x1e>
    d096:	80 e8       	ldi	r24, 0x80	; 128
    d098:	80 93 1d 20 	sts	0x201D, r24	; 0x80201d <g_v+0x7>
    d09c:	8c 81       	ldd	r24, Y+4	; 0x04
    d09e:	88 23       	and	r24, r24
    d0a0:	0c f4       	brge	.+2      	; 0xd0a4 <bldr_process_msg+0x26>
    d0a2:	5c c1       	rjmp	.+696    	; 0xd35c <bldr_process_msg+0x2de>
    d0a4:	8b 01       	movw	r16, r22
    d0a6:	82 30       	cpi	r24, 0x02	; 2
    d0a8:	09 f4       	brne	.+2      	; 0xd0ac <bldr_process_msg+0x2e>
    d0aa:	3f c1       	rjmp	.+638    	; 0xd32a <bldr_process_msg+0x2ac>
    d0ac:	85 31       	cpi	r24, 0x15	; 21
    d0ae:	41 f0       	breq	.+16     	; 0xd0c0 <bldr_process_msg+0x42>
    d0b0:	81 30       	cpi	r24, 0x01	; 1
    d0b2:	01 f5       	brne	.+64     	; 0xd0f4 <bldr_process_msg+0x76>
    d0b4:	89 81       	ldd	r24, Y+1	; 0x01
    d0b6:	81 11       	cpse	r24, r1
    d0b8:	71 c1       	rjmp	.+738    	; 0xd39c <bldr_process_msg+0x31e>
    d0ba:	0e 94 12 68 	call	0xd024	; 0xd024 <bldr_process_cmd_net_reset>
    d0be:	6e c1       	rjmp	.+732    	; 0xd39c <bldr_process_msg+0x31e>
    d0c0:	84 e0       	ldi	r24, 0x04	; 4
    d0c2:	90 e2       	ldi	r25, 0x20	; 32
    d0c4:	80 97       	sbiw	r24, 0x20	; 32
    d0c6:	30 f4       	brcc	.+12     	; 0xd0d4 <bldr_process_msg+0x56>
    d0c8:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d0cc:	80 64       	ori	r24, 0x40	; 64
    d0ce:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d0d2:	08 c0       	rjmp	.+16     	; 0xd0e4 <bldr_process_msg+0x66>
    d0d4:	9f b7       	in	r25, 0x3f	; 63
    d0d6:	f8 94       	cli
    d0d8:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d0dc:	80 64       	ori	r24, 0x40	; 64
    d0de:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d0e2:	9f bf       	out	0x3f, r25	; 63
    d0e4:	88 81       	ld	r24, Y
    d0e6:	8f 3f       	cpi	r24, 0xFF	; 255
    d0e8:	09 f4       	brne	.+2      	; 0xd0ec <bldr_process_msg+0x6e>
    d0ea:	58 c1       	rjmp	.+688    	; 0xd39c <bldr_process_msg+0x31e>
    d0ec:	8b 81       	ldd	r24, Y+3	; 0x03
    d0ee:	80 7c       	andi	r24, 0xC0	; 192
    d0f0:	8b 83       	std	Y+3, r24	; 0x03
    d0f2:	52 c1       	rjmp	.+676    	; 0xd398 <bldr_process_msg+0x31a>
    d0f4:	98 81       	ld	r25, Y
    d0f6:	9f 3f       	cpi	r25, 0xFF	; 255
    d0f8:	09 f4       	brne	.+2      	; 0xd0fc <bldr_process_msg+0x7e>
    d0fa:	50 c1       	rjmp	.+672    	; 0xd39c <bldr_process_msg+0x31e>
    d0fc:	80 32       	cpi	r24, 0x20	; 32
    d0fe:	31 f0       	breq	.+12     	; 0xd10c <bldr_process_msg+0x8e>
    d100:	81 32       	cpi	r24, 0x21	; 33
    d102:	a9 f1       	breq	.+106    	; 0xd16e <bldr_process_msg+0xf0>
    d104:	89 31       	cpi	r24, 0x19	; 25
    d106:	09 f0       	breq	.+2      	; 0xd10a <bldr_process_msg+0x8c>
    d108:	0b c1       	rjmp	.+534    	; 0xd320 <bldr_process_msg+0x2a2>
    d10a:	4f c0       	rjmp	.+158    	; 0xd1aa <bldr_process_msg+0x12c>
    d10c:	1b 81       	ldd	r17, Y+3	; 0x03
    d10e:	1f 73       	andi	r17, 0x3F	; 63
    d110:	13 30       	cpi	r17, 0x03	; 3
    d112:	09 f0       	breq	.+2      	; 0xd116 <bldr_process_msg+0x98>
    d114:	25 c1       	rjmp	.+586    	; 0xd360 <bldr_process_msg+0x2e2>
    d116:	2f 81       	ldd	r18, Y+7	; 0x07
    d118:	20 32       	cpi	r18, 0x20	; 32
    d11a:	08 f0       	brcs	.+2      	; 0xd11e <bldr_process_msg+0xa0>
    d11c:	0d c1       	rjmp	.+538    	; 0xd338 <bldr_process_msg+0x2ba>
    d11e:	8d 81       	ldd	r24, Y+5	; 0x05
    d120:	9e 81       	ldd	r25, Y+6	; 0x06
    d122:	32 2f       	mov	r19, r18
    d124:	33 0f       	add	r19, r19
    d126:	3e 73       	andi	r19, 0x3E	; 62
    d128:	4b 81       	ldd	r20, Y+3	; 0x03
    d12a:	40 7c       	andi	r20, 0xC0	; 192
    d12c:	34 2b       	or	r19, r20
    d12e:	3b 83       	std	Y+3, r19	; 0x03
    d130:	22 23       	and	r18, r18
    d132:	09 f4       	brne	.+2      	; 0xd136 <bldr_process_msg+0xb8>
    d134:	31 c1       	rjmp	.+610    	; 0xd398 <bldr_process_msg+0x31a>
    d136:	be 01       	movw	r22, r28
    d138:	6b 5f       	subi	r22, 0xFB	; 251
    d13a:	7f 4f       	sbci	r23, 0xFF	; 255
    d13c:	0f ef       	ldi	r16, 0xFF	; 255
    d13e:	02 0f       	add	r16, r18
    d140:	10 e0       	ldi	r17, 0x00	; 0
    d142:	0f 5f       	subi	r16, 0xFF	; 255
    d144:	1f 4f       	sbci	r17, 0xFF	; 255
    d146:	08 0f       	add	r16, r24
    d148:	19 1f       	adc	r17, r25
    d14a:	6b 01       	movw	r12, r22
    d14c:	22 e0       	ldi	r18, 0x02	; 2
    d14e:	c2 0e       	add	r12, r18
    d150:	d1 1c       	adc	r13, r1
    d152:	7c 01       	movw	r14, r24
    d154:	ef ef       	ldi	r30, 0xFF	; 255
    d156:	ee 1a       	sub	r14, r30
    d158:	fe 0a       	sbc	r15, r30
    d15a:	0e 94 06 81 	call	0x1020c	; 0x1020c <bldr_reg_read>
    d15e:	81 11       	cpse	r24, r1
    d160:	1f c1       	rjmp	.+574    	; 0xd3a0 <bldr_process_msg+0x322>
    d162:	b6 01       	movw	r22, r12
    d164:	c7 01       	movw	r24, r14
    d166:	e0 16       	cp	r14, r16
    d168:	f1 06       	cpc	r15, r17
    d16a:	79 f7       	brne	.-34     	; 0xd14a <bldr_process_msg+0xcc>
    d16c:	15 c1       	rjmp	.+554    	; 0xd398 <bldr_process_msg+0x31a>
    d16e:	2b 81       	ldd	r18, Y+3	; 0x03
    d170:	2f 73       	andi	r18, 0x3F	; 63
    d172:	82 2f       	mov	r24, r18
    d174:	90 e0       	ldi	r25, 0x00	; 0
    d176:	20 fd       	sbrc	r18, 0
    d178:	f5 c0       	rjmp	.+490    	; 0xd364 <bldr_process_msg+0x2e6>
    d17a:	95 95       	asr	r25
    d17c:	87 95       	ror	r24
    d17e:	18 2f       	mov	r17, r24
    d180:	88 23       	and	r24, r24
    d182:	09 f4       	brne	.+2      	; 0xd186 <bldr_process_msg+0x108>
    d184:	09 c1       	rjmp	.+530    	; 0xd398 <bldr_process_msg+0x31a>
    d186:	7e 01       	movw	r14, r28
    d188:	f5 e0       	ldi	r31, 0x05	; 5
    d18a:	ef 0e       	add	r14, r31
    d18c:	f1 1c       	adc	r15, r1
    d18e:	f7 01       	movw	r30, r14
    d190:	b7 01       	movw	r22, r14
    d192:	22 e0       	ldi	r18, 0x02	; 2
    d194:	e2 0e       	add	r14, r18
    d196:	f1 1c       	adc	r15, r1
    d198:	80 81       	ld	r24, Z
    d19a:	91 81       	ldd	r25, Z+1	; 0x01
    d19c:	0e 94 06 81 	call	0x1020c	; 0x1020c <bldr_reg_read>
    d1a0:	81 11       	cpse	r24, r1
    d1a2:	00 c1       	rjmp	.+512    	; 0xd3a4 <bldr_process_msg+0x326>
    d1a4:	11 50       	subi	r17, 0x01	; 1
    d1a6:	99 f7       	brne	.-26     	; 0xd18e <bldr_process_msg+0x110>
    d1a8:	f7 c0       	rjmp	.+494    	; 0xd398 <bldr_process_msg+0x31a>
    d1aa:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d1ae:	86 70       	andi	r24, 0x06	; 6
    d1b0:	09 f4       	brne	.+2      	; 0xd1b4 <bldr_process_msg+0x136>
    d1b2:	da c0       	rjmp	.+436    	; 0xd368 <bldr_process_msg+0x2ea>
    d1b4:	9b 81       	ldd	r25, Y+3	; 0x03
    d1b6:	9f 73       	andi	r25, 0x3F	; 63
    d1b8:	93 50       	subi	r25, 0x03	; 3
    d1ba:	91 32       	cpi	r25, 0x21	; 33
    d1bc:	08 f0       	brcs	.+2      	; 0xd1c0 <bldr_process_msg+0x142>
    d1be:	d6 c0       	rjmp	.+428    	; 0xd36c <bldr_process_msg+0x2ee>
    d1c0:	2d 81       	ldd	r18, Y+5	; 0x05
    d1c2:	3e 81       	ldd	r19, Y+6	; 0x06
    d1c4:	4f 81       	ldd	r20, Y+7	; 0x07
    d1c6:	40 ff       	sbrs	r20, 0
    d1c8:	0b c0       	rjmp	.+22     	; 0xd1e0 <bldr_process_msg+0x162>
    d1ca:	84 30       	cpi	r24, 0x04	; 4
    d1cc:	09 f0       	breq	.+2      	; 0xd1d0 <bldr_process_msg+0x152>
    d1ce:	d0 c0       	rjmp	.+416    	; 0xd370 <bldr_process_msg+0x2f2>
    d1d0:	a9 01       	movw	r20, r18
    d1d2:	49 0f       	add	r20, r25
    d1d4:	51 1d       	adc	r21, r1
    d1d6:	41 30       	cpi	r20, 0x01	; 1
    d1d8:	5e 41       	sbci	r21, 0x1E	; 30
    d1da:	08 f0       	brcs	.+2      	; 0xd1de <bldr_process_msg+0x160>
    d1dc:	cb c0       	rjmp	.+406    	; 0xd374 <bldr_process_msg+0x2f6>
    d1de:	0a c0       	rjmp	.+20     	; 0xd1f4 <bldr_process_msg+0x176>
    d1e0:	82 30       	cpi	r24, 0x02	; 2
    d1e2:	09 f0       	breq	.+2      	; 0xd1e6 <bldr_process_msg+0x168>
    d1e4:	c9 c0       	rjmp	.+402    	; 0xd378 <bldr_process_msg+0x2fa>
    d1e6:	a9 01       	movw	r20, r18
    d1e8:	49 0f       	add	r20, r25
    d1ea:	51 1d       	adc	r21, r1
    d1ec:	41 30       	cpi	r20, 0x01	; 1
    d1ee:	50 4f       	sbci	r21, 0xF0	; 240
    d1f0:	08 f0       	brcs	.+2      	; 0xd1f4 <bldr_process_msg+0x176>
    d1f2:	c4 c0       	rjmp	.+392    	; 0xd37c <bldr_process_msg+0x2fe>
    d1f4:	a6 e1       	ldi	r26, 0x16	; 22
    d1f6:	b0 e2       	ldi	r27, 0x20	; 32
    d1f8:	50 96       	adiw	r26, 0x10	; 16
    d1fa:	ed 91       	ld	r30, X+
    d1fc:	fc 91       	ld	r31, X
    d1fe:	51 97       	sbiw	r26, 0x11	; 17
    d200:	52 96       	adiw	r26, 0x12	; 18
    d202:	4d 91       	ld	r20, X+
    d204:	5c 91       	ld	r21, X
    d206:	53 97       	sbiw	r26, 0x13	; 19
    d208:	bf 01       	movw	r22, r30
    d20a:	64 0f       	add	r22, r20
    d20c:	75 1f       	adc	r23, r21
    d20e:	26 17       	cp	r18, r22
    d210:	37 07       	cpc	r19, r23
    d212:	09 f0       	breq	.+2      	; 0xd216 <bldr_process_msg+0x198>
    d214:	b5 c0       	rjmp	.+362    	; 0xd380 <bldr_process_msg+0x302>
    d216:	91 11       	cpse	r25, r1
    d218:	6d c0       	rjmp	.+218    	; 0xd2f4 <bldr_process_msg+0x276>
    d21a:	45 2b       	or	r20, r21
    d21c:	39 f0       	breq	.+14     	; 0xd22c <bldr_process_msg+0x1ae>
    d21e:	40 e0       	ldi	r20, 0x00	; 0
    d220:	b8 01       	movw	r22, r16
    d222:	cf 01       	movw	r24, r30
    d224:	0e 94 fb 87 	call	0x10ff6	; 0x10ff6 <sbldr_prog_page>
    d228:	81 11       	cpse	r24, r1
    d22a:	ac c0       	rjmp	.+344    	; 0xd384 <bldr_process_msg+0x306>
    d22c:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d230:	86 70       	andi	r24, 0x06	; 6
    d232:	82 30       	cpi	r24, 0x02	; 2
    d234:	69 f4       	brne	.+26     	; 0xd250 <bldr_process_msg+0x1d2>
    d236:	e6 e1       	ldi	r30, 0x16	; 22
    d238:	f0 e2       	ldi	r31, 0x20	; 32
    d23a:	20 89       	ldd	r18, Z+16	; 0x10
    d23c:	31 89       	ldd	r19, Z+17	; 0x11
    d23e:	82 89       	ldd	r24, Z+18	; 0x12
    d240:	93 89       	ldd	r25, Z+19	; 0x13
    d242:	82 0f       	add	r24, r18
    d244:	93 1f       	adc	r25, r19
    d246:	81 15       	cp	r24, r1
    d248:	9e 41       	sbci	r25, 0x1E	; 30
    d24a:	09 f0       	breq	.+2      	; 0xd24e <bldr_process_msg+0x1d0>
    d24c:	9d c0       	rjmp	.+314    	; 0xd388 <bldr_process_msg+0x30a>
    d24e:	10 c0       	rjmp	.+32     	; 0xd270 <bldr_process_msg+0x1f2>
    d250:	84 30       	cpi	r24, 0x04	; 4
    d252:	71 f4       	brne	.+28     	; 0xd270 <bldr_process_msg+0x1f2>
    d254:	e6 e1       	ldi	r30, 0x16	; 22
    d256:	f0 e2       	ldi	r31, 0x20	; 32
    d258:	20 89       	ldd	r18, Z+16	; 0x10
    d25a:	31 89       	ldd	r19, Z+17	; 0x11
    d25c:	82 89       	ldd	r24, Z+18	; 0x12
    d25e:	93 89       	ldd	r25, Z+19	; 0x13
    d260:	82 0f       	add	r24, r18
    d262:	93 1f       	adc	r25, r19
    d264:	24 89       	ldd	r18, Z+20	; 0x14
    d266:	35 89       	ldd	r19, Z+21	; 0x15
    d268:	82 17       	cp	r24, r18
    d26a:	93 07       	cpc	r25, r19
    d26c:	09 f0       	breq	.+2      	; 0xd270 <bldr_process_msg+0x1f2>
    d26e:	8e c0       	rjmp	.+284    	; 0xd38c <bldr_process_msg+0x30e>
    d270:	e6 e1       	ldi	r30, 0x16	; 22
    d272:	f0 e2       	ldi	r31, 0x20	; 32
    d274:	86 89       	ldd	r24, Z+22	; 0x16
    d276:	97 89       	ldd	r25, Z+23	; 0x17
    d278:	04 89       	ldd	r16, Z+20	; 0x14
    d27a:	15 89       	ldd	r17, Z+21	; 0x15
    d27c:	e0 e0       	ldi	r30, 0x00	; 0
    d27e:	f0 e0       	ldi	r31, 0x00	; 0
    d280:	08 c0       	rjmp	.+16     	; 0xd292 <bldr_process_msg+0x214>
    d282:	7f 01       	movw	r14, r30
    d284:	2f ef       	ldi	r18, 0xFF	; 255
    d286:	e2 1a       	sub	r14, r18
    d288:	f2 0a       	sbc	r15, r18
    d28a:	64 91       	lpm	r22, Z
    d28c:	0e 94 00 68 	call	0xd000	; 0xd000 <crc_ccitt_update>
    d290:	f7 01       	movw	r30, r14
    d292:	0e 17       	cp	r16, r30
    d294:	1f 07       	cpc	r17, r31
    d296:	a9 f7       	brne	.-22     	; 0xd282 <bldr_process_msg+0x204>
    d298:	89 2b       	or	r24, r25
    d29a:	09 f0       	breq	.+2      	; 0xd29e <bldr_process_msg+0x220>
    d29c:	79 c0       	rjmp	.+242    	; 0xd390 <bldr_process_msg+0x312>
    d29e:	1e ef       	ldi	r17, 0xFE	; 254
    d2a0:	54 c0       	rjmp	.+168    	; 0xd34a <bldr_process_msg+0x2cc>
    d2a2:	f7 01       	movw	r30, r14
    d2a4:	82 89       	ldd	r24, Z+18	; 0x12
    d2a6:	93 89       	ldd	r25, Z+19	; 0x13
    d2a8:	ac 01       	movw	r20, r24
    d2aa:	4f 5f       	subi	r20, 0xFF	; 255
    d2ac:	5f 4f       	sbci	r21, 0xFF	; 255
    d2ae:	42 8b       	std	Z+18, r20	; 0x12
    d2b0:	53 8b       	std	Z+19, r21	; 0x13
    d2b2:	fe 01       	movw	r30, r28
    d2b4:	e2 0f       	add	r30, r18
    d2b6:	f3 1f       	adc	r31, r19
    d2b8:	25 81       	ldd	r18, Z+5	; 0x05
    d2ba:	f8 01       	movw	r30, r16
    d2bc:	e8 0f       	add	r30, r24
    d2be:	f9 1f       	adc	r31, r25
    d2c0:	20 83       	st	Z, r18
    d2c2:	f7 01       	movw	r30, r14
    d2c4:	82 89       	ldd	r24, Z+18	; 0x12
    d2c6:	93 89       	ldd	r25, Z+19	; 0x13
    d2c8:	81 15       	cp	r24, r1
    d2ca:	91 40       	sbci	r25, 0x01	; 1
    d2cc:	89 f4       	brne	.+34     	; 0xd2f0 <bldr_process_msg+0x272>
    d2ce:	40 e0       	ldi	r20, 0x00	; 0
    d2d0:	b8 01       	movw	r22, r16
    d2d2:	f7 01       	movw	r30, r14
    d2d4:	80 89       	ldd	r24, Z+16	; 0x10
    d2d6:	91 89       	ldd	r25, Z+17	; 0x11
    d2d8:	0e 94 fb 87 	call	0x10ff6	; 0x10ff6 <sbldr_prog_page>
    d2dc:	81 11       	cpse	r24, r1
    d2de:	5a c0       	rjmp	.+180    	; 0xd394 <bldr_process_msg+0x316>
    d2e0:	f7 01       	movw	r30, r14
    d2e2:	80 89       	ldd	r24, Z+16	; 0x10
    d2e4:	91 89       	ldd	r25, Z+17	; 0x11
    d2e6:	93 95       	inc	r25
    d2e8:	80 8b       	std	Z+16, r24	; 0x10
    d2ea:	91 8b       	std	Z+17, r25	; 0x11
    d2ec:	12 8a       	std	Z+18, r1	; 0x12
    d2ee:	13 8a       	std	Z+19, r1	; 0x13
    d2f0:	d3 94       	inc	r13
    d2f2:	0a c0       	rjmp	.+20     	; 0xd308 <bldr_process_msg+0x28a>
    d2f4:	0f 2e       	mov	r0, r31
    d2f6:	f3 e0       	ldi	r31, 0x03	; 3
    d2f8:	df 2e       	mov	r13, r31
    d2fa:	f0 2d       	mov	r31, r0
    d2fc:	0f 2e       	mov	r0, r31
    d2fe:	f6 e1       	ldi	r31, 0x16	; 22
    d300:	ef 2e       	mov	r14, r31
    d302:	f0 e2       	ldi	r31, 0x20	; 32
    d304:	ff 2e       	mov	r15, r31
    d306:	f0 2d       	mov	r31, r0
    d308:	2d 2d       	mov	r18, r13
    d30a:	30 e0       	ldi	r19, 0x00	; 0
    d30c:	8b 81       	ldd	r24, Y+3	; 0x03
    d30e:	8f 73       	andi	r24, 0x3F	; 63
    d310:	90 e0       	ldi	r25, 0x00	; 0
    d312:	28 17       	cp	r18, r24
    d314:	39 07       	cpc	r19, r25
    d316:	2c f2       	brlt	.-118    	; 0xd2a2 <bldr_process_msg+0x224>
    d318:	8b 81       	ldd	r24, Y+3	; 0x03
    d31a:	80 7c       	andi	r24, 0xC0	; 192
    d31c:	8b 83       	std	Y+3, r24	; 0x03
    d31e:	3c c0       	rjmp	.+120    	; 0xd398 <bldr_process_msg+0x31a>
    d320:	ce 01       	movw	r24, r28
    d322:	0e 94 04 81 	call	0x10208	; 0x10208 <bldr_process_basic_msg>
    d326:	18 2f       	mov	r17, r24
    d328:	01 c0       	rjmp	.+2      	; 0xd32c <bldr_process_msg+0x2ae>
    d32a:	1f ef       	ldi	r17, 0xFF	; 255
    d32c:	1f 3f       	cpi	r17, 0xFF	; 255
    d32e:	e9 f1       	breq	.+122    	; 0xd3aa <bldr_process_msg+0x32c>
    d330:	11 23       	and	r17, r17
    d332:	59 f0       	breq	.+22     	; 0xd34a <bldr_process_msg+0x2cc>
    d334:	1e 3f       	cpi	r17, 0xFE	; 254
    d336:	49 f0       	breq	.+18     	; 0xd34a <bldr_process_msg+0x2cc>
    d338:	8b 81       	ldd	r24, Y+3	; 0x03
    d33a:	80 7c       	andi	r24, 0xC0	; 192
    d33c:	82 60       	ori	r24, 0x02	; 2
    d33e:	8b 83       	std	Y+3, r24	; 0x03
    d340:	8c 81       	ldd	r24, Y+4	; 0x04
    d342:	8d 83       	std	Y+5, r24	; 0x05
    d344:	1e 83       	std	Y+6, r17	; 0x06
    d346:	80 e8       	ldi	r24, 0x80	; 128
    d348:	8c 83       	std	Y+4, r24	; 0x04
    d34a:	89 81       	ldd	r24, Y+1	; 0x01
    d34c:	88 83       	st	Y, r24
    d34e:	8c 81       	ldd	r24, Y+4	; 0x04
    d350:	80 68       	ori	r24, 0x80	; 128
    d352:	8c 83       	std	Y+4, r24	; 0x04
    d354:	ce 01       	movw	r24, r28
    d356:	0e 94 70 05 	call	0xae0	; 0xae0 <sboxnet_send_msg>
    d35a:	27 c0       	rjmp	.+78     	; 0xd3aa <bldr_process_msg+0x32c>
    d35c:	10 e0       	ldi	r17, 0x00	; 0
    d35e:	25 c0       	rjmp	.+74     	; 0xd3aa <bldr_process_msg+0x32c>
    d360:	13 e0       	ldi	r17, 0x03	; 3
    d362:	ea cf       	rjmp	.-44     	; 0xd338 <bldr_process_msg+0x2ba>
    d364:	13 e0       	ldi	r17, 0x03	; 3
    d366:	e8 cf       	rjmp	.-48     	; 0xd338 <bldr_process_msg+0x2ba>
    d368:	15 e6       	ldi	r17, 0x65	; 101
    d36a:	e6 cf       	rjmp	.-52     	; 0xd338 <bldr_process_msg+0x2ba>
    d36c:	13 e0       	ldi	r17, 0x03	; 3
    d36e:	e4 cf       	rjmp	.-56     	; 0xd338 <bldr_process_msg+0x2ba>
    d370:	15 e6       	ldi	r17, 0x65	; 101
    d372:	e2 cf       	rjmp	.-60     	; 0xd338 <bldr_process_msg+0x2ba>
    d374:	16 e6       	ldi	r17, 0x66	; 102
    d376:	e0 cf       	rjmp	.-64     	; 0xd338 <bldr_process_msg+0x2ba>
    d378:	15 e6       	ldi	r17, 0x65	; 101
    d37a:	de cf       	rjmp	.-68     	; 0xd338 <bldr_process_msg+0x2ba>
    d37c:	16 e6       	ldi	r17, 0x66	; 102
    d37e:	dc cf       	rjmp	.-72     	; 0xd338 <bldr_process_msg+0x2ba>
    d380:	17 e6       	ldi	r17, 0x67	; 103
    d382:	da cf       	rjmp	.-76     	; 0xd338 <bldr_process_msg+0x2ba>
    d384:	1a e6       	ldi	r17, 0x6A	; 106
    d386:	d8 cf       	rjmp	.-80     	; 0xd338 <bldr_process_msg+0x2ba>
    d388:	16 e6       	ldi	r17, 0x66	; 102
    d38a:	d6 cf       	rjmp	.-84     	; 0xd338 <bldr_process_msg+0x2ba>
    d38c:	16 e6       	ldi	r17, 0x66	; 102
    d38e:	d4 cf       	rjmp	.-88     	; 0xd338 <bldr_process_msg+0x2ba>
    d390:	1b e6       	ldi	r17, 0x6B	; 107
    d392:	d2 cf       	rjmp	.-92     	; 0xd338 <bldr_process_msg+0x2ba>
    d394:	1a e6       	ldi	r17, 0x6A	; 106
    d396:	d0 cf       	rjmp	.-96     	; 0xd338 <bldr_process_msg+0x2ba>
    d398:	10 e0       	ldi	r17, 0x00	; 0
    d39a:	d7 cf       	rjmp	.-82     	; 0xd34a <bldr_process_msg+0x2cc>
    d39c:	1f ef       	ldi	r17, 0xFF	; 255
    d39e:	05 c0       	rjmp	.+10     	; 0xd3aa <bldr_process_msg+0x32c>
    d3a0:	18 2f       	mov	r17, r24
    d3a2:	01 c0       	rjmp	.+2      	; 0xd3a6 <bldr_process_msg+0x328>
    d3a4:	18 2f       	mov	r17, r24
    d3a6:	1f 3f       	cpi	r17, 0xFF	; 255
    d3a8:	29 f6       	brne	.-118    	; 0xd334 <bldr_process_msg+0x2b6>
    d3aa:	81 2f       	mov	r24, r17
    d3ac:	df 91       	pop	r29
    d3ae:	cf 91       	pop	r28
    d3b0:	1f 91       	pop	r17
    d3b2:	0f 91       	pop	r16
    d3b4:	ff 90       	pop	r15
    d3b6:	ef 90       	pop	r14
    d3b8:	df 90       	pop	r13
    d3ba:	cf 90       	pop	r12
    d3bc:	08 95       	ret

0000d3be <bldr_main>:
    d3be:	cf 93       	push	r28
    d3c0:	df 93       	push	r29
    d3c2:	cd b7       	in	r28, 0x3d	; 61
    d3c4:	de b7       	in	r29, 0x3e	; 62
    d3c6:	c6 54       	subi	r28, 0x46	; 70
    d3c8:	d1 40       	sbci	r29, 0x01	; 1
    d3ca:	cd bf       	out	0x3d, r28	; 61
    d3cc:	de bf       	out	0x3e, r29	; 62
    d3ce:	98 ed       	ldi	r25, 0xD8	; 216
    d3d0:	94 bf       	out	0x34, r25	; 52
    d3d2:	92 e4       	ldi	r25, 0x42	; 66
    d3d4:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7ef0a2>
    d3d8:	24 e0       	ldi	r18, 0x04	; 4
    d3da:	30 e2       	ldi	r19, 0x20	; 32
    d3dc:	20 32       	cpi	r18, 0x20	; 32
    d3de:	31 05       	cpc	r19, r1
    d3e0:	30 f4       	brcc	.+12     	; 0xd3ee <bldr_main+0x30>
    d3e2:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    d3e6:	91 60       	ori	r25, 0x01	; 1
    d3e8:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <g_dev_state>
    d3ec:	08 c0       	rjmp	.+16     	; 0xd3fe <bldr_main+0x40>
    d3ee:	2f b7       	in	r18, 0x3f	; 63
    d3f0:	f8 94       	cli
    d3f2:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    d3f6:	91 60       	ori	r25, 0x01	; 1
    d3f8:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <g_dev_state>
    d3fc:	2f bf       	out	0x3f, r18	; 63
    d3fe:	88 23       	and	r24, r24
    d400:	21 f0       	breq	.+8      	; 0xd40a <bldr_main+0x4c>
    d402:	0e 94 12 68 	call	0xd024	; 0xd024 <bldr_process_cmd_net_reset>
    d406:	0e 94 b0 01 	call	0x360	; 0x360 <sboxnet_init>
    d40a:	e8 e4       	ldi	r30, 0x48	; 72
    d40c:	f0 e0       	ldi	r31, 0x00	; 0
    d40e:	80 81       	ld	r24, Z
    d410:	81 7f       	andi	r24, 0xF1	; 241
    d412:	80 83       	st	Z, r24
    d414:	78 94       	sei
    d416:	08 e4       	ldi	r16, 0x48	; 72
    d418:	10 e0       	ldi	r17, 0x00	; 0
    d41a:	ce 01       	movw	r24, r28
    d41c:	01 96       	adiw	r24, 0x01	; 1
    d41e:	0e 94 02 81 	call	0x10204	; 0x10204 <bldr_task>
    d422:	ca 5b       	subi	r28, 0xBA	; 186
    d424:	de 4f       	sbci	r29, 0xFE	; 254
    d426:	88 83       	st	Y, r24
    d428:	c6 54       	subi	r28, 0x46	; 70
    d42a:	d1 40       	sbci	r29, 0x01	; 1
    d42c:	ca 5b       	subi	r28, 0xBA	; 186
    d42e:	de 4f       	sbci	r29, 0xFE	; 254
    d430:	88 81       	ld	r24, Y
    d432:	c6 54       	subi	r28, 0x46	; 70
    d434:	d1 40       	sbci	r29, 0x01	; 1
    d436:	81 11       	cpse	r24, r1
    d438:	19 c0       	rjmp	.+50     	; 0xd46c <bldr_main+0xae>
    d43a:	65 e4       	ldi	r22, 0x45	; 69
    d43c:	ce 01       	movw	r24, r28
    d43e:	01 96       	adiw	r24, 0x01	; 1
    d440:	0e 94 da 04 	call	0x9b4	; 0x9b4 <sboxnet_receive_msg>
    d444:	18 16       	cp	r1, r24
    d446:	94 f4       	brge	.+36     	; 0xd46c <bldr_main+0xae>
    d448:	be 01       	movw	r22, r28
    d44a:	6a 5b       	subi	r22, 0xBA	; 186
    d44c:	7f 4f       	sbci	r23, 0xFF	; 255
    d44e:	ce 01       	movw	r24, r28
    d450:	01 96       	adiw	r24, 0x01	; 1
    d452:	0e 94 3f 68 	call	0xd07e	; 0xd07e <bldr_process_msg>
    d456:	8e 3f       	cpi	r24, 0xFE	; 254
    d458:	49 f4       	brne	.+18     	; 0xd46c <bldr_main+0xae>
    d45a:	0e 94 9f 01 	call	0x33e	; 0x33e <sboxnet_all_sent>
    d45e:	88 23       	and	r24, r24
    d460:	f1 f3       	breq	.-4      	; 0xd45e <bldr_main+0xa0>
    d462:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d466:	84 70       	andi	r24, 0x04	; 4
    d468:	0e 94 fa 87 	call	0x10ff4	; 0x10ff4 <sbldr_finish_fwup>
    d46c:	f8 01       	movw	r30, r16
    d46e:	80 81       	ld	r24, Z
    d470:	81 60       	ori	r24, 0x01	; 1
    d472:	80 83       	st	Z, r24
    d474:	88 95       	sleep
    d476:	80 81       	ld	r24, Z
    d478:	8e 7f       	andi	r24, 0xFE	; 254
    d47a:	80 83       	st	Z, r24
    d47c:	ce cf       	rjmp	.-100    	; 0xd41a <bldr_main+0x5c>

0000d47e <__vector_49>:
    d47e:	1f 92       	push	r1
    d480:	0f 92       	push	r0
    d482:	0f b6       	in	r0, 0x3f	; 63
    d484:	0f 92       	push	r0
    d486:	11 24       	eor	r1, r1
    d488:	0b b6       	in	r0, 0x3b	; 59
    d48a:	0f 92       	push	r0
    d48c:	2f 93       	push	r18
    d48e:	3f 93       	push	r19
    d490:	4f 93       	push	r20
    d492:	5f 93       	push	r21
    d494:	6f 93       	push	r22
    d496:	7f 93       	push	r23
    d498:	8f 93       	push	r24
    d49a:	9f 93       	push	r25
    d49c:	af 93       	push	r26
    d49e:	bf 93       	push	r27
    d4a0:	ef 93       	push	r30
    d4a2:	ff 93       	push	r31
    d4a4:	0e 94 37 04 	call	0x86e	; 0x86e <sboxnet_timer_bit>
    d4a8:	ff 91       	pop	r31
    d4aa:	ef 91       	pop	r30
    d4ac:	bf 91       	pop	r27
    d4ae:	af 91       	pop	r26
    d4b0:	9f 91       	pop	r25
    d4b2:	8f 91       	pop	r24
    d4b4:	7f 91       	pop	r23
    d4b6:	6f 91       	pop	r22
    d4b8:	5f 91       	pop	r21
    d4ba:	4f 91       	pop	r20
    d4bc:	3f 91       	pop	r19
    d4be:	2f 91       	pop	r18
    d4c0:	0f 90       	pop	r0
    d4c2:	0b be       	out	0x3b, r0	; 59
    d4c4:	0f 90       	pop	r0
    d4c6:	0f be       	out	0x3f, r0	; 63
    d4c8:	0f 90       	pop	r0
    d4ca:	1f 90       	pop	r1
    d4cc:	18 95       	reti

0000d4ce <__vector_47>:
    d4ce:	1f 92       	push	r1
    d4d0:	0f 92       	push	r0
    d4d2:	0f b6       	in	r0, 0x3f	; 63
    d4d4:	0f 92       	push	r0
    d4d6:	11 24       	eor	r1, r1
    d4d8:	0b b6       	in	r0, 0x3b	; 59
    d4da:	0f 92       	push	r0
    d4dc:	8f 93       	push	r24
    d4de:	9f 93       	push	r25
    d4e0:	ef 93       	push	r30
    d4e2:	ff 93       	push	r31
    d4e4:	e6 e1       	ldi	r30, 0x16	; 22
    d4e6:	f0 e2       	ldi	r31, 0x20	; 32
    d4e8:	85 81       	ldd	r24, Z+5	; 0x05
    d4ea:	8f 5f       	subi	r24, 0xFF	; 255
    d4ec:	85 83       	std	Z+5, r24	; 0x05
    d4ee:	86 81       	ldd	r24, Z+6	; 0x06
    d4f0:	88 23       	and	r24, r24
    d4f2:	19 f0       	breq	.+6      	; 0xd4fa <__vector_47+0x2c>
    d4f4:	86 81       	ldd	r24, Z+6	; 0x06
    d4f6:	81 50       	subi	r24, 0x01	; 1
    d4f8:	86 83       	std	Z+6, r24	; 0x06
    d4fa:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <g_v+0x8>
    d4fe:	88 23       	and	r24, r24
    d500:	29 f0       	breq	.+10     	; 0xd50c <__vector_47+0x3e>
    d502:	e6 e1       	ldi	r30, 0x16	; 22
    d504:	f0 e2       	ldi	r31, 0x20	; 32
    d506:	80 85       	ldd	r24, Z+8	; 0x08
    d508:	81 50       	subi	r24, 0x01	; 1
    d50a:	80 87       	std	Z+8, r24	; 0x08
    d50c:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <g_v+0x9>
    d510:	88 23       	and	r24, r24
    d512:	29 f0       	breq	.+10     	; 0xd51e <__vector_47+0x50>
    d514:	e6 e1       	ldi	r30, 0x16	; 22
    d516:	f0 e2       	ldi	r31, 0x20	; 32
    d518:	81 85       	ldd	r24, Z+9	; 0x09
    d51a:	81 50       	subi	r24, 0x01	; 1
    d51c:	81 87       	std	Z+9, r24	; 0x09
    d51e:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <g_v+0x7>
    d522:	88 23       	and	r24, r24
    d524:	c1 f0       	breq	.+48     	; 0xd556 <__vector_47+0x88>
    d526:	84 e0       	ldi	r24, 0x04	; 4
    d528:	90 e2       	ldi	r25, 0x20	; 32
    d52a:	80 97       	sbiw	r24, 0x20	; 32
    d52c:	30 f4       	brcc	.+12     	; 0xd53a <__vector_47+0x6c>
    d52e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d532:	8f 7d       	andi	r24, 0xDF	; 223
    d534:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d538:	08 c0       	rjmp	.+16     	; 0xd54a <__vector_47+0x7c>
    d53a:	9f b7       	in	r25, 0x3f	; 63
    d53c:	f8 94       	cli
    d53e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d542:	8f 7d       	andi	r24, 0xDF	; 223
    d544:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d548:	9f bf       	out	0x3f, r25	; 63
    d54a:	e6 e1       	ldi	r30, 0x16	; 22
    d54c:	f0 e2       	ldi	r31, 0x20	; 32
    d54e:	87 81       	ldd	r24, Z+7	; 0x07
    d550:	81 50       	subi	r24, 0x01	; 1
    d552:	87 83       	std	Z+7, r24	; 0x07
    d554:	12 c0       	rjmp	.+36     	; 0xd57a <__vector_47+0xac>
    d556:	84 e0       	ldi	r24, 0x04	; 4
    d558:	90 e2       	ldi	r25, 0x20	; 32
    d55a:	80 97       	sbiw	r24, 0x20	; 32
    d55c:	30 f4       	brcc	.+12     	; 0xd56a <__vector_47+0x9c>
    d55e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d562:	80 62       	ori	r24, 0x20	; 32
    d564:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d568:	08 c0       	rjmp	.+16     	; 0xd57a <__vector_47+0xac>
    d56a:	9f b7       	in	r25, 0x3f	; 63
    d56c:	f8 94       	cli
    d56e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d572:	80 62       	ori	r24, 0x20	; 32
    d574:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d578:	9f bf       	out	0x3f, r25	; 63
    d57a:	ff 91       	pop	r31
    d57c:	ef 91       	pop	r30
    d57e:	9f 91       	pop	r25
    d580:	8f 91       	pop	r24
    d582:	0f 90       	pop	r0
    d584:	0b be       	out	0x3b, r0	; 59
    d586:	0f 90       	pop	r0
    d588:	0f be       	out	0x3f, r0	; 63
    d58a:	0f 90       	pop	r0
    d58c:	1f 90       	pop	r1
    d58e:	18 95       	reti

0000d590 <_bldr_process_basic_msg>:
    d590:	ef 92       	push	r14
    d592:	ff 92       	push	r15
    d594:	0f 93       	push	r16
    d596:	1f 93       	push	r17
    d598:	cf 93       	push	r28
    d59a:	df 93       	push	r29
    d59c:	fc 01       	movw	r30, r24
    d59e:	94 81       	ldd	r25, Z+4	; 0x04
    d5a0:	96 31       	cpi	r25, 0x16	; 22
    d5a2:	09 f4       	brne	.+2      	; 0xd5a6 <_bldr_process_basic_msg+0x16>
    d5a4:	00 c1       	rjmp	.+512    	; 0xd7a6 <_bldr_process_basic_msg+0x216>
    d5a6:	20 f4       	brcc	.+8      	; 0xd5b0 <_bldr_process_basic_msg+0x20>
    d5a8:	92 31       	cpi	r25, 0x12	; 18
    d5aa:	09 f4       	brne	.+2      	; 0xd5ae <_bldr_process_basic_msg+0x1e>
    d5ac:	c2 c0       	rjmp	.+388    	; 0xd732 <_bldr_process_basic_msg+0x1a2>
    d5ae:	05 c0       	rjmp	.+10     	; 0xd5ba <_bldr_process_basic_msg+0x2a>
    d5b0:	98 31       	cpi	r25, 0x18	; 24
    d5b2:	29 f0       	breq	.+10     	; 0xd5be <_bldr_process_basic_msg+0x2e>
    d5b4:	99 31       	cpi	r25, 0x19	; 25
    d5b6:	09 f4       	brne	.+2      	; 0xd5ba <_bldr_process_basic_msg+0x2a>
    d5b8:	28 c1       	rjmp	.+592    	; 0xd80a <_bldr_process_basic_msg+0x27a>
    d5ba:	82 e0       	ldi	r24, 0x02	; 2
    d5bc:	3b c1       	rjmp	.+630    	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d5be:	83 81       	ldd	r24, Z+3	; 0x03
    d5c0:	8f 73       	andi	r24, 0x3F	; 63
    d5c2:	24 e0       	ldi	r18, 0x04	; 4
    d5c4:	30 e2       	ldi	r19, 0x20	; 32
    d5c6:	20 32       	cpi	r18, 0x20	; 32
    d5c8:	31 05       	cpc	r19, r1
    d5ca:	30 f4       	brcc	.+12     	; 0xd5d8 <_bldr_process_basic_msg+0x48>
    d5cc:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    d5d0:	99 7f       	andi	r25, 0xF9	; 249
    d5d2:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <g_dev_state>
    d5d6:	10 c0       	rjmp	.+32     	; 0xd5f8 <_bldr_process_basic_msg+0x68>
    d5d8:	2f b7       	in	r18, 0x3f	; 63
    d5da:	f8 94       	cli
    d5dc:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    d5e0:	9d 7f       	andi	r25, 0xFD	; 253
    d5e2:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <g_dev_state>
    d5e6:	2f bf       	out	0x3f, r18	; 63
    d5e8:	2f b7       	in	r18, 0x3f	; 63
    d5ea:	f8 94       	cli
    d5ec:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    d5f0:	9b 7f       	andi	r25, 0xFB	; 251
    d5f2:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <g_dev_state>
    d5f6:	2f bf       	out	0x3f, r18	; 63
    d5f8:	83 32       	cpi	r24, 0x23	; 35
    d5fa:	09 f0       	breq	.+2      	; 0xd5fe <_bldr_process_basic_msg+0x6e>
    d5fc:	08 c1       	rjmp	.+528    	; 0xd80e <_bldr_process_basic_msg+0x27e>
    d5fe:	25 81       	ldd	r18, Z+5	; 0x05
    d600:	36 81       	ldd	r19, Z+6	; 0x06
    d602:	80 85       	ldd	r24, Z+8	; 0x08
    d604:	91 85       	ldd	r25, Z+9	; 0x09
    d606:	a2 85       	ldd	r26, Z+10	; 0x0a
    d608:	b3 85       	ldd	r27, Z+11	; 0x0b
    d60a:	83 35       	cpi	r24, 0x53	; 83
    d60c:	42 e6       	ldi	r20, 0x62	; 98
    d60e:	94 07       	cpc	r25, r20
    d610:	4e e6       	ldi	r20, 0x6E	; 110
    d612:	a4 07       	cpc	r26, r20
    d614:	42 e4       	ldi	r20, 0x42	; 66
    d616:	b4 07       	cpc	r27, r20
    d618:	d9 f4       	brne	.+54     	; 0xd650 <_bldr_process_basic_msg+0xc0>
    d61a:	87 81       	ldd	r24, Z+7	; 0x07
    d61c:	80 fd       	sbrc	r24, 0
    d61e:	f9 c0       	rjmp	.+498    	; 0xd812 <_bldr_process_basic_msg+0x282>
    d620:	21 15       	cp	r18, r1
    d622:	6e e1       	ldi	r22, 0x1E	; 30
    d624:	36 07       	cpc	r19, r22
    d626:	09 f0       	breq	.+2      	; 0xd62a <_bldr_process_basic_msg+0x9a>
    d628:	f6 c0       	rjmp	.+492    	; 0xd816 <_bldr_process_basic_msg+0x286>
    d62a:	84 e0       	ldi	r24, 0x04	; 4
    d62c:	90 e2       	ldi	r25, 0x20	; 32
    d62e:	80 97       	sbiw	r24, 0x20	; 32
    d630:	30 f4       	brcc	.+12     	; 0xd63e <_bldr_process_basic_msg+0xae>
    d632:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d636:	82 60       	ori	r24, 0x02	; 2
    d638:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d63c:	5a c0       	rjmp	.+180    	; 0xd6f2 <_bldr_process_basic_msg+0x162>
    d63e:	9f b7       	in	r25, 0x3f	; 63
    d640:	f8 94       	cli
    d642:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d646:	82 60       	ori	r24, 0x02	; 2
    d648:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d64c:	9f bf       	out	0x3f, r25	; 63
    d64e:	51 c0       	rjmp	.+162    	; 0xd6f2 <_bldr_process_basic_msg+0x162>
    d650:	83 35       	cpi	r24, 0x53	; 83
    d652:	92 46       	sbci	r25, 0x62	; 98
    d654:	ae 46       	sbci	r26, 0x6E	; 110
    d656:	b1 44       	sbci	r27, 0x41	; 65
    d658:	09 f0       	breq	.+2      	; 0xd65c <_bldr_process_basic_msg+0xcc>
    d65a:	4b c0       	rjmp	.+150    	; 0xd6f2 <_bldr_process_basic_msg+0x162>
    d65c:	87 81       	ldd	r24, Z+7	; 0x07
    d65e:	80 ff       	sbrs	r24, 0
    d660:	dc c0       	rjmp	.+440    	; 0xd81a <_bldr_process_basic_msg+0x28a>
    d662:	af ec       	ldi	r26, 0xCF	; 207
    d664:	b1 e0       	ldi	r27, 0x01	; 1
    d666:	8c 91       	ld	r24, X
    d668:	88 23       	and	r24, r24
    d66a:	ec f3       	brlt	.-6      	; 0xd666 <_bldr_process_basic_msg+0xd6>
    d66c:	ac ec       	ldi	r26, 0xCC	; 204
    d66e:	b1 e0       	ldi	r27, 0x01	; 1
    d670:	8c 91       	ld	r24, X
    d672:	88 60       	ori	r24, 0x08	; 8
    d674:	8c 93       	st	X, r24
    d676:	40 91 05 13 	lds	r20, 0x1305	; 0x801305 <__TEXT_REGION_LENGTH__+0x7f0305>
    d67a:	50 91 06 13 	lds	r21, 0x1306	; 0x801306 <__TEXT_REGION_LENGTH__+0x7f0306>
    d67e:	af ec       	ldi	r26, 0xCF	; 207
    d680:	b1 e0       	ldi	r27, 0x01	; 1
    d682:	8c 91       	ld	r24, X
    d684:	88 23       	and	r24, r24
    d686:	ec f3       	brlt	.-6      	; 0xd682 <_bldr_process_basic_msg+0xf2>
    d688:	ac ec       	ldi	r26, 0xCC	; 204
    d68a:	b1 e0       	ldi	r27, 0x01	; 1
    d68c:	8c 91       	ld	r24, X
    d68e:	88 60       	ori	r24, 0x08	; 8
    d690:	8c 93       	st	X, r24
    d692:	80 91 07 13 	lds	r24, 0x1307	; 0x801307 <__TEXT_REGION_LENGTH__+0x7f0307>
    d696:	90 91 08 13 	lds	r25, 0x1308	; 0x801308 <__TEXT_REGION_LENGTH__+0x7f0308>
    d69a:	4f 3f       	cpi	r20, 0xFF	; 255
    d69c:	df ef       	ldi	r29, 0xFF	; 255
    d69e:	5d 07       	cpc	r21, r29
    d6a0:	21 f4       	brne	.+8      	; 0xd6aa <_bldr_process_basic_msg+0x11a>
    d6a2:	8f 3f       	cpi	r24, 0xFF	; 255
    d6a4:	6f ef       	ldi	r22, 0xFF	; 255
    d6a6:	96 07       	cpc	r25, r22
    d6a8:	61 f0       	breq	.+24     	; 0xd6c2 <_bldr_process_basic_msg+0x132>
    d6aa:	64 85       	ldd	r22, Z+12	; 0x0c
    d6ac:	75 85       	ldd	r23, Z+13	; 0x0d
    d6ae:	46 17       	cp	r20, r22
    d6b0:	57 07       	cpc	r21, r23
    d6b2:	09 f0       	breq	.+2      	; 0xd6b6 <_bldr_process_basic_msg+0x126>
    d6b4:	b4 c0       	rjmp	.+360    	; 0xd81e <_bldr_process_basic_msg+0x28e>
    d6b6:	46 85       	ldd	r20, Z+14	; 0x0e
    d6b8:	57 85       	ldd	r21, Z+15	; 0x0f
    d6ba:	84 17       	cp	r24, r20
    d6bc:	95 07       	cpc	r25, r21
    d6be:	09 f0       	breq	.+2      	; 0xd6c2 <_bldr_process_basic_msg+0x132>
    d6c0:	b0 c0       	rjmp	.+352    	; 0xd822 <_bldr_process_basic_msg+0x292>
    d6c2:	c9 01       	movw	r24, r18
    d6c4:	01 97       	sbiw	r24, 0x01	; 1
    d6c6:	8f 3f       	cpi	r24, 0xFF	; 255
    d6c8:	9f 4e       	sbci	r25, 0xEF	; 239
    d6ca:	08 f0       	brcs	.+2      	; 0xd6ce <_bldr_process_basic_msg+0x13e>
    d6cc:	ac c0       	rjmp	.+344    	; 0xd826 <_bldr_process_basic_msg+0x296>
    d6ce:	84 e0       	ldi	r24, 0x04	; 4
    d6d0:	90 e2       	ldi	r25, 0x20	; 32
    d6d2:	80 97       	sbiw	r24, 0x20	; 32
    d6d4:	30 f4       	brcc	.+12     	; 0xd6e2 <_bldr_process_basic_msg+0x152>
    d6d6:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d6da:	84 60       	ori	r24, 0x04	; 4
    d6dc:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d6e0:	08 c0       	rjmp	.+16     	; 0xd6f2 <_bldr_process_basic_msg+0x162>
    d6e2:	9f b7       	in	r25, 0x3f	; 63
    d6e4:	f8 94       	cli
    d6e6:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d6ea:	84 60       	ori	r24, 0x04	; 4
    d6ec:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d6f0:	9f bf       	out	0x3f, r25	; 63
    d6f2:	7f 01       	movw	r14, r30
    d6f4:	ef 01       	movw	r28, r30
    d6f6:	28 96       	adiw	r28, 0x08	; 8
    d6f8:	e6 e1       	ldi	r30, 0x16	; 22
    d6fa:	f0 e2       	ldi	r31, 0x20	; 32
    d6fc:	10 8a       	std	Z+16, r1	; 0x10
    d6fe:	11 8a       	std	Z+17, r1	; 0x11
    d700:	12 8a       	std	Z+18, r1	; 0x12
    d702:	13 8a       	std	Z+19, r1	; 0x13
    d704:	24 8b       	std	Z+20, r18	; 0x14
    d706:	35 8b       	std	Z+21, r19	; 0x15
    d708:	87 01       	movw	r16, r14
    d70a:	08 5d       	subi	r16, 0xD8	; 216
    d70c:	1f 4f       	sbci	r17, 0xFF	; 255
    d70e:	8f ef       	ldi	r24, 0xFF	; 255
    d710:	9f ef       	ldi	r25, 0xFF	; 255
    d712:	69 91       	ld	r22, Y+
    d714:	0e 94 00 68 	call	0xd000	; 0xd000 <crc_ccitt_update>
    d718:	c0 17       	cp	r28, r16
    d71a:	d1 07       	cpc	r29, r17
    d71c:	d1 f7       	brne	.-12     	; 0xd712 <_bldr_process_basic_msg+0x182>
    d71e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <g_v+0x16>
    d722:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <g_v+0x17>
    d726:	f7 01       	movw	r30, r14
    d728:	83 81       	ldd	r24, Z+3	; 0x03
    d72a:	80 7c       	andi	r24, 0xC0	; 192
    d72c:	83 83       	std	Z+3, r24	; 0x03
    d72e:	80 e0       	ldi	r24, 0x00	; 0
    d730:	81 c0       	rjmp	.+258    	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d732:	83 81       	ldd	r24, Z+3	; 0x03
    d734:	8f 73       	andi	r24, 0x3F	; 63
    d736:	90 e0       	ldi	r25, 0x00	; 0
    d738:	02 97       	sbiw	r24, 0x02	; 2
    d73a:	0c f0       	brlt	.+2      	; 0xd73e <_bldr_process_basic_msg+0x1ae>
    d73c:	76 c0       	rjmp	.+236    	; 0xd82a <_bldr_process_basic_msg+0x29a>
    d73e:	83 81       	ldd	r24, Z+3	; 0x03
    d740:	8f 73       	andi	r24, 0x3F	; 63
    d742:	81 30       	cpi	r24, 0x01	; 1
    d744:	29 f4       	brne	.+10     	; 0xd750 <_bldr_process_basic_msg+0x1c0>
    d746:	c5 81       	ldd	r28, Z+5	; 0x05
    d748:	c3 30       	cpi	r28, 0x03	; 3
    d74a:	08 f0       	brcs	.+2      	; 0xd74e <_bldr_process_basic_msg+0x1be>
    d74c:	70 c0       	rjmp	.+224    	; 0xd82e <_bldr_process_basic_msg+0x29e>
    d74e:	01 c0       	rjmp	.+2      	; 0xd752 <_bldr_process_basic_msg+0x1c2>
    d750:	c0 e0       	ldi	r28, 0x00	; 0
    d752:	bf 01       	movw	r22, r30
    d754:	6b 5f       	subi	r22, 0xFB	; 251
    d756:	7f 4f       	sbci	r23, 0xFF	; 255
    d758:	40 e2       	ldi	r20, 0x20	; 32
    d75a:	c4 9f       	mul	r28, r20
    d75c:	e0 01       	movw	r28, r0
    d75e:	11 24       	eor	r1, r1
    d760:	8e 01       	movw	r16, r28
    d762:	00 5c       	subi	r16, 0xC0	; 192
    d764:	1c 4e       	sbci	r17, 0xEC	; 236
    d766:	20 e0       	ldi	r18, 0x00	; 0
    d768:	af ec       	ldi	r26, 0xCF	; 207
    d76a:	b1 e0       	ldi	r27, 0x01	; 1
    d76c:	4c ec       	ldi	r20, 0xCC	; 204
    d76e:	51 e0       	ldi	r21, 0x01	; 1
    d770:	9c 91       	ld	r25, X
    d772:	99 23       	and	r25, r25
    d774:	ec f3       	brlt	.-6      	; 0xd770 <_bldr_process_basic_msg+0x1e0>
    d776:	ea 01       	movw	r28, r20
    d778:	88 81       	ld	r24, Y
    d77a:	88 60       	ori	r24, 0x08	; 8
    d77c:	88 83       	st	Y, r24
    d77e:	e8 01       	movw	r28, r16
    d780:	89 91       	ld	r24, Y+
    d782:	8e 01       	movw	r16, r28
    d784:	9f ef       	ldi	r25, 0xFF	; 255
    d786:	98 0f       	add	r25, r24
    d788:	9e 3f       	cpi	r25, 0xFE	; 254
    d78a:	30 f4       	brcc	.+12     	; 0xd798 <_bldr_process_basic_msg+0x208>
    d78c:	2f 5f       	subi	r18, 0xFF	; 255
    d78e:	eb 01       	movw	r28, r22
    d790:	89 93       	st	Y+, r24
    d792:	be 01       	movw	r22, r28
    d794:	20 32       	cpi	r18, 0x20	; 32
    d796:	61 f7       	brne	.-40     	; 0xd770 <_bldr_process_basic_msg+0x1e0>
    d798:	2f 73       	andi	r18, 0x3F	; 63
    d79a:	83 81       	ldd	r24, Z+3	; 0x03
    d79c:	80 7c       	andi	r24, 0xC0	; 192
    d79e:	28 2b       	or	r18, r24
    d7a0:	23 83       	std	Z+3, r18	; 0x03
    d7a2:	80 e0       	ldi	r24, 0x00	; 0
    d7a4:	47 c0       	rjmp	.+142    	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d7a6:	83 81       	ldd	r24, Z+3	; 0x03
    d7a8:	8f 73       	andi	r24, 0x3F	; 63
    d7aa:	81 30       	cpi	r24, 0x01	; 1
    d7ac:	09 f0       	breq	.+2      	; 0xd7b0 <_bldr_process_basic_msg+0x220>
    d7ae:	41 c0       	rjmp	.+130    	; 0xd832 <_bldr_process_basic_msg+0x2a2>
    d7b0:	85 81       	ldd	r24, Z+5	; 0x05
    d7b2:	80 ff       	sbrs	r24, 0
    d7b4:	13 c0       	rjmp	.+38     	; 0xd7dc <_bldr_process_basic_msg+0x24c>
    d7b6:	84 e0       	ldi	r24, 0x04	; 4
    d7b8:	90 e2       	ldi	r25, 0x20	; 32
    d7ba:	80 97       	sbiw	r24, 0x20	; 32
    d7bc:	30 f4       	brcc	.+12     	; 0xd7ca <_bldr_process_basic_msg+0x23a>
    d7be:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d7c2:	80 61       	ori	r24, 0x10	; 16
    d7c4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d7c8:	1b c0       	rjmp	.+54     	; 0xd800 <_bldr_process_basic_msg+0x270>
    d7ca:	9f b7       	in	r25, 0x3f	; 63
    d7cc:	f8 94       	cli
    d7ce:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d7d2:	80 61       	ori	r24, 0x10	; 16
    d7d4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d7d8:	9f bf       	out	0x3f, r25	; 63
    d7da:	12 c0       	rjmp	.+36     	; 0xd800 <_bldr_process_basic_msg+0x270>
    d7dc:	84 e0       	ldi	r24, 0x04	; 4
    d7de:	90 e2       	ldi	r25, 0x20	; 32
    d7e0:	80 97       	sbiw	r24, 0x20	; 32
    d7e2:	30 f4       	brcc	.+12     	; 0xd7f0 <_bldr_process_basic_msg+0x260>
    d7e4:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d7e8:	8f 7e       	andi	r24, 0xEF	; 239
    d7ea:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d7ee:	08 c0       	rjmp	.+16     	; 0xd800 <_bldr_process_basic_msg+0x270>
    d7f0:	9f b7       	in	r25, 0x3f	; 63
    d7f2:	f8 94       	cli
    d7f4:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d7f8:	8f 7e       	andi	r24, 0xEF	; 239
    d7fa:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    d7fe:	9f bf       	out	0x3f, r25	; 63
    d800:	83 81       	ldd	r24, Z+3	; 0x03
    d802:	80 7c       	andi	r24, 0xC0	; 192
    d804:	83 83       	std	Z+3, r24	; 0x03
    d806:	80 e0       	ldi	r24, 0x00	; 0
    d808:	15 c0       	rjmp	.+42     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d80a:	85 e6       	ldi	r24, 0x65	; 101
    d80c:	13 c0       	rjmp	.+38     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d80e:	83 e0       	ldi	r24, 0x03	; 3
    d810:	11 c0       	rjmp	.+34     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d812:	89 e6       	ldi	r24, 0x69	; 105
    d814:	0f c0       	rjmp	.+30     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d816:	86 e6       	ldi	r24, 0x66	; 102
    d818:	0d c0       	rjmp	.+26     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d81a:	89 e6       	ldi	r24, 0x69	; 105
    d81c:	0b c0       	rjmp	.+22     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d81e:	88 e6       	ldi	r24, 0x68	; 104
    d820:	09 c0       	rjmp	.+18     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d822:	88 e6       	ldi	r24, 0x68	; 104
    d824:	07 c0       	rjmp	.+14     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d826:	86 e6       	ldi	r24, 0x66	; 102
    d828:	05 c0       	rjmp	.+10     	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d82a:	83 e0       	ldi	r24, 0x03	; 3
    d82c:	03 c0       	rjmp	.+6      	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d82e:	83 e0       	ldi	r24, 0x03	; 3
    d830:	01 c0       	rjmp	.+2      	; 0xd834 <_bldr_process_basic_msg+0x2a4>
    d832:	83 e0       	ldi	r24, 0x03	; 3
    d834:	df 91       	pop	r29
    d836:	cf 91       	pop	r28
    d838:	1f 91       	pop	r17
    d83a:	0f 91       	pop	r16
    d83c:	ff 90       	pop	r15
    d83e:	ef 90       	pop	r14
    d840:	08 95       	ret

0000d842 <_bldr_reg_read>:
    d842:	8a 30       	cpi	r24, 0x0A	; 10
    d844:	91 05       	cpc	r25, r1
    d846:	09 f4       	brne	.+2      	; 0xd84a <_bldr_reg_read+0x8>
    d848:	e8 c0       	rjmp	.+464    	; 0xda1a <_bldr_reg_read+0x1d8>
    d84a:	58 f5       	brcc	.+86     	; 0xd8a2 <_bldr_reg_read+0x60>
    d84c:	84 30       	cpi	r24, 0x04	; 4
    d84e:	91 05       	cpc	r25, r1
    d850:	09 f4       	brne	.+2      	; 0xd854 <_bldr_reg_read+0x12>
    d852:	a8 c0       	rjmp	.+336    	; 0xd9a4 <_bldr_reg_read+0x162>
    d854:	78 f4       	brcc	.+30     	; 0xd874 <_bldr_reg_read+0x32>
    d856:	81 30       	cpi	r24, 0x01	; 1
    d858:	91 05       	cpc	r25, r1
    d85a:	09 f4       	brne	.+2      	; 0xd85e <_bldr_reg_read+0x1c>
    d85c:	70 c0       	rjmp	.+224    	; 0xd93e <_bldr_reg_read+0xfc>
    d85e:	08 f4       	brcc	.+2      	; 0xd862 <_bldr_reg_read+0x20>
    d860:	65 c0       	rjmp	.+202    	; 0xd92c <_bldr_reg_read+0xea>
    d862:	82 30       	cpi	r24, 0x02	; 2
    d864:	91 05       	cpc	r25, r1
    d866:	09 f4       	brne	.+2      	; 0xd86a <_bldr_reg_read+0x28>
    d868:	77 c0       	rjmp	.+238    	; 0xd958 <_bldr_reg_read+0x116>
    d86a:	83 30       	cpi	r24, 0x03	; 3
    d86c:	91 05       	cpc	r25, r1
    d86e:	09 f4       	brne	.+2      	; 0xd872 <_bldr_reg_read+0x30>
    d870:	86 c0       	rjmp	.+268    	; 0xd97e <_bldr_reg_read+0x13c>
    d872:	31 c1       	rjmp	.+610    	; 0xdad6 <_bldr_reg_read+0x294>
    d874:	87 30       	cpi	r24, 0x07	; 7
    d876:	91 05       	cpc	r25, r1
    d878:	09 f4       	brne	.+2      	; 0xd87c <_bldr_reg_read+0x3a>
    d87a:	aa c0       	rjmp	.+340    	; 0xd9d0 <_bldr_reg_read+0x18e>
    d87c:	48 f4       	brcc	.+18     	; 0xd890 <_bldr_reg_read+0x4e>
    d87e:	85 30       	cpi	r24, 0x05	; 5
    d880:	91 05       	cpc	r25, r1
    d882:	09 f4       	brne	.+2      	; 0xd886 <_bldr_reg_read+0x44>
    d884:	96 c0       	rjmp	.+300    	; 0xd9b2 <_bldr_reg_read+0x170>
    d886:	86 30       	cpi	r24, 0x06	; 6
    d888:	91 05       	cpc	r25, r1
    d88a:	09 f4       	brne	.+2      	; 0xd88e <_bldr_reg_read+0x4c>
    d88c:	99 c0       	rjmp	.+306    	; 0xd9c0 <_bldr_reg_read+0x17e>
    d88e:	23 c1       	rjmp	.+582    	; 0xdad6 <_bldr_reg_read+0x294>
    d890:	88 30       	cpi	r24, 0x08	; 8
    d892:	91 05       	cpc	r25, r1
    d894:	09 f4       	brne	.+2      	; 0xd898 <_bldr_reg_read+0x56>
    d896:	a4 c0       	rjmp	.+328    	; 0xd9e0 <_bldr_reg_read+0x19e>
    d898:	89 30       	cpi	r24, 0x09	; 9
    d89a:	91 05       	cpc	r25, r1
    d89c:	09 f4       	brne	.+2      	; 0xd8a0 <_bldr_reg_read+0x5e>
    d89e:	ab c0       	rjmp	.+342    	; 0xd9f6 <_bldr_reg_read+0x1b4>
    d8a0:	1a c1       	rjmp	.+564    	; 0xdad6 <_bldr_reg_read+0x294>
    d8a2:	84 3d       	cpi	r24, 0xD4	; 212
    d8a4:	27 e0       	ldi	r18, 0x07	; 7
    d8a6:	92 07       	cpc	r25, r18
    d8a8:	09 f4       	brne	.+2      	; 0xd8ac <_bldr_reg_read+0x6a>
    d8aa:	d8 c0       	rjmp	.+432    	; 0xda5c <_bldr_reg_read+0x21a>
    d8ac:	b8 f4       	brcc	.+46     	; 0xd8dc <_bldr_reg_read+0x9a>
    d8ae:	81 3d       	cpi	r24, 0xD1	; 209
    d8b0:	a7 e0       	ldi	r26, 0x07	; 7
    d8b2:	9a 07       	cpc	r25, r26
    d8b4:	09 f4       	brne	.+2      	; 0xd8b8 <_bldr_reg_read+0x76>
    d8b6:	bf c0       	rjmp	.+382    	; 0xda36 <_bldr_reg_read+0x1f4>
    d8b8:	30 f4       	brcc	.+12     	; 0xd8c6 <_bldr_reg_read+0x84>
    d8ba:	80 3d       	cpi	r24, 0xD0	; 208
    d8bc:	e7 e0       	ldi	r30, 0x07	; 7
    d8be:	9e 07       	cpc	r25, r30
    d8c0:	09 f4       	brne	.+2      	; 0xd8c4 <_bldr_reg_read+0x82>
    d8c2:	b2 c0       	rjmp	.+356    	; 0xda28 <_bldr_reg_read+0x1e6>
    d8c4:	08 c1       	rjmp	.+528    	; 0xdad6 <_bldr_reg_read+0x294>
    d8c6:	82 3d       	cpi	r24, 0xD2	; 210
    d8c8:	f7 e0       	ldi	r31, 0x07	; 7
    d8ca:	9f 07       	cpc	r25, r31
    d8cc:	09 f4       	brne	.+2      	; 0xd8d0 <_bldr_reg_read+0x8e>
    d8ce:	b8 c0       	rjmp	.+368    	; 0xda40 <_bldr_reg_read+0x1fe>
    d8d0:	83 3d       	cpi	r24, 0xD3	; 211
    d8d2:	27 e0       	ldi	r18, 0x07	; 7
    d8d4:	92 07       	cpc	r25, r18
    d8d6:	09 f4       	brne	.+2      	; 0xd8da <_bldr_reg_read+0x98>
    d8d8:	ba c0       	rjmp	.+372    	; 0xda4e <_bldr_reg_read+0x20c>
    d8da:	fd c0       	rjmp	.+506    	; 0xdad6 <_bldr_reg_read+0x294>
    d8dc:	87 3d       	cpi	r24, 0xD7	; 215
    d8de:	47 e0       	ldi	r20, 0x07	; 7
    d8e0:	94 07       	cpc	r25, r20
    d8e2:	b9 f0       	breq	.+46     	; 0xd912 <_bldr_reg_read+0xd0>
    d8e4:	58 f4       	brcc	.+22     	; 0xd8fc <_bldr_reg_read+0xba>
    d8e6:	85 3d       	cpi	r24, 0xD5	; 213
    d8e8:	b7 e0       	ldi	r27, 0x07	; 7
    d8ea:	9b 07       	cpc	r25, r27
    d8ec:	09 f4       	brne	.+2      	; 0xd8f0 <_bldr_reg_read+0xae>
    d8ee:	bd c0       	rjmp	.+378    	; 0xda6a <_bldr_reg_read+0x228>
    d8f0:	86 3d       	cpi	r24, 0xD6	; 214
    d8f2:	e7 e0       	ldi	r30, 0x07	; 7
    d8f4:	9e 07       	cpc	r25, r30
    d8f6:	09 f4       	brne	.+2      	; 0xd8fa <_bldr_reg_read+0xb8>
    d8f8:	bf c0       	rjmp	.+382    	; 0xda78 <_bldr_reg_read+0x236>
    d8fa:	ed c0       	rjmp	.+474    	; 0xdad6 <_bldr_reg_read+0x294>
    d8fc:	8a 3f       	cpi	r24, 0xFA	; 250
    d8fe:	f7 e0       	ldi	r31, 0x07	; 7
    d900:	9f 07       	cpc	r25, r31
    d902:	09 f4       	brne	.+2      	; 0xd906 <_bldr_reg_read+0xc4>
    d904:	d8 c0       	rjmp	.+432    	; 0xdab6 <_bldr_reg_read+0x274>
    d906:	8b 3f       	cpi	r24, 0xFB	; 251
    d908:	27 e0       	ldi	r18, 0x07	; 7
    d90a:	92 07       	cpc	r25, r18
    d90c:	09 f4       	brne	.+2      	; 0xd910 <_bldr_reg_read+0xce>
    d90e:	db c0       	rjmp	.+438    	; 0xdac6 <_bldr_reg_read+0x284>
    d910:	e2 c0       	rjmp	.+452    	; 0xdad6 <_bldr_reg_read+0x294>
    d912:	89 e8       	ldi	r24, 0x89	; 137
    d914:	91 e2       	ldi	r25, 0x21	; 33
    d916:	8e 3f       	cpi	r24, 0xFE	; 254
    d918:	9f 42       	sbci	r25, 0x2F	; 47
    d91a:	08 f0       	brcs	.+2      	; 0xd91e <_bldr_reg_read+0xdc>
    d91c:	c0 c0       	rjmp	.+384    	; 0xda9e <_bldr_reg_read+0x25c>
    d91e:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <__bss_end>
    d922:	81 11       	cpse	r24, r1
    d924:	bf c0       	rjmp	.+382    	; 0xdaa4 <_bldr_reg_read+0x262>
    d926:	8a e8       	ldi	r24, 0x8A	; 138
    d928:	91 e2       	ldi	r25, 0x21	; 33
    d92a:	b3 c0       	rjmp	.+358    	; 0xda92 <_bldr_reg_read+0x250>
    d92c:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <g_v+0x1>
    d930:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <g_v+0x2>
    d934:	db 01       	movw	r26, r22
    d936:	8d 93       	st	X+, r24
    d938:	9c 93       	st	X, r25
    d93a:	80 e0       	ldi	r24, 0x00	; 0
    d93c:	08 95       	ret
    d93e:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <g_v+0x1>
    d942:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <g_v+0x2>
    d946:	a0 91 19 20 	lds	r26, 0x2019	; 0x802019 <g_v+0x3>
    d94a:	b0 91 1a 20 	lds	r27, 0x201A	; 0x80201a <g_v+0x4>
    d94e:	fb 01       	movw	r30, r22
    d950:	a0 83       	st	Z, r26
    d952:	b1 83       	std	Z+1, r27	; 0x01
    d954:	80 e0       	ldi	r24, 0x00	; 0
    d956:	08 95       	ret
    d958:	ef ec       	ldi	r30, 0xCF	; 207
    d95a:	f1 e0       	ldi	r31, 0x01	; 1
    d95c:	80 81       	ld	r24, Z
    d95e:	88 23       	and	r24, r24
    d960:	ec f3       	brlt	.-6      	; 0xd95c <_bldr_reg_read+0x11a>
    d962:	ec ec       	ldi	r30, 0xCC	; 204
    d964:	f1 e0       	ldi	r31, 0x01	; 1
    d966:	80 81       	ld	r24, Z
    d968:	88 60       	ori	r24, 0x08	; 8
    d96a:	80 83       	st	Z, r24
    d96c:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <__TEXT_REGION_LENGTH__+0x7f0305>
    d970:	90 91 06 13 	lds	r25, 0x1306	; 0x801306 <__TEXT_REGION_LENGTH__+0x7f0306>
    d974:	db 01       	movw	r26, r22
    d976:	8d 93       	st	X+, r24
    d978:	9c 93       	st	X, r25
    d97a:	80 e0       	ldi	r24, 0x00	; 0
    d97c:	08 95       	ret
    d97e:	ef ec       	ldi	r30, 0xCF	; 207
    d980:	f1 e0       	ldi	r31, 0x01	; 1
    d982:	80 81       	ld	r24, Z
    d984:	88 23       	and	r24, r24
    d986:	ec f3       	brlt	.-6      	; 0xd982 <_bldr_reg_read+0x140>
    d988:	ec ec       	ldi	r30, 0xCC	; 204
    d98a:	f1 e0       	ldi	r31, 0x01	; 1
    d98c:	80 81       	ld	r24, Z
    d98e:	88 60       	ori	r24, 0x08	; 8
    d990:	80 83       	st	Z, r24
    d992:	80 91 07 13 	lds	r24, 0x1307	; 0x801307 <__TEXT_REGION_LENGTH__+0x7f0307>
    d996:	90 91 08 13 	lds	r25, 0x1308	; 0x801308 <__TEXT_REGION_LENGTH__+0x7f0308>
    d99a:	fb 01       	movw	r30, r22
    d99c:	80 83       	st	Z, r24
    d99e:	91 83       	std	Z+1, r25	; 0x01
    d9a0:	80 e0       	ldi	r24, 0x00	; 0
    d9a2:	08 95       	ret
    d9a4:	84 e0       	ldi	r24, 0x04	; 4
    d9a6:	90 e0       	ldi	r25, 0x00	; 0
    d9a8:	db 01       	movw	r26, r22
    d9aa:	8d 93       	st	X+, r24
    d9ac:	9c 93       	st	X, r25
    d9ae:	80 e0       	ldi	r24, 0x00	; 0
    d9b0:	08 95       	ret
    d9b2:	81 e0       	ldi	r24, 0x01	; 1
    d9b4:	91 e0       	ldi	r25, 0x01	; 1
    d9b6:	fb 01       	movw	r30, r22
    d9b8:	80 83       	st	Z, r24
    d9ba:	91 83       	std	Z+1, r25	; 0x01
    d9bc:	80 e0       	ldi	r24, 0x00	; 0
    d9be:	08 95       	ret
    d9c0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <g_v>
    d9c4:	90 e0       	ldi	r25, 0x00	; 0
    d9c6:	db 01       	movw	r26, r22
    d9c8:	8d 93       	st	X+, r24
    d9ca:	9c 93       	st	X, r25
    d9cc:	80 e0       	ldi	r24, 0x00	; 0
    d9ce:	08 95       	ret
    d9d0:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    d9d4:	90 e0       	ldi	r25, 0x00	; 0
    d9d6:	fb 01       	movw	r30, r22
    d9d8:	80 83       	st	Z, r24
    d9da:	91 83       	std	Z+1, r25	; 0x01
    d9dc:	80 e0       	ldi	r24, 0x00	; 0
    d9de:	08 95       	ret
    d9e0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <g_dev_errflags>
    d9e4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_end>
    d9e8:	89 2b       	or	r24, r25
    d9ea:	90 e0       	ldi	r25, 0x00	; 0
    d9ec:	db 01       	movw	r26, r22
    d9ee:	8d 93       	st	X+, r24
    d9f0:	9c 93       	st	X, r25
    d9f2:	80 e0       	ldi	r24, 0x00	; 0
    d9f4:	08 95       	ret
    d9f6:	ef ec       	ldi	r30, 0xCF	; 207
    d9f8:	f1 e0       	ldi	r31, 0x01	; 1
    d9fa:	80 81       	ld	r24, Z
    d9fc:	88 23       	and	r24, r24
    d9fe:	ec f3       	brlt	.-6      	; 0xd9fa <_bldr_reg_read+0x1b8>
    da00:	ec ec       	ldi	r30, 0xCC	; 204
    da02:	f1 e0       	ldi	r31, 0x01	; 1
    da04:	80 81       	ld	r24, Z
    da06:	88 60       	ori	r24, 0x08	; 8
    da08:	80 83       	st	Z, r24
    da0a:	80 91 00 13 	lds	r24, 0x1300	; 0x801300 <__TEXT_REGION_LENGTH__+0x7f0300>
    da0e:	90 e0       	ldi	r25, 0x00	; 0
    da10:	fb 01       	movw	r30, r22
    da12:	80 83       	st	Z, r24
    da14:	91 83       	std	Z+1, r25	; 0x01
    da16:	80 e0       	ldi	r24, 0x00	; 0
    da18:	08 95       	ret
    da1a:	83 e0       	ldi	r24, 0x03	; 3
    da1c:	90 e0       	ldi	r25, 0x00	; 0
    da1e:	db 01       	movw	r26, r22
    da20:	8d 93       	st	X+, r24
    da22:	9c 93       	st	X, r25
    da24:	80 e0       	ldi	r24, 0x00	; 0
    da26:	08 95       	ret
    da28:	86 e1       	ldi	r24, 0x16	; 22
    da2a:	90 e0       	ldi	r25, 0x00	; 0
    da2c:	fb 01       	movw	r30, r22
    da2e:	80 83       	st	Z, r24
    da30:	91 83       	std	Z+1, r25	; 0x01
    da32:	80 e0       	ldi	r24, 0x00	; 0
    da34:	08 95       	ret
    da36:	db 01       	movw	r26, r22
    da38:	1d 92       	st	X+, r1
    da3a:	1c 92       	st	X, r1
    da3c:	80 e0       	ldi	r24, 0x00	; 0
    da3e:	08 95       	ret
    da40:	82 e3       	ldi	r24, 0x32	; 50
    da42:	90 e0       	ldi	r25, 0x00	; 0
    da44:	fb 01       	movw	r30, r22
    da46:	80 83       	st	Z, r24
    da48:	91 83       	std	Z+1, r25	; 0x01
    da4a:	80 e0       	ldi	r24, 0x00	; 0
    da4c:	08 95       	ret
    da4e:	80 e0       	ldi	r24, 0x00	; 0
    da50:	93 e0       	ldi	r25, 0x03	; 3
    da52:	db 01       	movw	r26, r22
    da54:	8d 93       	st	X+, r24
    da56:	9c 93       	st	X, r25
    da58:	80 e0       	ldi	r24, 0x00	; 0
    da5a:	08 95       	ret
    da5c:	80 e0       	ldi	r24, 0x00	; 0
    da5e:	90 e1       	ldi	r25, 0x10	; 16
    da60:	fb 01       	movw	r30, r22
    da62:	80 83       	st	Z, r24
    da64:	91 83       	std	Z+1, r25	; 0x01
    da66:	80 e0       	ldi	r24, 0x00	; 0
    da68:	08 95       	ret
    da6a:	80 e0       	ldi	r24, 0x00	; 0
    da6c:	98 e0       	ldi	r25, 0x08	; 8
    da6e:	db 01       	movw	r26, r22
    da70:	8d 93       	st	X+, r24
    da72:	9c 93       	st	X, r25
    da74:	80 e0       	ldi	r24, 0x00	; 0
    da76:	08 95       	ret
    da78:	8e ef       	ldi	r24, 0xFE	; 254
    da7a:	9f e2       	ldi	r25, 0x2F	; 47
    da7c:	89 58       	subi	r24, 0x89	; 137
    da7e:	91 42       	sbci	r25, 0x21	; 33
    da80:	fb 01       	movw	r30, r22
    da82:	80 83       	st	Z, r24
    da84:	91 83       	std	Z+1, r25	; 0x01
    da86:	80 e0       	ldi	r24, 0x00	; 0
    da88:	08 95       	ret
    da8a:	01 96       	adiw	r24, 0x01	; 1
    da8c:	20 81       	ld	r18, Z
    da8e:	21 11       	cpse	r18, r1
    da90:	0b c0       	rjmp	.+22     	; 0xdaa8 <_bldr_reg_read+0x266>
    da92:	fc 01       	movw	r30, r24
    da94:	8e 3f       	cpi	r24, 0xFE	; 254
    da96:	2f e2       	ldi	r18, 0x2F	; 47
    da98:	92 07       	cpc	r25, r18
    da9a:	b9 f7       	brne	.-18     	; 0xda8a <_bldr_reg_read+0x248>
    da9c:	05 c0       	rjmp	.+10     	; 0xdaa8 <_bldr_reg_read+0x266>
    da9e:	e9 e8       	ldi	r30, 0x89	; 137
    daa0:	f1 e2       	ldi	r31, 0x21	; 33
    daa2:	02 c0       	rjmp	.+4      	; 0xdaa8 <_bldr_reg_read+0x266>
    daa4:	e9 e8       	ldi	r30, 0x89	; 137
    daa6:	f1 e2       	ldi	r31, 0x21	; 33
    daa8:	e9 58       	subi	r30, 0x89	; 137
    daaa:	f1 42       	sbci	r31, 0x21	; 33
    daac:	db 01       	movw	r26, r22
    daae:	ed 93       	st	X+, r30
    dab0:	fc 93       	st	X, r31
    dab2:	80 e0       	ldi	r24, 0x00	; 0
    dab4:	08 95       	ret
    dab6:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <g_v+0x1c>
    daba:	90 e0       	ldi	r25, 0x00	; 0
    dabc:	fb 01       	movw	r30, r22
    dabe:	80 83       	st	Z, r24
    dac0:	91 83       	std	Z+1, r25	; 0x01
    dac2:	80 e0       	ldi	r24, 0x00	; 0
    dac4:	08 95       	ret
    dac6:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <g_v+0x1d>
    daca:	90 e0       	ldi	r25, 0x00	; 0
    dacc:	db 01       	movw	r26, r22
    dace:	8d 93       	st	X+, r24
    dad0:	9c 93       	st	X, r25
    dad2:	80 e0       	ldi	r24, 0x00	; 0
    dad4:	08 95       	ret
    dad6:	9c 01       	movw	r18, r24
    dad8:	2a 5d       	subi	r18, 0xDA	; 218
    dada:	37 40       	sbci	r19, 0x07	; 7
    dadc:	20 32       	cpi	r18, 0x20	; 32
    dade:	31 05       	cpc	r19, r1
    dae0:	a0 f4       	brcc	.+40     	; 0xdb0a <_bldr_reg_read+0x2c8>
    dae2:	23 31       	cpi	r18, 0x13	; 19
    dae4:	31 05       	cpc	r19, r1
    dae6:	60 f4       	brcc	.+24     	; 0xdb00 <_bldr_reg_read+0x2be>
    dae8:	88 0f       	add	r24, r24
    daea:	99 1f       	adc	r25, r25
    daec:	fc 01       	movw	r30, r24
    daee:	e1 55       	subi	r30, 0x51	; 81
    daf0:	fe 4e       	sbci	r31, 0xEE	; 238
    daf2:	80 81       	ld	r24, Z
    daf4:	91 81       	ldd	r25, Z+1	; 0x01
    daf6:	fb 01       	movw	r30, r22
    daf8:	80 83       	st	Z, r24
    dafa:	91 83       	std	Z+1, r25	; 0x01
    dafc:	80 e0       	ldi	r24, 0x00	; 0
    dafe:	08 95       	ret
    db00:	db 01       	movw	r26, r22
    db02:	1d 92       	st	X+, r1
    db04:	1c 92       	st	X, r1
    db06:	80 e0       	ldi	r24, 0x00	; 0
    db08:	08 95       	ret
    db0a:	9c 01       	movw	r18, r24
    db0c:	38 50       	subi	r19, 0x08	; 8
    db0e:	21 15       	cp	r18, r1
    db10:	38 40       	sbci	r19, 0x08	; 8
    db12:	d0 f4       	brcc	.+52     	; 0xdb48 <_bldr_reg_read+0x306>
    db14:	98 58       	subi	r25, 0x88	; 136
    db16:	88 0f       	add	r24, r24
    db18:	99 1f       	adc	r25, r25
    db1a:	81 15       	cp	r24, r1
    db1c:	e8 e0       	ldi	r30, 0x08	; 8
    db1e:	9e 07       	cpc	r25, r30
    db20:	40 f5       	brcc	.+80     	; 0xdb72 <_bldr_reg_read+0x330>
    db22:	ef ec       	ldi	r30, 0xCF	; 207
    db24:	f1 e0       	ldi	r31, 0x01	; 1
    db26:	20 81       	ld	r18, Z
    db28:	22 23       	and	r18, r18
    db2a:	ec f3       	brlt	.-6      	; 0xdb26 <_bldr_reg_read+0x2e4>
    db2c:	ec ec       	ldi	r30, 0xCC	; 204
    db2e:	f1 e0       	ldi	r31, 0x01	; 1
    db30:	20 81       	ld	r18, Z
    db32:	28 60       	ori	r18, 0x08	; 8
    db34:	20 83       	st	Z, r18
    db36:	fc 01       	movw	r30, r24
    db38:	f0 5f       	subi	r31, 0xF0	; 240
    db3a:	80 81       	ld	r24, Z
    db3c:	91 81       	ldd	r25, Z+1	; 0x01
    db3e:	db 01       	movw	r26, r22
    db40:	8d 93       	st	X+, r24
    db42:	9c 93       	st	X, r25
    db44:	80 e0       	ldi	r24, 0x00	; 0
    db46:	08 95       	ret
    db48:	9c 01       	movw	r18, r24
    db4a:	30 51       	subi	r19, 0x10	; 16
    db4c:	21 15       	cp	r18, r1
    db4e:	30 41       	sbci	r19, 0x10	; 16
    db50:	90 f4       	brcc	.+36     	; 0xdb76 <_bldr_reg_read+0x334>
    db52:	90 59       	subi	r25, 0x90	; 144
    db54:	88 0f       	add	r24, r24
    db56:	99 1f       	adc	r25, r25
    db58:	81 15       	cp	r24, r1
    db5a:	e0 e1       	ldi	r30, 0x10	; 16
    db5c:	9e 07       	cpc	r25, r30
    db5e:	68 f4       	brcc	.+26     	; 0xdb7a <_bldr_reg_read+0x338>
    db60:	fc 01       	movw	r30, r24
    db62:	f0 5e       	subi	r31, 0xE0	; 224
    db64:	80 81       	ld	r24, Z
    db66:	91 81       	ldd	r25, Z+1	; 0x01
    db68:	db 01       	movw	r26, r22
    db6a:	8d 93       	st	X+, r24
    db6c:	9c 93       	st	X, r25
    db6e:	80 e0       	ldi	r24, 0x00	; 0
    db70:	08 95       	ret
    db72:	84 e0       	ldi	r24, 0x04	; 4
    db74:	08 95       	ret
    db76:	84 e0       	ldi	r24, 0x04	; 4
    db78:	08 95       	ret
    db7a:	84 e0       	ldi	r24, 0x04	; 4
    db7c:	08 95       	ret

0000db7e <_bldr_task>:
    db7e:	0f 93       	push	r16
    db80:	1f 93       	push	r17
    db82:	cf 93       	push	r28
    db84:	df 93       	push	r29
    db86:	cd b7       	in	r28, 0x3d	; 61
    db88:	de b7       	in	r29, 0x3e	; 62
    db8a:	29 97       	sbiw	r28, 0x09	; 9
    db8c:	cd bf       	out	0x3d, r28	; 61
    db8e:	de bf       	out	0x3e, r29	; 62
    db90:	8c 01       	movw	r16, r24
    db92:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <g_v+0x9>
    db96:	81 11       	cpse	r24, r1
    db98:	21 c0       	rjmp	.+66     	; 0xdbdc <_bldr_task+0x5e>
    db9a:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <__TEXT_REGION_LENGTH__+0x7ef680>
    db9e:	81 fd       	sbrc	r24, 1
    dba0:	17 c0       	rjmp	.+46     	; 0xdbd0 <_bldr_task+0x52>
    dba2:	e6 e1       	ldi	r30, 0x16	; 22
    dba4:	f0 e2       	ldi	r31, 0x20	; 32
    dba6:	8a e0       	ldi	r24, 0x0A	; 10
    dba8:	81 87       	std	Z+9, r24	; 0x09
    dbaa:	90 91 88 06 	lds	r25, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7ef688>
    dbae:	96 95       	lsr	r25
    dbb0:	91 70       	andi	r25, 0x01	; 1
    dbb2:	81 e0       	ldi	r24, 0x01	; 1
    dbb4:	98 27       	eor	r25, r24
    dbb6:	82 e0       	ldi	r24, 0x02	; 2
    dbb8:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7ef681>
    dbbc:	86 85       	ldd	r24, Z+14	; 0x0e
    dbbe:	89 27       	eor	r24, r25
    dbc0:	25 85       	ldd	r18, Z+13	; 0x0d
    dbc2:	28 23       	and	r18, r24
    dbc4:	80 95       	com	r24
    dbc6:	89 23       	and	r24, r25
    dbc8:	82 2b       	or	r24, r18
    dbca:	85 87       	std	Z+13, r24	; 0x0d
    dbcc:	96 87       	std	Z+14, r25	; 0x0e
    dbce:	06 c0       	rjmp	.+12     	; 0xdbdc <_bldr_task+0x5e>
    dbd0:	81 e0       	ldi	r24, 0x01	; 1
    dbd2:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <g_v+0x9>
    dbd6:	82 e0       	ldi	r24, 0x02	; 2
    dbd8:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7ef682>
    dbdc:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <g_v+0x8>
    dbe0:	81 11       	cpse	r24, r1
    dbe2:	74 c0       	rjmp	.+232    	; 0xdccc <_bldr_task+0x14e>
    dbe4:	e6 e1       	ldi	r30, 0x16	; 22
    dbe6:	f0 e2       	ldi	r31, 0x20	; 32
    dbe8:	80 e2       	ldi	r24, 0x20	; 32
    dbea:	80 87       	std	Z+8, r24	; 0x08
    dbec:	85 85       	ldd	r24, Z+13	; 0x0d
    dbee:	80 ff       	sbrs	r24, 0
    dbf0:	11 c0       	rjmp	.+34     	; 0xdc14 <_bldr_task+0x96>
    dbf2:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <g_v+0xf>
    dbf6:	80 fd       	sbrc	r24, 0
    dbf8:	12 c0       	rjmp	.+36     	; 0xdc1e <_bldr_task+0xa0>
    dbfa:	87 85       	ldd	r24, Z+15	; 0x0f
    dbfc:	81 60       	ori	r24, 0x01	; 1
    dbfe:	87 87       	std	Z+15, r24	; 0x0f
    dc00:	9f b7       	in	r25, 0x3f	; 63
    dc02:	f8 94       	cli
    dc04:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <g_dev_state>
    dc08:	80 e1       	ldi	r24, 0x10	; 16
    dc0a:	82 27       	eor	r24, r18
    dc0c:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    dc10:	9f bf       	out	0x3f, r25	; 63
    dc12:	05 c0       	rjmp	.+10     	; 0xdc1e <_bldr_task+0xa0>
    dc14:	e6 e1       	ldi	r30, 0x16	; 22
    dc16:	f0 e2       	ldi	r31, 0x20	; 32
    dc18:	87 85       	ldd	r24, Z+15	; 0x0f
    dc1a:	8e 7f       	andi	r24, 0xFE	; 254
    dc1c:	87 87       	std	Z+15, r24	; 0x0f
    dc1e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    dc22:	89 87       	std	Y+9, r24	; 0x09
    dc24:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <g_v+0xc>
    dc28:	88 87       	std	Y+8, r24	; 0x08
    dc2a:	99 85       	ldd	r25, Y+9	; 0x09
    dc2c:	88 85       	ldd	r24, Y+8	; 0x08
    dc2e:	98 17       	cp	r25, r24
    dc30:	21 f1       	breq	.+72     	; 0xdc7a <_bldr_task+0xfc>
    dc32:	89 85       	ldd	r24, Y+9	; 0x09
    dc34:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <g_v+0xc>
    dc38:	89 85       	ldd	r24, Y+9	; 0x09
    dc3a:	84 ff       	sbrs	r24, 4
    dc3c:	07 c0       	rjmp	.+14     	; 0xdc4c <_bldr_task+0xce>
    dc3e:	e6 e1       	ldi	r30, 0x16	; 22
    dc40:	f0 e2       	ldi	r31, 0x20	; 32
    dc42:	8a ea       	ldi	r24, 0xAA	; 170
    dc44:	82 87       	std	Z+10, r24	; 0x0a
    dc46:	85 e5       	ldi	r24, 0x55	; 85
    dc48:	83 87       	std	Z+11, r24	; 0x0b
    dc4a:	17 c0       	rjmp	.+46     	; 0xdc7a <_bldr_task+0xfc>
    dc4c:	89 85       	ldd	r24, Y+9	; 0x09
    dc4e:	83 ff       	sbrs	r24, 3
    dc50:	06 c0       	rjmp	.+12     	; 0xdc5e <_bldr_task+0xe0>
    dc52:	e6 e1       	ldi	r30, 0x16	; 22
    dc54:	f0 e2       	ldi	r31, 0x20	; 32
    dc56:	12 86       	std	Z+10, r1	; 0x0a
    dc58:	85 e5       	ldi	r24, 0x55	; 85
    dc5a:	83 87       	std	Z+11, r24	; 0x0b
    dc5c:	0e c0       	rjmp	.+28     	; 0xdc7a <_bldr_task+0xfc>
    dc5e:	89 85       	ldd	r24, Y+9	; 0x09
    dc60:	80 ff       	sbrs	r24, 0
    dc62:	06 c0       	rjmp	.+12     	; 0xdc70 <_bldr_task+0xf2>
    dc64:	e6 e1       	ldi	r30, 0x16	; 22
    dc66:	f0 e2       	ldi	r31, 0x20	; 32
    dc68:	8e e3       	ldi	r24, 0x3E	; 62
    dc6a:	82 87       	std	Z+10, r24	; 0x0a
    dc6c:	13 86       	std	Z+11, r1	; 0x0b
    dc6e:	05 c0       	rjmp	.+10     	; 0xdc7a <_bldr_task+0xfc>
    dc70:	e6 e1       	ldi	r30, 0x16	; 22
    dc72:	f0 e2       	ldi	r31, 0x20	; 32
    dc74:	88 e1       	ldi	r24, 0x18	; 24
    dc76:	82 87       	std	Z+10, r24	; 0x0a
    dc78:	13 86       	std	Z+11, r1	; 0x0b
    dc7a:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <g_dev_errflags>
    dc7e:	81 11       	cpse	r24, r1
    dc80:	04 c0       	rjmp	.+8      	; 0xdc8a <_bldr_task+0x10c>
    dc82:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_end>
    dc86:	88 23       	and	r24, r24
    dc88:	19 f0       	breq	.+6      	; 0xdc90 <_bldr_task+0x112>
    dc8a:	8f ef       	ldi	r24, 0xFF	; 255
    dc8c:	80 93 21 20 	sts	0x2021, r24	; 0x802021 <g_v+0xb>
    dc90:	e6 e1       	ldi	r30, 0x16	; 22
    dc92:	f0 e2       	ldi	r31, 0x20	; 32
    dc94:	82 85       	ldd	r24, Z+10	; 0x0a
    dc96:	88 0f       	add	r24, r24
    dc98:	81 1d       	adc	r24, r1
    dc9a:	82 87       	std	Z+10, r24	; 0x0a
    dc9c:	88 23       	and	r24, r24
    dc9e:	24 f4       	brge	.+8      	; 0xdca8 <_bldr_task+0x12a>
    dca0:	81 e0       	ldi	r24, 0x01	; 1
    dca2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x7ef686>
    dca6:	03 c0       	rjmp	.+6      	; 0xdcae <_bldr_task+0x130>
    dca8:	81 e0       	ldi	r24, 0x01	; 1
    dcaa:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7ef685>
    dcae:	e6 e1       	ldi	r30, 0x16	; 22
    dcb0:	f0 e2       	ldi	r31, 0x20	; 32
    dcb2:	83 85       	ldd	r24, Z+11	; 0x0b
    dcb4:	88 0f       	add	r24, r24
    dcb6:	81 1d       	adc	r24, r1
    dcb8:	83 87       	std	Z+11, r24	; 0x0b
    dcba:	88 23       	and	r24, r24
    dcbc:	24 f4       	brge	.+8      	; 0xdcc6 <_bldr_task+0x148>
    dcbe:	82 e0       	ldi	r24, 0x02	; 2
    dcc0:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x7ef686>
    dcc4:	03 c0       	rjmp	.+6      	; 0xdccc <_bldr_task+0x14e>
    dcc6:	82 e0       	ldi	r24, 0x02	; 2
    dcc8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7ef685>
    dccc:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    dcd0:	89 2f       	mov	r24, r25
    dcd2:	80 74       	andi	r24, 0x40	; 64
    dcd4:	96 ff       	sbrs	r25, 6
    dcd6:	0a c0       	rjmp	.+20     	; 0xdcec <_bldr_task+0x16e>
    dcd8:	0e 94 9f 01 	call	0x33e	; 0x33e <sboxnet_all_sent>
    dcdc:	88 23       	and	r24, r24
    dcde:	f1 f3       	breq	.-4      	; 0xdcdc <_bldr_task+0x15e>
    dce0:	88 ed       	ldi	r24, 0xD8	; 216
    dce2:	84 bf       	out	0x34, r24	; 52
    dce4:	81 e0       	ldi	r24, 0x01	; 1
    dce6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7ef079>
    dcea:	ff cf       	rjmp	.-2      	; 0xdcea <_bldr_task+0x16c>
    dcec:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <g_dev_state>
    dcf0:	99 83       	std	Y+1, r25	; 0x01
    dcf2:	99 81       	ldd	r25, Y+1	; 0x01
    dcf4:	93 ff       	sbrs	r25, 3
    dcf6:	c7 c0       	rjmp	.+398    	; 0xde86 <_bldr_task+0x308>
    dcf8:	ef ec       	ldi	r30, 0xCF	; 207
    dcfa:	f1 e0       	ldi	r31, 0x01	; 1
    dcfc:	80 81       	ld	r24, Z
    dcfe:	88 23       	and	r24, r24
    dd00:	ec f3       	brlt	.-6      	; 0xdcfc <_bldr_task+0x17e>
    dd02:	ec ec       	ldi	r30, 0xCC	; 204
    dd04:	f1 e0       	ldi	r31, 0x01	; 1
    dd06:	80 81       	ld	r24, Z
    dd08:	88 60       	ori	r24, 0x08	; 8
    dd0a:	80 83       	st	Z, r24
    dd0c:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <__TEXT_REGION_LENGTH__+0x7f0305>
    dd10:	90 91 06 13 	lds	r25, 0x1306	; 0x801306 <__TEXT_REGION_LENGTH__+0x7f0306>
    dd14:	8c 83       	std	Y+4, r24	; 0x04
    dd16:	9d 83       	std	Y+5, r25	; 0x05
    dd18:	ef ec       	ldi	r30, 0xCF	; 207
    dd1a:	f1 e0       	ldi	r31, 0x01	; 1
    dd1c:	80 81       	ld	r24, Z
    dd1e:	88 23       	and	r24, r24
    dd20:	ec f3       	brlt	.-6      	; 0xdd1c <_bldr_task+0x19e>
    dd22:	ec ec       	ldi	r30, 0xCC	; 204
    dd24:	f1 e0       	ldi	r31, 0x01	; 1
    dd26:	80 81       	ld	r24, Z
    dd28:	88 60       	ori	r24, 0x08	; 8
    dd2a:	80 83       	st	Z, r24
    dd2c:	80 91 07 13 	lds	r24, 0x1307	; 0x801307 <__TEXT_REGION_LENGTH__+0x7f0307>
    dd30:	90 91 08 13 	lds	r25, 0x1308	; 0x801308 <__TEXT_REGION_LENGTH__+0x7f0308>
    dd34:	8a 83       	std	Y+2, r24	; 0x02
    dd36:	9b 83       	std	Y+3, r25	; 0x03
    dd38:	65 e4       	ldi	r22, 0x45	; 69
    dd3a:	c8 01       	movw	r24, r16
    dd3c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <sboxnet_receive_msg>
    dd40:	8f 83       	std	Y+7, r24	; 0x07
    dd42:	8f 81       	ldd	r24, Y+7	; 0x07
    dd44:	18 16       	cp	r1, r24
    dd46:	0c f0       	brlt	.+2      	; 0xdd4a <_bldr_task+0x1cc>
    dd48:	63 c0       	rjmp	.+198    	; 0xde10 <_bldr_task+0x292>
    dd4a:	f8 01       	movw	r30, r16
    dd4c:	81 81       	ldd	r24, Z+1	; 0x01
    dd4e:	81 11       	cpse	r24, r1
    dd50:	5f c0       	rjmp	.+190    	; 0xde10 <_bldr_task+0x292>
    dd52:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <g_v+0x7>
    dd56:	81 11       	cpse	r24, r1
    dd58:	06 c0       	rjmp	.+12     	; 0xdd66 <_bldr_task+0x1e8>
    dd5a:	0e 94 1e 68 	call	0xd03c	; 0xd03c <bldr_random>
    dd5e:	8f 71       	andi	r24, 0x1F	; 31
    dd60:	8f 5f       	subi	r24, 0xFF	; 255
    dd62:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <g_v+0x6>
    dd66:	80 e8       	ldi	r24, 0x80	; 128
    dd68:	80 93 1d 20 	sts	0x201D, r24	; 0x80201d <g_v+0x7>
    dd6c:	f8 01       	movw	r30, r16
    dd6e:	81 81       	ldd	r24, Z+1	; 0x01
    dd70:	81 11       	cpse	r24, r1
    dd72:	4e c0       	rjmp	.+156    	; 0xde10 <_bldr_task+0x292>
    dd74:	80 81       	ld	r24, Z
    dd76:	8f 3f       	cpi	r24, 0xFF	; 255
    dd78:	09 f0       	breq	.+2      	; 0xdd7c <_bldr_task+0x1fe>
    dd7a:	4a c0       	rjmp	.+148    	; 0xde10 <_bldr_task+0x292>
    dd7c:	84 81       	ldd	r24, Z+4	; 0x04
    dd7e:	81 31       	cpi	r24, 0x11	; 17
    dd80:	09 f0       	breq	.+2      	; 0xdd84 <_bldr_task+0x206>
    dd82:	46 c0       	rjmp	.+140    	; 0xde10 <_bldr_task+0x292>
    dd84:	83 81       	ldd	r24, Z+3	; 0x03
    dd86:	8f 73       	andi	r24, 0x3F	; 63
    dd88:	89 30       	cpi	r24, 0x09	; 9
    dd8a:	09 f0       	breq	.+2      	; 0xdd8e <_bldr_task+0x210>
    dd8c:	41 c0       	rjmp	.+130    	; 0xde10 <_bldr_task+0x292>
    dd8e:	45 81       	ldd	r20, Z+5	; 0x05
    dd90:	56 81       	ldd	r21, Z+6	; 0x06
    dd92:	67 81       	ldd	r22, Z+7	; 0x07
    dd94:	70 85       	ldd	r23, Z+8	; 0x08
    dd96:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <g_v+0x1>
    dd9a:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <g_v+0x2>
    dd9e:	a0 91 19 20 	lds	r26, 0x2019	; 0x802019 <g_v+0x3>
    dda2:	b0 91 1a 20 	lds	r27, 0x201A	; 0x80201a <g_v+0x4>
    dda6:	48 17       	cp	r20, r24
    dda8:	59 07       	cpc	r21, r25
    ddaa:	6a 07       	cpc	r22, r26
    ddac:	7b 07       	cpc	r23, r27
    ddae:	81 f5       	brne	.+96     	; 0xde10 <_bldr_task+0x292>
    ddb0:	8c 81       	ldd	r24, Y+4	; 0x04
    ddb2:	9d 81       	ldd	r25, Y+5	; 0x05
    ddb4:	21 85       	ldd	r18, Z+9	; 0x09
    ddb6:	32 85       	ldd	r19, Z+10	; 0x0a
    ddb8:	28 17       	cp	r18, r24
    ddba:	39 07       	cpc	r19, r25
    ddbc:	49 f5       	brne	.+82     	; 0xde10 <_bldr_task+0x292>
    ddbe:	8a 81       	ldd	r24, Y+2	; 0x02
    ddc0:	9b 81       	ldd	r25, Y+3	; 0x03
    ddc2:	23 85       	ldd	r18, Z+11	; 0x0b
    ddc4:	34 85       	ldd	r19, Z+12	; 0x0c
    ddc6:	28 17       	cp	r18, r24
    ddc8:	39 07       	cpc	r19, r25
    ddca:	11 f5       	brne	.+68     	; 0xde10 <_bldr_task+0x292>
    ddcc:	85 85       	ldd	r24, Z+13	; 0x0d
    ddce:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <g_v>
    ddd2:	10 82       	st	Z, r1
    ddd4:	81 e9       	ldi	r24, 0x91	; 145
    ddd6:	84 83       	std	Z+4, r24	; 0x04
    ddd8:	12 82       	std	Z+2, r1	; 0x02
    ddda:	83 81       	ldd	r24, Z+3	; 0x03
    dddc:	80 7c       	andi	r24, 0xC0	; 192
    ddde:	83 83       	std	Z+3, r24	; 0x03
    dde0:	c8 01       	movw	r24, r16
    dde2:	0e 94 70 05 	call	0xae0	; 0xae0 <sboxnet_send_msg>
    dde6:	84 e0       	ldi	r24, 0x04	; 4
    dde8:	90 e2       	ldi	r25, 0x20	; 32
    ddea:	80 97       	sbiw	r24, 0x20	; 32
    ddec:	38 f4       	brcc	.+14     	; 0xddfc <_bldr_task+0x27e>
    ddee:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    ddf2:	87 7f       	andi	r24, 0xF7	; 247
    ddf4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    ddf8:	81 e0       	ldi	r24, 0x01	; 1
    ddfa:	45 c0       	rjmp	.+138    	; 0xde86 <_bldr_task+0x308>
    ddfc:	9f b7       	in	r25, 0x3f	; 63
    ddfe:	f8 94       	cli
    de00:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
    de04:	87 7f       	andi	r24, 0xF7	; 247
    de06:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    de0a:	9f bf       	out	0x3f, r25	; 63
    de0c:	81 e0       	ldi	r24, 0x01	; 1
    de0e:	3b c0       	rjmp	.+118    	; 0xde86 <_bldr_task+0x308>
    de10:	e6 e1       	ldi	r30, 0x16	; 22
    de12:	f0 e2       	ldi	r31, 0x20	; 32
    de14:	86 81       	ldd	r24, Z+6	; 0x06
    de16:	8e 83       	std	Y+6, r24	; 0x06
    de18:	87 81       	ldd	r24, Z+7	; 0x07
    de1a:	88 23       	and	r24, r24
    de1c:	79 f1       	breq	.+94     	; 0xde7c <_bldr_task+0x2fe>
    de1e:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <g_v+0x6>
    de22:	81 11       	cpse	r24, r1
    de24:	2d c0       	rjmp	.+90     	; 0xde80 <_bldr_task+0x302>
    de26:	f8 01       	movw	r30, r16
    de28:	10 82       	st	Z, r1
    de2a:	12 82       	std	Z+2, r1	; 0x02
    de2c:	83 81       	ldd	r24, Z+3	; 0x03
    de2e:	80 7c       	andi	r24, 0xC0	; 192
    de30:	88 60       	ori	r24, 0x08	; 8
    de32:	83 83       	std	Z+3, r24	; 0x03
    de34:	80 e1       	ldi	r24, 0x10	; 16
    de36:	84 83       	std	Z+4, r24	; 0x04
    de38:	c8 01       	movw	r24, r16
    de3a:	0e 94 1b 06 	call	0xc36	; 0xc36 <sboxnet_can_send_msg>
    de3e:	88 23       	and	r24, r24
    de40:	09 f1       	breq	.+66     	; 0xde84 <_bldr_task+0x306>
    de42:	0e 94 1e 68 	call	0xd03c	; 0xd03c <bldr_random>
    de46:	8f 71       	andi	r24, 0x1F	; 31
    de48:	86 5f       	subi	r24, 0xF6	; 246
    de4a:	e6 e1       	ldi	r30, 0x16	; 22
    de4c:	f0 e2       	ldi	r31, 0x20	; 32
    de4e:	86 83       	std	Z+6, r24	; 0x06
    de50:	81 81       	ldd	r24, Z+1	; 0x01
    de52:	92 81       	ldd	r25, Z+2	; 0x02
    de54:	a3 81       	ldd	r26, Z+3	; 0x03
    de56:	b4 81       	ldd	r27, Z+4	; 0x04
    de58:	f8 01       	movw	r30, r16
    de5a:	85 83       	std	Z+5, r24	; 0x05
    de5c:	96 83       	std	Z+6, r25	; 0x06
    de5e:	a7 83       	std	Z+7, r26	; 0x07
    de60:	b0 87       	std	Z+8, r27	; 0x08
    de62:	8c 81       	ldd	r24, Y+4	; 0x04
    de64:	9d 81       	ldd	r25, Y+5	; 0x05
    de66:	81 87       	std	Z+9, r24	; 0x09
    de68:	92 87       	std	Z+10, r25	; 0x0a
    de6a:	8a 81       	ldd	r24, Y+2	; 0x02
    de6c:	9b 81       	ldd	r25, Y+3	; 0x03
    de6e:	83 87       	std	Z+11, r24	; 0x0b
    de70:	94 87       	std	Z+12, r25	; 0x0c
    de72:	c8 01       	movw	r24, r16
    de74:	0e 94 70 05 	call	0xae0	; 0xae0 <sboxnet_send_msg>
    de78:	81 e0       	ldi	r24, 0x01	; 1
    de7a:	05 c0       	rjmp	.+10     	; 0xde86 <_bldr_task+0x308>
    de7c:	81 e0       	ldi	r24, 0x01	; 1
    de7e:	03 c0       	rjmp	.+6      	; 0xde86 <_bldr_task+0x308>
    de80:	81 e0       	ldi	r24, 0x01	; 1
    de82:	01 c0       	rjmp	.+2      	; 0xde86 <_bldr_task+0x308>
    de84:	81 e0       	ldi	r24, 0x01	; 1
    de86:	29 96       	adiw	r28, 0x09	; 9
    de88:	cd bf       	out	0x3d, r28	; 61
    de8a:	de bf       	out	0x3e, r29	; 62
    de8c:	df 91       	pop	r29
    de8e:	cf 91       	pop	r28
    de90:	1f 91       	pop	r17
    de92:	0f 91       	pop	r16
    de94:	08 95       	ret

0000de96 <_bldr_activate>:
    de96:	f8 94       	cli
    de98:	6f ef       	ldi	r22, 0xFF	; 255
    de9a:	80 e0       	ldi	r24, 0x00	; 0
    de9c:	93 e0       	ldi	r25, 0x03	; 3
    de9e:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <sbldr_e2prom_write>
    dea2:	80 e0       	ldi	r24, 0x00	; 0
    dea4:	0e 94 df 69 	call	0xd3be	; 0xd3be <bldr_main>

Disassembly of section .bldrinit:

00010000 <bldr_boot>:

/* Bootloader Vektoren und Bootloader Startup Code
 */
BLDR_INIT_SECTION __ATTR_NAKED __ATTR_USED
static void bldr_boot(void) {    
    __asm__ __volatile__ (
   10000:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10004:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10008:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1000c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10010:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10014:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10018:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1001c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10020:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10024:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10028:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1002c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10030:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10034:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10038:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1003c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10040:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10044:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10048:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1004c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10050:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_20>
   10054:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10058:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1005c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10060:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10064:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10068:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1006c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10070:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10074:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10078:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1007c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10080:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10084:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10088:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1008c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10090:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10094:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10098:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1009c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100a4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100a8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100ac:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100b0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100b4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100bc:	0c 94 67 6a 	jmp	0xd4ce	; 0xd4ce <__vector_47>
   100c0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100c4:	0c 94 3f 6a 	jmp	0xd47e	; 0xd47e <__vector_49>
   100c8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100d0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100d4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100d8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100dc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100e0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100e4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100e8:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_58>
   100ec:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100f0:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_60>
   100f4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100f8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   100fc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10100:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10104:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10108:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1010c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10110:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10114:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10118:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1011c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10120:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10124:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10128:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1012c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10130:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10134:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10138:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1013c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10140:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10144:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10148:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1014c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10150:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10154:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10158:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_86>
   1015c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10160:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10164:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10168:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   1016c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10170:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10174:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
   10178:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>

0001017c <__bldr_bad_interrupt>:
   1017c:	18 95       	reti

0001017e <__bldr_init>:
   1017e:	11 24       	eor	r1, r1
        "clr   __zero_reg__\n" // __zero_reg__ to 0
       : : : "memory"
    );

    // cli Interrupts löschen
    SREG = 0;     // cli
   10180:	1f be       	out	0x3f, r1	; 63
    // Stackpointer Initialiseren
    SP = BLDR_STACK_TOP; // INTERNAL_SRAM_END - sizeof(struct bldr_ram) - 1
   10182:	8e ef       	ldi	r24, 0xFE	; 254
   10184:	9f e2       	ldi	r25, 0x2F	; 47
   10186:	8d bf       	out	0x3d, r24	; 61
   10188:	9e bf       	out	0x3e, r25	; 62
   1018a:	e0 e0       	ldi	r30, 0x00	; 0
   1018c:	f0 e2       	ldi	r31, 0x20	; 32
    
    // RAM löschen (und somit Stackpointer und bldr_ram)
    uint8_t* p = (uint8_t*)INTERNAL_SRAM_START;
    do {
        *p++ = 0;
   1018e:	11 92       	st	Z+, r1
    } while (p != (uint8_t*)INTERNAL_SRAM_END);
   10190:	ef 3f       	cpi	r30, 0xFF	; 255
   10192:	8f e2       	ldi	r24, 0x2F	; 47
   10194:	f8 07       	cpc	r31, r24
   10196:	d9 f7       	brne	.-10     	; 0x1018e <__bldr_init+0x10>

    // springe zu bldr_start()
    __asm__ __volatile__ (
   10198:	0c 94 21 81 	jmp	0x10242	; 0x10242 <bldr_start>

Disassembly of section .bldrvec:

00010200 <bldr_vector_table>:
   10200:	0c 94 4b 6f 	jmp	0xde96	; 0xde96 <_bldr_activate>

00010204 <bldr_task>:
   10204:	0c 94 bf 6d 	jmp	0xdb7e	; 0xdb7e <_bldr_task>

00010208 <bldr_process_basic_msg>:
   10208:	0c 94 c8 6a 	jmp	0xd590	; 0xd590 <_bldr_process_basic_msg>

0001020c <bldr_reg_read>:
   1020c:	0c 94 21 6c 	jmp	0xd842	; 0xd842 <_bldr_reg_read>

00010210 <sbn_init>:
   10210:	0c 94 b0 01 	jmp	0x360	; 0x360 <sboxnet_init>

00010214 <sbn_receive_msg>:
   10214:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <sboxnet_receive_msg>

00010218 <sbn_send_msg>:
   10218:	0c 94 70 05 	jmp	0xae0	; 0xae0 <sboxnet_send_msg>

0001021c <sbn_all_sent>:
   1021c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <sboxnet_all_sent>
   10220:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10224:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10228:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   1022c:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10230:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10234:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   10238:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>
   1023c:	0c 94 bf 80 	jmp	0x1017e	; 0x1017e <__bldr_init>

Disassembly of section .bootloader:

00010242 <bldr_start>:
   10242:	cf 93       	push	r28
   10244:	df 93       	push	r29
   10246:	1f 92       	push	r1
   10248:	cd b7       	in	r28, 0x3d	; 61
   1024a:	de b7       	in	r29, 0x3e	; 62
   1024c:	a8 95       	wdr
   1024e:	88 ed       	ldi	r24, 0xD8	; 216
   10250:	84 bf       	out	0x34, r24	; 52
   10252:	21 e0       	ldi	r18, 0x01	; 1
   10254:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ef080>
   10258:	a0 e0       	ldi	r26, 0x00	; 0
   1025a:	b6 e0       	ldi	r27, 0x06	; 6
   1025c:	1c 92       	st	X, r1
   1025e:	e0 eb       	ldi	r30, 0xB0	; 176
   10260:	f0 e0       	ldi	r31, 0x00	; 0
   10262:	8f ef       	ldi	r24, 0xFF	; 255
   10264:	80 83       	st	Z, r24
   10266:	90 e1       	ldi	r25, 0x10	; 16
   10268:	50 96       	adiw	r26, 0x10	; 16
   1026a:	9c 93       	st	X, r25
   1026c:	a0 e2       	ldi	r26, 0x20	; 32
   1026e:	b6 e0       	ldi	r27, 0x06	; 6
   10270:	1c 92       	st	X, r1
   10272:	80 83       	st	Z, r24
   10274:	50 96       	adiw	r26, 0x10	; 16
   10276:	9c 93       	st	X, r25
   10278:	a0 e4       	ldi	r26, 0x40	; 64
   1027a:	b6 e0       	ldi	r27, 0x06	; 6
   1027c:	1c 92       	st	X, r1
   1027e:	80 83       	st	Z, r24
   10280:	50 96       	adiw	r26, 0x10	; 16
   10282:	9c 93       	st	X, r25
   10284:	a0 e6       	ldi	r26, 0x60	; 96
   10286:	b6 e0       	ldi	r27, 0x06	; 6
   10288:	1c 92       	st	X, r1
   1028a:	80 83       	st	Z, r24
   1028c:	50 96       	adiw	r26, 0x10	; 16
   1028e:	9c 93       	st	X, r25
   10290:	a0 e8       	ldi	r26, 0x80	; 128
   10292:	b6 e0       	ldi	r27, 0x06	; 6
   10294:	1c 92       	st	X, r1
   10296:	80 83       	st	Z, r24
   10298:	88 e1       	ldi	r24, 0x18	; 24
   1029a:	50 96       	adiw	r26, 0x10	; 16
   1029c:	8c 93       	st	X, r24
   1029e:	50 97       	sbiw	r26, 0x10	; 16
   102a0:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7ef0b2>
   102a4:	83 e0       	ldi	r24, 0x03	; 3
   102a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7ef0b3>
   102aa:	e6 e1       	ldi	r30, 0x16	; 22
   102ac:	f0 e2       	ldi	r31, 0x20	; 32
   102ae:	21 e0       	ldi	r18, 0x01	; 1
   102b0:	30 e0       	ldi	r19, 0x00	; 0
   102b2:	22 8f       	std	Z+26, r18	; 0x1a
   102b4:	33 8f       	std	Z+27, r19	; 0x1b
   102b6:	11 96       	adiw	r26, 0x01	; 1
   102b8:	8c 93       	st	X, r24
   102ba:	11 97       	sbiw	r26, 0x01	; 1
   102bc:	16 96       	adiw	r26, 0x06	; 6
   102be:	8c 93       	st	X, r24
   102c0:	12 86       	std	Z+10, r1	; 0x0a
   102c2:	13 86       	std	Z+11, r1	; 0x0b
   102c4:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <g_dev_state>
   102c8:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <g_dev_errflags>
   102cc:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <__data_end>
   102d0:	e0 e5       	ldi	r30, 0x50	; 80
   102d2:	f0 e0       	ldi	r31, 0x00	; 0
   102d4:	80 81       	ld	r24, Z
   102d6:	82 60       	ori	r24, 0x02	; 2
   102d8:	80 83       	st	Z, r24
   102da:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7ef051>
   102de:	81 fd       	sbrc	r24, 1
   102e0:	06 c0       	rjmp	.+12     	; 0x102ee <bldr_start+0xac>
   102e2:	e1 e5       	ldi	r30, 0x51	; 81
   102e4:	f0 e0       	ldi	r31, 0x00	; 0
   102e6:	00 00       	nop
   102e8:	80 81       	ld	r24, Z
   102ea:	81 ff       	sbrs	r24, 1
   102ec:	fc cf       	rjmp	.-8      	; 0x102e6 <bldr_start+0xa4>
   102ee:	88 ed       	ldi	r24, 0xD8	; 216
   102f0:	84 bf       	out	0x34, r24	; 52
   102f2:	81 e0       	ldi	r24, 0x01	; 1
   102f4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7ef040>
   102f8:	e0 e5       	ldi	r30, 0x50	; 80
   102fa:	f0 e0       	ldi	r31, 0x00	; 0
   102fc:	80 81       	ld	r24, Z
   102fe:	8e 7f       	andi	r24, 0xFE	; 254
   10300:	80 83       	st	Z, r24
   10302:	8b ec       	ldi	r24, 0xCB	; 203
   10304:	82 83       	std	Z+2, r24	; 0x02
   10306:	80 81       	ld	r24, Z
   10308:	88 60       	ori	r24, 0x08	; 8
   1030a:	80 83       	st	Z, r24
   1030c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7ef051>
   10310:	83 fd       	sbrc	r24, 3
   10312:	5f c0       	rjmp	.+190    	; 0x103d2 <bldr_start+0x190>
   10314:	88 ec       	ldi	r24, 0xC8	; 200
   10316:	e1 e5       	ldi	r30, 0x51	; 81
   10318:	f0 e0       	ldi	r31, 0x00	; 0
   1031a:	03 c0       	rjmp	.+6      	; 0x10322 <bldr_start+0xe0>
   1031c:	90 81       	ld	r25, Z
   1031e:	93 fd       	sbrc	r25, 3
   10320:	58 c0       	rjmp	.+176    	; 0x103d2 <bldr_start+0x190>
   10322:	00 00       	nop
   10324:	00 00       	nop
   10326:	00 00       	nop
   10328:	81 50       	subi	r24, 0x01	; 1
   1032a:	c1 f7       	brne	.-16     	; 0x1031c <bldr_start+0xda>
   1032c:	10 c0       	rjmp	.+32     	; 0x1034e <bldr_start+0x10c>
   1032e:	e1 e5       	ldi	r30, 0x51	; 81
   10330:	f0 e0       	ldi	r31, 0x00	; 0
   10332:	00 00       	nop
   10334:	80 81       	ld	r24, Z
   10336:	84 ff       	sbrs	r24, 4
   10338:	fc cf       	rjmp	.-8      	; 0x10332 <bldr_start+0xf0>
   1033a:	88 ed       	ldi	r24, 0xD8	; 216
   1033c:	84 bf       	out	0x34, r24	; 52
   1033e:	84 e0       	ldi	r24, 0x04	; 4
   10340:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7ef040>
   10344:	e0 e5       	ldi	r30, 0x50	; 80
   10346:	f0 e0       	ldi	r31, 0x00	; 0
   10348:	80 81       	ld	r24, Z
   1034a:	8d 7f       	andi	r24, 0xFD	; 253
   1034c:	80 83       	st	Z, r24
   1034e:	ef ec       	ldi	r30, 0xCF	; 207
   10350:	f1 e0       	ldi	r31, 0x01	; 1
   10352:	80 81       	ld	r24, Z
   10354:	88 23       	and	r24, r24
   10356:	ec f3       	brlt	.-6      	; 0x10352 <bldr_start+0x110>
   10358:	ec ec       	ldi	r30, 0xCC	; 204
   1035a:	f1 e0       	ldi	r31, 0x01	; 1
   1035c:	80 81       	ld	r24, Z
   1035e:	88 60       	ori	r24, 0x08	; 8
   10360:	80 83       	st	Z, r24
   10362:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <__TEXT_REGION_LENGTH__+0x7f0301>
   10366:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <__TEXT_REGION_LENGTH__+0x7f0302>
   1036a:	a0 91 03 13 	lds	r26, 0x1303	; 0x801303 <__TEXT_REGION_LENGTH__+0x7f0303>
   1036e:	b0 91 04 13 	lds	r27, 0x1304	; 0x801304 <__TEXT_REGION_LENGTH__+0x7f0304>
   10372:	06 e1       	ldi	r16, 0x16	; 22
   10374:	10 e2       	ldi	r17, 0x20	; 32
   10376:	f8 01       	movw	r30, r16
   10378:	81 83       	std	Z+1, r24	; 0x01
   1037a:	92 83       	std	Z+2, r25	; 0x02
   1037c:	a3 83       	std	Z+3, r26	; 0x03
   1037e:	b4 83       	std	Z+4, r27	; 0x04
   10380:	2f ef       	ldi	r18, 0xFF	; 255
   10382:	20 83       	st	Z, r18
   10384:	10 8a       	std	Z+16, r1	; 0x10
   10386:	11 8a       	std	Z+17, r1	; 0x11
   10388:	12 8a       	std	Z+18, r1	; 0x12
   1038a:	13 8a       	std	Z+19, r1	; 0x13
   1038c:	14 8a       	std	Z+20, r1	; 0x14
   1038e:	15 8a       	std	Z+21, r1	; 0x15
   10390:	80 8f       	std	Z+24, r24	; 0x18
   10392:	91 8f       	std	Z+25, r25	; 0x19
   10394:	0e 94 1e 68 	call	0xd03c	; 0xd03c <bldr_random>
   10398:	f8 01       	movw	r30, r16
   1039a:	85 83       	std	Z+5, r24	; 0x05
   1039c:	17 82       	std	Z+7, r1	; 0x07
   1039e:	ef ec       	ldi	r30, 0xCF	; 207
   103a0:	f1 e0       	ldi	r31, 0x01	; 1
   103a2:	80 81       	ld	r24, Z
   103a4:	88 23       	and	r24, r24
   103a6:	ec f3       	brlt	.-6      	; 0x103a2 <bldr_start+0x160>
   103a8:	ec ec       	ldi	r30, 0xCC	; 204
   103aa:	f1 e0       	ldi	r31, 0x01	; 1
   103ac:	80 81       	ld	r24, Z
   103ae:	88 60       	ori	r24, 0x08	; 8
   103b0:	80 83       	st	Z, r24
   103b2:	80 91 00 13 	lds	r24, 0x1300	; 0x801300 <__TEXT_REGION_LENGTH__+0x7f0300>
   103b6:	89 83       	std	Y+1, r24	; 0x01
   103b8:	89 81       	ldd	r24, Y+1	; 0x01
   103ba:	81 11       	cpse	r24, r1
   103bc:	07 c0       	rjmp	.+14     	; 0x103cc <bldr_start+0x18a>
   103be:	88 ed       	ldi	r24, 0xD8	; 216
   103c0:	84 bf       	out	0x34, r24	; 52
   103c2:	87 e0       	ldi	r24, 0x07	; 7
   103c4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7ef0a2>
   103c8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
   103cc:	81 e0       	ldi	r24, 0x01	; 1
   103ce:	0e 94 df 69 	call	0xd3be	; 0xd3be <bldr_main>
   103d2:	e0 e5       	ldi	r30, 0x50	; 80
   103d4:	f0 e0       	ldi	r31, 0x00	; 0
   103d6:	82 ec       	ldi	r24, 0xC2	; 194
   103d8:	85 83       	std	Z+5, r24	; 0x05
   103da:	80 81       	ld	r24, Z
   103dc:	80 61       	ori	r24, 0x10	; 16
   103de:	80 83       	st	Z, r24
   103e0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7ef051>
   103e4:	84 ff       	sbrs	r24, 4
   103e6:	a3 cf       	rjmp	.-186    	; 0x1032e <bldr_start+0xec>
   103e8:	a8 cf       	rjmp	.-176    	; 0x1033a <bldr_start+0xf8>

Disassembly of section .bldrstatic:

00010c00 <xsbldr_prog_page>:
    )
/* uint8_t xsbldr_prog_page(uint16_t pageaddr, uint8_t *srcbuf, uint8_t fromflash)
 * Flash Seite programmieren
 */
BLDR_STATIC_SECTION __ATTR_USED NOINLINE
static uint8_t xsbldr_prog_page(uint16_t pageaddr, uint8_t *srcbuf, uint8_t fromflash) {
   10c00:	7f 92       	push	r7
   10c02:	8f 92       	push	r8
   10c04:	9f 92       	push	r9
   10c06:	af 92       	push	r10
   10c08:	bf 92       	push	r11
   10c0a:	cf 92       	push	r12
   10c0c:	df 92       	push	r13
   10c0e:	ef 92       	push	r14
   10c10:	ff 92       	push	r15
   10c12:	0f 93       	push	r16
   10c14:	1f 93       	push	r17
   10c16:	cf 93       	push	r28
   10c18:	df 93       	push	r29
   10c1a:	6c 01       	movw	r12, r24
   10c1c:	7b 01       	movw	r14, r22
   10c1e:	74 2e       	mov	r7, r20
    nvmc_wait_busy();
   10c20:	ef ec       	ldi	r30, 0xCF	; 207
   10c22:	f1 e0       	ldi	r31, 0x01	; 1
   10c24:	90 81       	ld	r25, Z
   10c26:	99 23       	and	r25, r25
   10c28:	ec f3       	brlt	.-6      	; 0x10c24 <xsbldr_prog_page+0x24>
    pageaddr &= ~(SPM_PAGESIZE-1);
   10c2a:	cc 24       	eor	r12, r12

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
   10c2c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   10c2e:	f8 94       	cli
        NVM.CMD = NVM_CMD_ERASE_FLASH_BUFFER_gc;
   10c30:	a0 ec       	ldi	r26, 0xC0	; 192
   10c32:	b1 e0       	ldi	r27, 0x01	; 1
   10c34:	96 e2       	ldi	r25, 0x26	; 38
   10c36:	1a 96       	adiw	r26, 0x0a	; 10
   10c38:	9c 93       	st	X, r25
   10c3a:	1a 97       	sbiw	r26, 0x0a	; 10
        xsbldr_cmdex(pageaddr);
   10c3c:	41 e0       	ldi	r20, 0x01	; 1
   10c3e:	50 e0       	ldi	r21, 0x00	; 0
   10c40:	28 ed       	ldi	r18, 0xD8	; 216
   10c42:	30 e0       	ldi	r19, 0x00	; 0
   10c44:	f6 01       	movw	r30, r12
   10c46:	24 bf       	out	0x34, r18	; 52
   10c48:	40 93 cb 01 	sts	0x01CB, r20	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7ef1cb>
        NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   10c4c:	1a 96       	adiw	r26, 0x0a	; 10
   10c4e:	1c 92       	st	X, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   10c50:	8f bf       	out	0x3f, r24	; 63
    }
    nvmc_wait_busy();
   10c52:	ef ec       	ldi	r30, 0xCF	; 207
   10c54:	f1 e0       	ldi	r31, 0x01	; 1
   10c56:	80 81       	ld	r24, Z
   10c58:	88 23       	and	r24, r24
   10c5a:	ec f3       	brlt	.-6      	; 0x10c56 <xsbldr_prog_page+0x56>
   10c5c:	57 01       	movw	r10, r14
   10c5e:	b3 94       	inc	r11
   10c60:	85 01       	movw	r16, r10
   10c62:	d7 01       	movw	r26, r14
        } else {
            w = *(uint16_t*)(srcbuf + i);
        }
        
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
            NVM.CMD = NVM_CMD_LOAD_FLASH_BUFFER_gc;
   10c64:	c0 ec       	ldi	r28, 0xC0	; 192
   10c66:	d1 e0       	ldi	r29, 0x01	; 1
   10c68:	0f 2e       	mov	r0, r31
   10c6a:	f3 e2       	ldi	r31, 0x23	; 35
   10c6c:	8f 2e       	mov	r8, r31
   10c6e:	f0 2d       	mov	r31, r0
   10c70:	96 01       	movw	r18, r12
   10c72:	2e 19       	sub	r18, r14
   10c74:	3f 09       	sbc	r19, r15
            xsbldr_spm_word(pageaddr + i, w);
   10c76:	6d e9       	ldi	r22, 0x9D	; 157
   10c78:	70 e0       	ldi	r23, 0x00	; 0
    
    for (uint16_t i = 0; i < SPM_PAGESIZE; i += 2)
    {
        // Set up little-endian word.
        uint16_t w;
        if (fromflash) {
   10c7a:	77 20       	and	r7, r7
   10c7c:	29 f0       	breq	.+10     	; 0x10c88 <xsbldr_prog_page+0x88>
            w = pgm_read_word((uint16_t)srcbuf + i);
   10c7e:	fd 01       	movw	r30, r26
   10c80:	85 91       	lpm	r24, Z+
   10c82:	94 91       	lpm	r25, Z
   10c84:	99 2e       	mov	r9, r25
   10c86:	04 c0       	rjmp	.+8      	; 0x10c90 <xsbldr_prog_page+0x90>
        } else {
            w = *(uint16_t*)(srcbuf + i);
   10c88:	8c 91       	ld	r24, X
   10c8a:	11 96       	adiw	r26, 0x01	; 1
   10c8c:	9c 90       	ld	r9, X
   10c8e:	11 97       	sbiw	r26, 0x01	; 1
        }
        
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
   10c90:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   10c92:	f8 94       	cli
            NVM.CMD = NVM_CMD_LOAD_FLASH_BUFFER_gc;
   10c94:	8a 86       	std	Y+10, r8	; 0x0a
   10c96:	a9 01       	movw	r20, r18
            xsbldr_spm_word(pageaddr + i, w);
   10c98:	f9 01       	movw	r30, r18
   10c9a:	ea 0f       	add	r30, r26
   10c9c:	fb 1f       	adc	r31, r27
   10c9e:	08 2e       	mov	r0, r24
   10ca0:	19 2c       	mov	r1, r9
   10ca2:	64 bf       	out	0x34, r22	; 52
   10ca4:	e8 95       	spm
   10ca6:	11 24       	eor	r1, r1
            NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   10ca8:	1a 86       	std	Y+10, r1	; 0x0a
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   10caa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
   10cac:	12 96       	adiw	r26, 0x02	; 2
        xsbldr_cmdex(pageaddr);
        NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    }
    nvmc_wait_busy();
    
    for (uint16_t i = 0; i < SPM_PAGESIZE; i += 2)
   10cae:	0a 17       	cp	r16, r26
   10cb0:	1b 07       	cpc	r17, r27
   10cb2:	19 f7       	brne	.-58     	; 0x10c7a <xsbldr_prog_page+0x7a>
            xsbldr_spm_word(pageaddr + i, w);
            NVM.CMD = NVM_CMD_NO_OPERATION_gc;
        }
    }
    
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
   10cb4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   10cb6:	f8 94       	cli
        if (pageaddr >= BOOT_SECTION_START) {
            NVM.CMD = NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc;
        } else {
            NVM.CMD = NVM_CMD_ERASE_WRITE_APP_PAGE_gc;
   10cb8:	a0 ec       	ldi	r26, 0xC0	; 192
   10cba:	b1 e0       	ldi	r27, 0x01	; 1
   10cbc:	95 e2       	ldi	r25, 0x25	; 37
   10cbe:	1a 96       	adiw	r26, 0x0a	; 10
   10cc0:	9c 93       	st	X, r25
   10cc2:	1a 97       	sbiw	r26, 0x0a	; 10
        }
        xsbldr_spm(pageaddr);
   10cc4:	2d e9       	ldi	r18, 0x9D	; 157
   10cc6:	30 e0       	ldi	r19, 0x00	; 0
   10cc8:	f6 01       	movw	r30, r12
   10cca:	24 bf       	out	0x34, r18	; 52
   10ccc:	e8 95       	spm
        NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   10cce:	1a 96       	adiw	r26, 0x0a	; 10
   10cd0:	1c 92       	st	X, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   10cd2:	8f bf       	out	0x3f, r24	; 63
    }
    nvmc_wait_busy();
   10cd4:	ef ec       	ldi	r30, 0xCF	; 207
   10cd6:	f1 e0       	ldi	r31, 0x01	; 1
   10cd8:	80 81       	ld	r24, Z
   10cda:	88 23       	and	r24, r24
   10cdc:	ec f3       	brlt	.-6      	; 0x10cd8 <xsbldr_prog_page+0xd8>
     
    // verify
    uint8_t ret = 0;
    for (uint16_t i = 0; i < SPM_PAGESIZE; i++, srcbuf++) {
        uint8_t v;
        if (fromflash) {
   10cde:	77 20       	and	r7, r7
   10ce0:	19 f0       	breq	.+6      	; 0x10ce8 <xsbldr_prog_page+0xe8>
            v = pgm_read_byte((uint16_t)srcbuf);
   10ce2:	f7 01       	movw	r30, r14
   10ce4:	84 91       	lpm	r24, Z
   10ce6:	02 c0       	rjmp	.+4      	; 0x10cec <xsbldr_prog_page+0xec>
        } else {
            v = *srcbuf;
   10ce8:	f7 01       	movw	r30, r14
   10cea:	80 81       	ld	r24, Z
        }
        if (pgm_read_byte(pageaddr + i) != v) {
   10cec:	f7 01       	movw	r30, r14
   10cee:	e4 0f       	add	r30, r20
   10cf0:	f5 1f       	adc	r31, r21
   10cf2:	e4 91       	lpm	r30, Z
   10cf4:	8e 13       	cpse	r24, r30
   10cf6:	08 c0       	rjmp	.+16     	; 0x10d08 <xsbldr_prog_page+0x108>
    }
    nvmc_wait_busy();
     
    // verify
    uint8_t ret = 0;
    for (uint16_t i = 0; i < SPM_PAGESIZE; i++, srcbuf++) {
   10cf8:	ff ef       	ldi	r31, 0xFF	; 255
   10cfa:	ef 1a       	sub	r14, r31
   10cfc:	ff 0a       	sbc	r15, r31
   10cfe:	ea 14       	cp	r14, r10
   10d00:	fb 04       	cpc	r15, r11
   10d02:	69 f7       	brne	.-38     	; 0x10cde <xsbldr_prog_page+0xde>
        NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    }
    nvmc_wait_busy();
     
    // verify
    uint8_t ret = 0;
   10d04:	80 e0       	ldi	r24, 0x00	; 0
   10d06:	01 c0       	rjmp	.+2      	; 0x10d0a <xsbldr_prog_page+0x10a>
            v = pgm_read_byte((uint16_t)srcbuf);
        } else {
            v = *srcbuf;
        }
        if (pgm_read_byte(pageaddr + i) != v) {
            ret = 1; // verify error
   10d08:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return ret;
}
   10d0a:	df 91       	pop	r29
   10d0c:	cf 91       	pop	r28
   10d0e:	1f 91       	pop	r17
   10d10:	0f 91       	pop	r16
   10d12:	ff 90       	pop	r15
   10d14:	ef 90       	pop	r14
   10d16:	df 90       	pop	r13
   10d18:	cf 90       	pop	r12
   10d1a:	bf 90       	pop	r11
   10d1c:	af 90       	pop	r10
   10d1e:	9f 90       	pop	r9
   10d20:	8f 90       	pop	r8
   10d22:	7f 90       	pop	r7
   10d24:	08 95       	ret

00010d26 <xsbldr_e2prom_write>:
/* void xsbldr_e2prom_write(uint8_t* addr, uint8_t v)
 * Ein Byte v in das EEPROM schreiben bei EEPROM Adresse addr
 */
BLDR_STATIC_SECTION __ATTR_USED NOINLINE
static void xsbldr_e2prom_write(uint8_t* addr, uint8_t v) {
    e2prom_wait_busy();
   10d26:	ef ec       	ldi	r30, 0xCF	; 207
   10d28:	f1 e0       	ldi	r31, 0x01	; 1
   10d2a:	20 81       	ld	r18, Z
   10d2c:	22 23       	and	r18, r18
   10d2e:	ec f3       	brlt	.-6      	; 0x10d2a <xsbldr_e2prom_write+0x4>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
   10d30:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   10d32:	f8 94       	cli
        if (e2prom_get_byte((uint16_t)addr) != v) {
   10d34:	ef ec       	ldi	r30, 0xCF	; 207
   10d36:	f1 e0       	ldi	r31, 0x01	; 1
   10d38:	20 81       	ld	r18, Z
   10d3a:	22 23       	and	r18, r18
   10d3c:	ec f3       	brlt	.-6      	; 0x10d38 <xsbldr_e2prom_write+0x12>
   10d3e:	ec ec       	ldi	r30, 0xCC	; 204
   10d40:	f1 e0       	ldi	r31, 0x01	; 1
   10d42:	20 81       	ld	r18, Z
   10d44:	28 60       	ori	r18, 0x08	; 8
   10d46:	20 83       	st	Z, r18
   10d48:	28 2f       	mov	r18, r24
   10d4a:	39 2f       	mov	r19, r25
   10d4c:	f9 01       	movw	r30, r18
   10d4e:	f0 5f       	subi	r31, 0xF0	; 240
   10d50:	90 81       	ld	r25, Z
   10d52:	96 17       	cp	r25, r22
   10d54:	09 f1       	breq	.+66     	; 0x10d98 <xsbldr_e2prom_write+0x72>
            clrbit(NVM.CTRLB, NVM_EEMAPEN_bp);
   10d56:	e0 ec       	ldi	r30, 0xC0	; 192
   10d58:	f1 e0       	ldi	r31, 0x01	; 1
   10d5a:	94 85       	ldd	r25, Z+12	; 0x0c
   10d5c:	97 7f       	andi	r25, 0xF7	; 247
   10d5e:	94 87       	std	Z+12, r25	; 0x0c
            // erase eeprom page buffer
            NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
   10d60:	96 e3       	ldi	r25, 0x36	; 54
   10d62:	92 87       	std	Z+10, r25	; 0x0a
            ioreg_ccp(&NVM.CTRLA, Bit(NVM_CMDEX_bp));
   10d64:	98 ed       	ldi	r25, 0xD8	; 216
   10d66:	94 bf       	out	0x34, r25	; 52
   10d68:	91 e0       	ldi	r25, 0x01	; 1
   10d6a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7ef1cb>
            nvmc_wait_busy();
   10d6e:	ef ec       	ldi	r30, 0xCF	; 207
   10d70:	f1 e0       	ldi	r31, 0x01	; 1
   10d72:	90 81       	ld	r25, Z
   10d74:	99 23       	and	r25, r25
   10d76:	ec f3       	brlt	.-6      	; 0x10d72 <xsbldr_e2prom_write+0x4c>
            // load eeprom page buffer
            NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
   10d78:	e0 ec       	ldi	r30, 0xC0	; 192
   10d7a:	f1 e0       	ldi	r31, 0x01	; 1
   10d7c:	93 e3       	ldi	r25, 0x33	; 51
   10d7e:	92 87       	std	Z+10, r25	; 0x0a
            NVM.ADDR0 = lowbyte((uint16_t)addr);
   10d80:	80 83       	st	Z, r24
            NVM.ADDR1 = highbyte((uint16_t)addr);
   10d82:	31 83       	std	Z+1, r19	; 0x01
            NVM.ADDR2 = 0;
   10d84:	12 82       	std	Z+2, r1	; 0x02
            NVM.DATA0 = v;
   10d86:	64 83       	std	Z+4, r22	; 0x04
            // erase and write eeprom page
            NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
   10d88:	85 e3       	ldi	r24, 0x35	; 53
   10d8a:	82 87       	std	Z+10, r24	; 0x0a
            ioreg_ccp(&NVM.CTRLA, Bit(NVM_CMDEX_bp));
   10d8c:	88 ed       	ldi	r24, 0xD8	; 216
   10d8e:	84 bf       	out	0x34, r24	; 52
   10d90:	81 e0       	ldi	r24, 0x01	; 1
   10d92:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7ef1cb>
            
            NVM.CMD = NVM_CMD_NO_OPERATION_gc;
   10d96:	12 86       	std	Z+10, r1	; 0x0a
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   10d98:	4f bf       	out	0x3f, r20	; 63
        }
    }
    e2prom_wait_busy();
   10d9a:	ef ec       	ldi	r30, 0xCF	; 207
   10d9c:	f1 e0       	ldi	r31, 0x01	; 1
   10d9e:	80 81       	ld	r24, Z
   10da0:	88 23       	and	r24, r24
   10da2:	ec f3       	brlt	.-6      	; 0x10d9e <xsbldr_e2prom_write+0x78>
}
   10da4:	08 95       	ret

00010da6 <xsbldr_finish_fwup>:
/* void xsbldr_finish_fwup(uint8_t isapp)
 * Firmware Update abschliessen und Reboot.
 */
BLDR_STATIC_SECTION __ATTR_NO_RETURN __ATTR_USED NOINLINE
static void xsbldr_finish_fwup(uint8_t isapp) {
    cli();
   10da6:	f8 94       	cli
    
    uint8_t verifyerr = 0;
    
    if (!isapp) {
   10da8:	81 11       	cpse	r24, r1
   10daa:	0a c0       	rjmp	.+20     	; 0x10dc0 <xsbldr_finish_fwup+0x1a>
   10dac:	c0 e0       	ldi	r28, 0x00	; 0
   10dae:	d0 ef       	ldi	r29, 0xF0	; 240
        uint16_t pageaddr = BLDR_START_ADDR;
        uint16_t srcaddr  = 0;
        while (pageaddr < BLDR_START_ADDR + BLDR_SIZE) {
            verifyerr |= sbldr_prog_page(pageaddr, (uint8_t*)srcaddr, 1);
   10db0:	be 01       	movw	r22, r28
   10db2:	70 5f       	subi	r23, 0xF0	; 240
   10db4:	41 e0       	ldi	r20, 0x01	; 1
   10db6:	ce 01       	movw	r24, r28
   10db8:	0e 94 fb 87 	call	0x10ff6	; 0x10ff6 <sbldr_prog_page>
            pageaddr += SPM_PAGESIZE;
   10dbc:	d3 95       	inc	r29
   10dbe:	f8 cf       	rjmp	.-16     	; 0x10db0 <xsbldr_finish_fwup+0xa>
    if (verifyerr) {
        upd = 0xfe;
    } else if (isapp) {
        upd = 0;
    }
    sbldr_e2prom_write(&bldr_eeprom.firmware_update, upd);
   10dc0:	60 e0       	ldi	r22, 0x00	; 0
   10dc2:	80 e0       	ldi	r24, 0x00	; 0
   10dc4:	93 e0       	ldi	r25, 0x03	; 3
   10dc6:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <sbldr_e2prom_write>
    
    // all done, reboot
    ioreg_ccp(&RST.CTRL, Bit(RST_SWRST_bp));
   10dca:	88 ed       	ldi	r24, 0xD8	; 216
   10dcc:	84 bf       	out	0x34, r24	; 52
   10dce:	81 e0       	ldi	r24, 0x01	; 1
   10dd0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7ef079>
   10dd4:	ff cf       	rjmp	.-2      	; 0x10dd4 <xsbldr_finish_fwup+0x2e>

Disassembly of section .bldrstatvec:

00010ff0 <sbldr_static_vectors>:
 * - sbldr_finish_fwup -> xsbldr_finish_fwup
 * - sbldr_prog_page -> xsbldr_prog_page
 */
BLDR_STATVEC_SECTION __ATTR_NAKED __ATTR_USED
static void sbldr_static_vectors(void) {
    __asm__ __volatile__ (
   10ff0:	ff cf       	rjmp	.-2      	; 0x10ff0 <sbldr_static_vectors>

00010ff2 <sbldr_e2prom_write>:
   10ff2:	99 ce       	rjmp	.-718    	; 0x10d26 <xsbldr_e2prom_write>

00010ff4 <sbldr_finish_fwup>:
   10ff4:	d8 ce       	rjmp	.-592    	; 0x10da6 <xsbldr_finish_fwup>

00010ff6 <sbldr_prog_page>:
   10ff6:	04 ce       	rjmp	.-1016   	; 0x10c00 <xsbldr_prog_page>

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
       8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
       c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      10:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      14:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      18:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      1c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      20:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      24:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      28:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      2c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      30:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      34:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      3c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      40:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      44:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      48:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      4c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      50:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_20>
      54:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      58:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      5c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      60:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      64:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      68:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      6c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      70:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      74:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      78:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      7c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      80:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      84:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      88:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      8c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      90:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      94:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      98:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      9c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      a8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      ac:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      bc:	0c 94 67 6a 	jmp	0xd4ce	; 0xd4ce <__vector_47>
      c0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      c4:	0c 94 3f 6a 	jmp	0xd47e	; 0xd47e <__vector_49>
      c8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      d8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      dc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      e8:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_58>
      ec:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      f0:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_60>
      f4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      f8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
      fc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     100:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     104:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     108:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     10c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     110:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     114:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     118:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     11c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     120:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     124:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     128:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     12c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     130:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     134:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     138:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     13c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     140:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     144:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     148:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     14c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     150:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     154:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     158:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_86>
     15c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     160:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     164:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     168:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     16c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     170:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     174:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     178:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     17c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     180:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     184:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     188:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     18c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     190:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     194:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     198:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     19c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1a8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1ac:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1bc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1c8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1cc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1d8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1dc:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1e8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1ec:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>
     1f8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__bad_interrupt>

000001fc <__trampolines_end>:
     1fc:	4d 6f       	ori	r20, 0xFD	; 253
     1fe:	64 75       	andi	r22, 0x54	; 84
     200:	6c 54       	subi	r22, 0x4C	; 76
     202:	65 73       	andi	r22, 0x35	; 53
     204:	74 65       	ori	r23, 0x54	; 84
     206:	72 00       	.word	0x0072	; ????

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	df e2       	ldi	r29, 0x2F	; 47
     212:	de bf       	out	0x3e, r29	; 62

00000214 <com_init2>:
}

/* do_before_bldr_activate: Statements die vor der Aktivierung des Bootloaders ausgeführt werden sollen
 * weak bound: Statements die vor der Aktivierung des Bootloaders ausgeführt werden sollen
 */
__ATTR_WEAK void do_before_bldr_activate(void) {
     214:	8e ef       	ldi	r24, 0xFE	; 254
     216:	9f e2       	ldi	r25, 0x2F	; 47
     218:	8d bf       	out	0x3d, r24	; 61
     21a:	9e bf       	out	0x3e, r25	; 62

0000021c <__do_copy_data>:
     21c:	10 e2       	ldi	r17, 0x20	; 32
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b0 e2       	ldi	r27, 0x20	; 32
     222:	ee e8       	ldi	r30, 0x8E	; 142
     224:	f3 e1       	ldi	r31, 0x13	; 19
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0b bf       	out	0x3b, r16	; 59
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__do_copy_data+0x14>
     22c:	07 90       	elpm	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	a2 30       	cpi	r26, 0x02	; 2
     232:	b1 07       	cpc	r27, r17
     234:	d9 f7       	brne	.-10     	; 0x22c <__do_copy_data+0x10>

00000236 <__do_clear_bss>:
     236:	21 e2       	ldi	r18, 0x21	; 33
     238:	a2 e0       	ldi	r26, 0x02	; 2
     23a:	b0 e2       	ldi	r27, 0x20	; 32
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	a9 38       	cpi	r26, 0x89	; 137
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
     246:	0e 94 f2 06 	call	0xde4	; 0xde4 <main>
     24a:	0c 94 c5 09 	jmp	0x138a	; 0x138a <_exit>

0000024e <__bad_interrupt>:
     24e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000252 <sboxnet_debug_inc_recverrors>:
 * Verhindert das der Linker diesen Bereich nutzt.
 * 
 */
BLDR_CRC_SECTION NOINLINE __ATTR_NAKED __ATTR_USED
static void bldr_crc_section(void) {
    __asm__ __volatile__ (
     252:	e9 e7       	ldi	r30, 0x79	; 121
     254:	f1 e2       	ldi	r31, 0x21	; 33
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	80 83       	st	Z, r24
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	08 95       	ret

00000262 <sboxnet_debug_inc_recverr_dor>:
     262:	ef e7       	ldi	r30, 0x7F	; 127
     264:	f1 e2       	ldi	r31, 0x21	; 33
     266:	80 81       	ld	r24, Z
     268:	91 81       	ldd	r25, Z+1	; 0x01
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	80 83       	st	Z, r24
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	08 95       	ret

00000272 <sboxnet_debug_inc_recv_byte>:
     272:	e3 e6       	ldi	r30, 0x63	; 99
     274:	f1 e2       	ldi	r31, 0x21	; 33
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	80 83       	st	Z, r24
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	08 95       	ret

00000282 <sboxnet_prandom>:
     282:	e6 e1       	ldi	r30, 0x16	; 22
     284:	f0 e2       	ldi	r31, 0x20	; 32
     286:	84 a1       	ldd	r24, Z+36	; 0x24
     288:	98 2f       	mov	r25, r24
     28a:	99 0f       	add	r25, r25
     28c:	89 27       	eor	r24, r25
     28e:	98 2f       	mov	r25, r24
     290:	96 95       	lsr	r25
     292:	89 27       	eor	r24, r25
     294:	98 2f       	mov	r25, r24
     296:	99 0f       	add	r25, r25
     298:	99 0f       	add	r25, r25
     29a:	89 27       	eor	r24, r25
     29c:	84 a3       	std	Z+36, r24	; 0x24
     29e:	08 95       	ret

000002a0 <sboxnet_rb_write>:
     2a0:	fc 01       	movw	r30, r24
     2a2:	94 81       	ldd	r25, Z+4	; 0x04
     2a4:	27 81       	ldd	r18, Z+7	; 0x07
     2a6:	86 81       	ldd	r24, Z+6	; 0x06
     2a8:	89 0f       	add	r24, r25
     2aa:	82 17       	cp	r24, r18
     2ac:	88 f4       	brcc	.+34     	; 0x2d0 <sboxnet_rb_write+0x30>
     2ae:	9f 5f       	subi	r25, 0xFF	; 255
     2b0:	94 83       	std	Z+4, r25	; 0x04
     2b2:	83 81       	ldd	r24, Z+3	; 0x03
     2b4:	df 01       	movw	r26, r30
     2b6:	a8 0f       	add	r26, r24
     2b8:	b1 1d       	adc	r27, r1
     2ba:	18 96       	adiw	r26, 0x08	; 8
     2bc:	6c 93       	st	X, r22
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	82 17       	cp	r24, r18
     2c2:	18 f4       	brcc	.+6      	; 0x2ca <sboxnet_rb_write+0x2a>
     2c4:	83 83       	std	Z+3, r24	; 0x03
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	08 95       	ret
     2ca:	13 82       	std	Z+3, r1	; 0x03
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret
     2d0:	e6 e1       	ldi	r30, 0x16	; 22
     2d2:	f0 e2       	ldi	r31, 0x20	; 32
     2d4:	85 8d       	ldd	r24, Z+29	; 0x1d
     2d6:	84 60       	ori	r24, 0x04	; 4
     2d8:	85 8f       	std	Z+29, r24	; 0x1d
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret

000002de <sboxnet_rb_read_commit>:
     2de:	fc 01       	movw	r30, r24
     2e0:	96 81       	ldd	r25, Z+6	; 0x06
     2e2:	81 81       	ldd	r24, Z+1	; 0x01
     2e4:	98 17       	cp	r25, r24
     2e6:	40 f4       	brcc	.+16     	; 0x2f8 <sboxnet_rb_read_commit+0x1a>
     2e8:	a6 e1       	ldi	r26, 0x16	; 22
     2ea:	b0 e2       	ldi	r27, 0x20	; 32
     2ec:	5d 96       	adiw	r26, 0x1d	; 29
     2ee:	8c 91       	ld	r24, X
     2f0:	5d 97       	sbiw	r26, 0x1d	; 29
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	5d 96       	adiw	r26, 0x1d	; 29
     2f6:	8c 93       	st	X, r24
     2f8:	86 81       	ldd	r24, Z+6	; 0x06
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	89 1b       	sub	r24, r25
     2fe:	86 83       	std	Z+6, r24	; 0x06
     300:	11 82       	std	Z+1, r1	; 0x01
     302:	80 81       	ld	r24, Z
     304:	82 83       	std	Z+2, r24	; 0x02
     306:	08 95       	ret

00000308 <sboxnet_rb_read>:
     308:	fc 01       	movw	r30, r24
     30a:	81 81       	ldd	r24, Z+1	; 0x01
     30c:	96 81       	ldd	r25, Z+6	; 0x06
     30e:	89 17       	cp	r24, r25
     310:	78 f4       	brcc	.+30     	; 0x330 <sboxnet_rb_read+0x28>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	90 81       	ld	r25, Z
     318:	df 01       	movw	r26, r30
     31a:	a9 0f       	add	r26, r25
     31c:	b1 1d       	adc	r27, r1
     31e:	18 96       	adiw	r26, 0x08	; 8
     320:	8c 91       	ld	r24, X
     322:	9f 5f       	subi	r25, 0xFF	; 255
     324:	90 83       	st	Z, r25
     326:	27 81       	ldd	r18, Z+7	; 0x07
     328:	92 17       	cp	r25, r18
     32a:	40 f0       	brcs	.+16     	; 0x33c <sboxnet_rb_read+0x34>
     32c:	10 82       	st	Z, r1
     32e:	08 95       	ret
     330:	e6 e1       	ldi	r30, 0x16	; 22
     332:	f0 e2       	ldi	r31, 0x20	; 32
     334:	85 8d       	ldd	r24, Z+29	; 0x1d
     336:	82 60       	ori	r24, 0x02	; 2
     338:	85 8f       	std	Z+29, r24	; 0x1d
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	08 95       	ret

0000033e <sboxnet_all_sent>:
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <g_v+0xbf>
     344:	91 11       	cpse	r25, r1
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

0000034a <sboxnet_receiver_enable>:
     34a:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7ef8a3>
     34e:	8f 7c       	andi	r24, 0xCF	; 207
     350:	80 62       	ori	r24, 0x20	; 32
     352:	e0 ea       	ldi	r30, 0xA0	; 160
     354:	fa e0       	ldi	r31, 0x0A	; 10
     356:	83 83       	std	Z+3, r24	; 0x03
     358:	84 81       	ldd	r24, Z+4	; 0x04
     35a:	82 61       	ori	r24, 0x12	; 18
     35c:	84 83       	std	Z+4, r24	; 0x04
     35e:	08 95       	ret

00000360 <sboxnet_init>:
     360:	87 e5       	ldi	r24, 0x57	; 87
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	e2 e3       	ldi	r30, 0x32	; 50
     366:	f0 e2       	ldi	r31, 0x20	; 32
     368:	df 01       	movw	r26, r30
     36a:	9c 01       	movw	r18, r24
     36c:	1d 92       	st	X+, r1
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	30 40       	sbci	r19, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <sboxnet_init+0xc>
     374:	e6 e1       	ldi	r30, 0x16	; 22
     376:	f0 e2       	ldi	r31, 0x20	; 32
     378:	80 8d       	ldd	r24, Z+24	; 0x18
     37a:	84 a3       	std	Z+36, r24	; 0x24
     37c:	89 e1       	ldi	r24, 0x19	; 25
     37e:	86 8f       	std	Z+30, r24	; 0x1e
     380:	8c e8       	ldi	r24, 0x8C	; 140
     382:	84 a7       	std	Z+44, r24	; 0x2c
     384:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <g_v+0xc0>
     388:	e0 e8       	ldi	r30, 0x80	; 128
     38a:	f6 e0       	ldi	r31, 0x06	; 6
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	92 83       	std	Z+2, r25	; 0x02
     390:	82 89       	ldd	r24, Z+18	; 0x12
     392:	87 7c       	andi	r24, 0xC7	; 199
     394:	88 61       	ori	r24, 0x18	; 24
     396:	82 8b       	std	Z+18, r24	; 0x12
     398:	88 e0       	ldi	r24, 0x08	; 8
     39a:	85 83       	std	Z+5, r24	; 0x05
     39c:	81 83       	std	Z+1, r24	; 0x01
     39e:	a0 e0       	ldi	r26, 0x00	; 0
     3a0:	ba e0       	ldi	r27, 0x0A	; 10
     3a2:	11 96       	adiw	r26, 0x01	; 1
     3a4:	1c 92       	st	X, r1
     3a6:	11 97       	sbiw	r26, 0x01	; 1
     3a8:	13 96       	adiw	r26, 0x03	; 3
     3aa:	1c 92       	st	X, r1
     3ac:	13 97       	sbiw	r26, 0x03	; 3
     3ae:	14 96       	adiw	r26, 0x04	; 4
     3b0:	1c 92       	st	X, r1
     3b2:	14 97       	sbiw	r26, 0x04	; 4
     3b4:	22 e0       	ldi	r18, 0x02	; 2
     3b6:	16 96       	adiw	r26, 0x06	; 6
     3b8:	2c 93       	st	X, r18
     3ba:	16 97       	sbiw	r26, 0x06	; 6
     3bc:	17 96       	adiw	r26, 0x07	; 7
     3be:	1c 92       	st	X, r1
     3c0:	17 97       	sbiw	r26, 0x07	; 7
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	1c 96       	adiw	r26, 0x0c	; 12
     3c6:	8c 93       	st	X, r24
     3c8:	1c 97       	sbiw	r26, 0x0c	; 12
     3ca:	4f ef       	ldi	r20, 0xFF	; 255
     3cc:	5f e3       	ldi	r21, 0x3F	; 63
     3ce:	96 96       	adiw	r26, 0x26	; 38
     3d0:	4d 93       	st	X+, r20
     3d2:	5c 93       	st	X, r21
     3d4:	97 97       	sbiw	r26, 0x27	; 39
     3d6:	9c 93       	st	X, r25
     3d8:	81 85       	ldd	r24, Z+9	; 0x09
     3da:	8c 7f       	andi	r24, 0xFC	; 252
     3dc:	81 87       	std	Z+9, r24	; 0x09
     3de:	92 87       	std	Z+10, r25	; 0x0a
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	84 87       	std	Z+12, r24	; 0x0c
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	fa e0       	ldi	r31, 0x0A	; 10
     3e8:	17 82       	std	Z+7, r1	; 0x07
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	86 83       	std	Z+6, r24	; 0x06
     3ee:	80 e4       	ldi	r24, 0x40	; 64
     3f0:	81 83       	std	Z+1, r24	; 0x01
     3f2:	13 82       	std	Z+3, r1	; 0x03
     3f4:	24 83       	std	Z+4, r18	; 0x04
     3f6:	87 e2       	ldi	r24, 0x27	; 39
     3f8:	85 83       	std	Z+5, r24	; 0x05
     3fa:	84 81       	ldd	r24, Z+4	; 0x04
     3fc:	88 60       	ori	r24, 0x08	; 8
     3fe:	84 83       	std	Z+4, r24	; 0x04
     400:	0e 94 a5 01 	call	0x34a	; 0x34a <sboxnet_receiver_enable>
     404:	08 95       	ret

00000406 <sboxnet_set_timer>:
     406:	2f b7       	in	r18, 0x3f	; 63
     408:	f8 94       	cli
     40a:	e0 e0       	ldi	r30, 0x00	; 0
     40c:	fa e0       	ldi	r31, 0x0A	; 10
     40e:	40 a1       	ldd	r20, Z+32	; 0x20
     410:	51 a1       	ldd	r21, Z+33	; 0x21
     412:	84 0f       	add	r24, r20
     414:	95 1f       	adc	r25, r21
     416:	9f 73       	andi	r25, 0x3F	; 63
     418:	80 af       	std	Z+56, r24	; 0x38
     41a:	91 af       	std	Z+57, r25	; 0x39
     41c:	80 e1       	ldi	r24, 0x10	; 16
     41e:	84 87       	std	Z+12, r24	; 0x0c
     420:	87 81       	ldd	r24, Z+7	; 0x07
     422:	8c 7f       	andi	r24, 0xFC	; 252
     424:	82 60       	ori	r24, 0x02	; 2
     426:	87 83       	std	Z+7, r24	; 0x07
     428:	2f bf       	out	0x3f, r18	; 63
     42a:	08 95       	ret

0000042c <sboxnet_set_backoff_with_offset>:
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	20 93 8c 06 	sts	0x068C, r18	; 0x80068c <__TEXT_REGION_LENGTH__+0x7ef68c>
     432:	20 93 32 20 	sts	0x2032, r18	; 0x802032 <g_v+0x1c>
     436:	80 52       	subi	r24, 0x20	; 32
     438:	9e 4f       	sbci	r25, 0xFE	; 254
     43a:	0e 94 03 02 	call	0x406	; 0x406 <sboxnet_set_timer>
     43e:	08 95       	ret

00000440 <sboxnet_intr_usart_rx>:
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	1f 92       	push	r1
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	02 e3       	ldi	r16, 0x32	; 50
     458:	10 e2       	ldi	r17, 0x20	; 32
     45a:	e0 ea       	ldi	r30, 0xA0	; 160
     45c:	fa e0       	ldi	r31, 0x0A	; 10
     45e:	f1 80       	ldd	r15, Z+1	; 0x01
     460:	f9 82       	std	Y+1, r15	; 0x01
     462:	99 81       	ldd	r25, Y+1	; 0x01
     464:	e0 80       	ld	r14, Z
     466:	8f 2d       	mov	r24, r15
     468:	8c 71       	andi	r24, 0x1C	; 28
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	88 23       	and	r24, r24
     46e:	d1 f0       	breq	.+52     	; 0x4a4 <sboxnet_intr_usart_rx+0x64>
     470:	0e 94 29 01 	call	0x252	; 0x252 <sboxnet_debug_inc_recverrors>
     474:	f4 fe       	sbrs	r15, 4
     476:	08 c0       	rjmp	.+16     	; 0x488 <sboxnet_intr_usart_rx+0x48>
     478:	f8 01       	movw	r30, r16
     47a:	e7 5b       	subi	r30, 0xB7	; 183
     47c:	fe 4f       	sbci	r31, 0xFE	; 254
     47e:	80 81       	ld	r24, Z
     480:	91 81       	ldd	r25, Z+1	; 0x01
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	80 83       	st	Z, r24
     486:	91 83       	std	Z+1, r25	; 0x01
     488:	f3 fc       	sbrc	r15, 3
     48a:	0e 94 31 01 	call	0x262	; 0x262 <sboxnet_debug_inc_recverr_dor>
     48e:	f2 fe       	sbrs	r15, 2
     490:	98 c0       	rjmp	.+304    	; 0x5c2 <sboxnet_intr_usart_rx+0x182>
     492:	f8 01       	movw	r30, r16
     494:	e5 5b       	subi	r30, 0xB5	; 181
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 81       	ld	r24, Z
     49a:	91 81       	ldd	r25, Z+1	; 0x01
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	80 83       	st	Z, r24
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	8f c0       	rjmp	.+286    	; 0x5c2 <sboxnet_intr_usart_rx+0x182>
     4a4:	90 ff       	sbrs	r25, 0
     4a6:	36 c0       	rjmp	.+108    	; 0x514 <sboxnet_intr_usart_rx+0xd4>
     4a8:	f8 01       	movw	r30, r16
     4aa:	85 85       	ldd	r24, Z+13	; 0x0d
     4ac:	88 23       	and	r24, r24
     4ae:	69 f0       	breq	.+26     	; 0x4ca <sboxnet_intr_usart_rx+0x8a>
     4b0:	e1 5b       	subi	r30, 0xB1	; 177
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	80 83       	st	Z, r24
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	0e 94 29 01 	call	0x252	; 0x252 <sboxnet_debug_inc_recverrors>
     4c2:	f8 01       	movw	r30, r16
     4c4:	15 86       	std	Z+13, r1	; 0x0d
     4c6:	86 85       	ldd	r24, Z+14	; 0x0e
     4c8:	84 87       	std	Z+12, r24	; 0x0c
     4ca:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <g_v>
     4ce:	e8 16       	cp	r14, r24
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <sboxnet_intr_usart_rx+0x98>
     4d2:	ff ef       	ldi	r31, 0xFF	; 255
     4d4:	ef 12       	cpse	r14, r31
     4d6:	75 c0       	rjmp	.+234    	; 0x5c2 <sboxnet_intr_usart_rx+0x182>
     4d8:	e0 ea       	ldi	r30, 0xA0	; 160
     4da:	fa e0       	ldi	r31, 0x0A	; 10
     4dc:	84 81       	ldd	r24, Z+4	; 0x04
     4de:	8d 7f       	andi	r24, 0xFD	; 253
     4e0:	84 83       	std	Z+4, r24	; 0x04
     4e2:	68 01       	movw	r12, r16
     4e4:	89 e0       	ldi	r24, 0x09	; 9
     4e6:	c8 0e       	add	r12, r24
     4e8:	d1 1c       	adc	r13, r1
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	c6 01       	movw	r24, r12
     4ee:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     4f2:	88 23       	and	r24, r24
     4f4:	61 f0       	breq	.+24     	; 0x50e <sboxnet_intr_usart_rx+0xce>
     4f6:	6e 2d       	mov	r22, r14
     4f8:	c6 01       	movw	r24, r12
     4fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     4fe:	88 23       	and	r24, r24
     500:	31 f0       	breq	.+12     	; 0x50e <sboxnet_intr_usart_rx+0xce>
     502:	0e 94 39 01 	call	0x272	; 0x272 <sboxnet_debug_inc_recv_byte>
     506:	86 e0       	ldi	r24, 0x06	; 6
     508:	f8 01       	movw	r30, r16
     50a:	87 83       	std	Z+7, r24	; 0x07
     50c:	65 c0       	rjmp	.+202    	; 0x5d8 <sboxnet_intr_usart_rx+0x198>
     50e:	0e 94 31 01 	call	0x262	; 0x262 <sboxnet_debug_inc_recverr_dor>
     512:	55 c0       	rjmp	.+170    	; 0x5be <sboxnet_intr_usart_rx+0x17e>
     514:	f8 01       	movw	r30, r16
     516:	85 85       	ldd	r24, Z+13	; 0x0d
     518:	97 81       	ldd	r25, Z+7	; 0x07
     51a:	98 17       	cp	r25, r24
     51c:	40 f4       	brcc	.+16     	; 0x52e <sboxnet_intr_usart_rx+0xee>
     51e:	ef 5a       	subi	r30, 0xAF	; 175
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	80 81       	ld	r24, Z
     524:	91 81       	ldd	r25, Z+1	; 0x01
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	80 83       	st	Z, r24
     52a:	91 83       	std	Z+1, r25	; 0x01
     52c:	48 c0       	rjmp	.+144    	; 0x5be <sboxnet_intr_usart_rx+0x17e>
     52e:	84 30       	cpi	r24, 0x04	; 4
     530:	29 f4       	brne	.+10     	; 0x53c <sboxnet_intr_usart_rx+0xfc>
     532:	8e 2d       	mov	r24, r14
     534:	8f 73       	andi	r24, 0x3F	; 63
     536:	8a 5f       	subi	r24, 0xFA	; 250
     538:	f8 01       	movw	r30, r16
     53a:	87 83       	std	Z+7, r24	; 0x07
     53c:	6e 2d       	mov	r22, r14
     53e:	c8 01       	movw	r24, r16
     540:	09 96       	adiw	r24, 0x09	; 9
     542:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     546:	81 11       	cpse	r24, r1
     548:	03 c0       	rjmp	.+6      	; 0x550 <sboxnet_intr_usart_rx+0x110>
     54a:	0e 94 31 01 	call	0x262	; 0x262 <sboxnet_debug_inc_recverr_dor>
     54e:	37 c0       	rjmp	.+110    	; 0x5be <sboxnet_intr_usart_rx+0x17e>
     550:	0e 94 39 01 	call	0x272	; 0x272 <sboxnet_debug_inc_recv_byte>
     554:	f8 01       	movw	r30, r16
     556:	47 81       	ldd	r20, Z+7	; 0x07
     558:	25 85       	ldd	r18, Z+13	; 0x0d
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	84 2f       	mov	r24, r20
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	28 17       	cp	r18, r24
     564:	39 07       	cpc	r19, r25
     566:	c1 f5       	brne	.+112    	; 0x5d8 <sboxnet_intr_usart_rx+0x198>
     568:	86 85       	ldd	r24, Z+14	; 0x0e
     56a:	e8 0f       	add	r30, r24
     56c:	f1 1d       	adc	r31, r1
     56e:	41 8b       	std	Z+17, r20	; 0x11
     570:	f8 01       	movw	r30, r16
     572:	17 82       	std	Z+7, r1	; 0x07
     574:	e0 ea       	ldi	r30, 0xA0	; 160
     576:	fa e0       	ldi	r31, 0x0A	; 10
     578:	84 81       	ldd	r24, Z+4	; 0x04
     57a:	82 60       	ori	r24, 0x02	; 2
     57c:	84 83       	std	Z+4, r24	; 0x04
     57e:	f8 01       	movw	r30, r16
     580:	27 85       	ldd	r18, Z+15	; 0x0f
     582:	85 85       	ldd	r24, Z+13	; 0x0d
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 0f       	add	r24, r18
     588:	91 1d       	adc	r25, r1
     58a:	20 89       	ldd	r18, Z+16	; 0x10
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	2c f4       	brge	.+10     	; 0x59e <sboxnet_intr_usart_rx+0x15e>
     594:	e6 e1       	ldi	r30, 0x16	; 22
     596:	f0 e2       	ldi	r31, 0x20	; 32
     598:	85 8d       	ldd	r24, Z+29	; 0x1d
     59a:	84 60       	ori	r24, 0x04	; 4
     59c:	85 8f       	std	Z+29, r24	; 0x1d
     59e:	f8 01       	movw	r30, r16
     5a0:	97 85       	ldd	r25, Z+15	; 0x0f
     5a2:	85 85       	ldd	r24, Z+13	; 0x0d
     5a4:	89 0f       	add	r24, r25
     5a6:	87 87       	std	Z+15, r24	; 0x0f
     5a8:	15 86       	std	Z+13, r1	; 0x0d
     5aa:	84 85       	ldd	r24, Z+12	; 0x0c
     5ac:	86 87       	std	Z+14, r24	; 0x0e
     5ae:	e5 e6       	ldi	r30, 0x65	; 101
     5b0:	f1 e2       	ldi	r31, 0x21	; 33
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	80 83       	st	Z, r24
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <sboxnet_intr_usart_rx+0x198>
     5be:	0e 94 29 01 	call	0x252	; 0x252 <sboxnet_debug_inc_recverrors>
     5c2:	f8 01       	movw	r30, r16
     5c4:	17 82       	std	Z+7, r1	; 0x07
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	fa e0       	ldi	r31, 0x0A	; 10
     5ca:	84 81       	ldd	r24, Z+4	; 0x04
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	84 83       	std	Z+4, r24	; 0x04
     5d0:	f8 01       	movw	r30, r16
     5d2:	15 86       	std	Z+13, r1	; 0x0d
     5d4:	86 85       	ldd	r24, Z+14	; 0x0e
     5d6:	84 87       	std	Z+12, r24	; 0x0c
     5d8:	0f 90       	pop	r0
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	08 95       	ret

000005ec <sboxnet_check_try_transmit>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	c2 e3       	ldi	r28, 0x32	; 50
     5f2:	d0 e2       	ldi	r29, 0x20	; 32
     5f4:	8c 81       	ldd	r24, Y+4	; 0x04
     5f6:	81 11       	cpse	r24, r1
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <sboxnet_check_try_transmit+0x28>
     5fa:	fe 01       	movw	r30, r28
     5fc:	e3 56       	subi	r30, 0x63	; 99
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	86 81       	ldd	r24, Z+6	; 0x06
     602:	87 30       	cpi	r24, 0x07	; 7
     604:	00 f1       	brcs	.+64     	; 0x646 <sboxnet_check_try_transmit+0x5a>
     606:	1b 82       	std	Y+3, r1	; 0x03
     608:	cf 01       	movw	r24, r30
     60a:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     60e:	8c 83       	std	Y+4, r24	; 0x04
     610:	88 23       	and	r24, r24
     612:	c9 f0       	breq	.+50     	; 0x646 <sboxnet_check_try_transmit+0x5a>
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	81 11       	cpse	r24, r1
     618:	16 c0       	rjmp	.+44     	; 0x646 <sboxnet_check_try_transmit+0x5a>
     61a:	88 81       	ld	r24, Y
     61c:	81 11       	cpse	r24, r1
     61e:	13 c0       	rjmp	.+38     	; 0x646 <sboxnet_check_try_transmit+0x5a>
     620:	0e 94 41 01 	call	0x282	; 0x282 <sboxnet_prandom>
     624:	2a 81       	ldd	r18, Y+2	; 0x02
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	28 5f       	subi	r18, 0xF8	; 248
     62a:	3f 4f       	sbci	r19, 0xFF	; 255
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	8f 77       	andi	r24, 0x7F	; 127
     63a:	a9 01       	movw	r20, r18
     63c:	48 0f       	add	r20, r24
     63e:	51 1d       	adc	r21, r1
     640:	ca 01       	movw	r24, r20
     642:	0e 94 16 02 	call	0x42c	; 0x42c <sboxnet_set_backoff_with_offset>
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <sboxnet_intr_usart_tx>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	c2 e3       	ldi	r28, 0x32	; 50
     656:	d0 e2       	ldi	r29, 0x20	; 32
     658:	e0 ea       	ldi	r30, 0xA0	; 160
     65a:	fa e0       	ldi	r31, 0x0A	; 10
     65c:	81 81       	ldd	r24, Z+1	; 0x01
     65e:	48 2f       	mov	r20, r24
     660:	44 71       	andi	r20, 0x14	; 20
     662:	30 81       	ld	r19, Z
     664:	2d 81       	ldd	r18, Y+5	; 0x05
     666:	88 23       	and	r24, r24
     668:	2c f4       	brge	.+10     	; 0x674 <sboxnet_intr_usart_tx+0x28>
     66a:	41 11       	cpse	r20, r1
     66c:	0d c0       	rjmp	.+26     	; 0x688 <sboxnet_intr_usart_tx+0x3c>
     66e:	32 13       	cpse	r19, r18
     670:	13 c0       	rjmp	.+38     	; 0x698 <sboxnet_intr_usart_tx+0x4c>
     672:	65 c0       	rjmp	.+202    	; 0x73e <sboxnet_intr_usart_tx+0xf2>
     674:	fe 01       	movw	r30, r28
     676:	e1 5c       	subi	r30, 0xC1	; 193
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	80 83       	st	Z, r24
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	44 23       	and	r20, r20
     686:	41 f0       	breq	.+16     	; 0x698 <sboxnet_intr_usart_tx+0x4c>
     688:	fe 01       	movw	r30, r28
     68a:	ef 5b       	subi	r30, 0xBF	; 191
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	80 83       	st	Z, r24
     696:	91 83       	std	Z+1, r25	; 0x01
     698:	32 17       	cp	r19, r18
     69a:	41 f0       	breq	.+16     	; 0x6ac <sboxnet_intr_usart_tx+0x60>
     69c:	fe 01       	movw	r30, r28
     69e:	ed 5b       	subi	r30, 0xBD	; 189
     6a0:	fe 4f       	sbci	r31, 0xFE	; 254
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	88 e0       	ldi	r24, 0x08	; 8
     6ae:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x7ef686>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	88 83       	st	Y, r24
     6b6:	fe 01       	movw	r30, r28
     6b8:	e3 5c       	subi	r30, 0xC3	; 195
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	80 81       	ld	r24, Z
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	80 83       	st	Z, r24
     6c4:	91 83       	std	Z+1, r25	; 0x01
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	81 11       	cpse	r24, r1
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <sboxnet_intr_usart_tx+0x8a>
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	98 17       	cp	r25, r24
     6d2:	88 f0       	brcs	.+34     	; 0x6f6 <sboxnet_intr_usart_tx+0xaa>
     6d4:	1c c0       	rjmp	.+56     	; 0x70e <sboxnet_intr_usart_tx+0xc2>
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	8a 83       	std	Y+2, r24	; 0x02
     6da:	fe 01       	movw	r30, r28
     6dc:	e3 56       	subi	r30, 0x63	; 99
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	11 82       	std	Z+1, r1	; 0x01
     6e2:	82 81       	ldd	r24, Z+2	; 0x02
     6e4:	80 83       	st	Z, r24
     6e6:	e8 55       	subi	r30, 0x58	; 88
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	80 83       	st	Z, r24
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	1d c0       	rjmp	.+58     	; 0x730 <sboxnet_intr_usart_tx+0xe4>
     6f6:	8e 01       	movw	r16, r28
     6f8:	03 56       	subi	r16, 0x63	; 99
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	c8 01       	movw	r24, r16
     6fe:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	89 17       	cp	r24, r25
     70c:	b8 f3       	brcs	.-18     	; 0x6fc <sboxnet_intr_usart_tx+0xb0>
     70e:	1c 82       	std	Y+4, r1	; 0x04
     710:	1b 82       	std	Y+3, r1	; 0x03
     712:	89 e1       	ldi	r24, 0x19	; 25
     714:	8a 83       	std	Y+2, r24	; 0x02
     716:	ce 01       	movw	r24, r28
     718:	83 56       	subi	r24, 0x63	; 99
     71a:	9f 4f       	sbci	r25, 0xFF	; 255
     71c:	0e 94 6f 01 	call	0x2de	; 0x2de <sboxnet_rb_read_commit>
     720:	fe 01       	movw	r30, r28
     722:	eb 5a       	subi	r30, 0xAB	; 171
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	80 81       	ld	r24, Z
     728:	91 81       	ldd	r25, Z+1	; 0x01
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	80 83       	st	Z, r24
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	1c 82       	std	Y+4, r1	; 0x04
     732:	1b 82       	std	Y+3, r1	; 0x03
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0e 94 03 02 	call	0x406	; 0x406 <sboxnet_set_timer>
     73c:	43 c0       	rjmp	.+134    	; 0x7c4 <sboxnet_intr_usart_tx+0x178>
     73e:	e0 ea       	ldi	r30, 0xA0	; 160
     740:	fa e0       	ldi	r31, 0x0A	; 10
     742:	84 81       	ldd	r24, Z+4	; 0x04
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	84 83       	std	Z+4, r24	; 0x04
     748:	83 81       	ldd	r24, Z+3	; 0x03
     74a:	8f 7c       	andi	r24, 0xCF	; 207
     74c:	83 83       	std	Z+3, r24	; 0x03
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	80 61       	ori	r24, 0x10	; 16
     752:	84 83       	std	Z+4, r24	; 0x04
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	8c 81       	ldd	r24, Y+4	; 0x04
     758:	98 17       	cp	r25, r24
     75a:	80 f4       	brcc	.+32     	; 0x77c <sboxnet_intr_usart_tx+0x130>
     75c:	ce 01       	movw	r24, r28
     75e:	83 56       	subi	r24, 0x63	; 99
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	9f 5f       	subi	r25, 0xFF	; 255
     76a:	9b 83       	std	Y+3, r25	; 0x03
     76c:	8d 83       	std	Y+5, r24	; 0x05
     76e:	e0 ea       	ldi	r30, 0xA0	; 160
     770:	fa e0       	ldi	r31, 0x0A	; 10
     772:	94 81       	ldd	r25, Z+4	; 0x04
     774:	9e 7f       	andi	r25, 0xFE	; 254
     776:	94 83       	std	Z+4, r25	; 0x04
     778:	80 83       	st	Z, r24
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <sboxnet_intr_usart_tx+0x16a>
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	fa e0       	ldi	r31, 0x0A	; 10
     780:	83 81       	ldd	r24, Z+3	; 0x03
     782:	83 7f       	andi	r24, 0xF3	; 243
     784:	83 83       	std	Z+3, r24	; 0x03
     786:	1c 82       	std	Y+4, r1	; 0x04
     788:	1b 82       	std	Y+3, r1	; 0x03
     78a:	ce 01       	movw	r24, r28
     78c:	83 56       	subi	r24, 0x63	; 99
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	0e 94 6f 01 	call	0x2de	; 0x2de <sboxnet_rb_read_commit>
     794:	ed e6       	ldi	r30, 0x6D	; 109
     796:	f1 e2       	ldi	r31, 0x21	; 33
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	80 83       	st	Z, r24
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	0e 94 a5 01 	call	0x34a	; 0x34a <sboxnet_receiver_enable>
     7a6:	88 81       	ld	r24, Y
     7a8:	83 30       	cpi	r24, 0x03	; 3
     7aa:	09 f4       	brne	.+2      	; 0x7ae <sboxnet_intr_usart_tx+0x162>
     7ac:	18 82       	st	Y, r1
     7ae:	89 e1       	ldi	r24, 0x19	; 25
     7b0:	8a 83       	std	Y+2, r24	; 0x02
     7b2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <sboxnet_check_try_transmit>
     7b6:	c9 5c       	subi	r28, 0xC9	; 201
     7b8:	de 4f       	sbci	r29, 0xFE	; 254
     7ba:	88 81       	ld	r24, Y
     7bc:	99 81       	ldd	r25, Y+1	; 0x01
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	88 83       	st	Y, r24
     7c2:	99 83       	std	Y+1, r25	; 0x01
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <__vector_58>:
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	0b b6       	in	r0, 0x3b	; 59
     7da:	0f 92       	push	r0
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
     7f4:	0e 94 20 02 	call	0x440	; 0x440 <sboxnet_intr_usart_rx>
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0b be       	out	0x3b, r0	; 59
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_60>:
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	0b b6       	in	r0, 0x3b	; 59
     82a:	0f 92       	push	r0
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	0e 94 26 03 	call	0x64c	; 0x64c <sboxnet_intr_usart_tx>
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0b be       	out	0x3b, r0	; 59
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <sboxnet_timer_bit>:
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	1f 92       	push	r1
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	e0 e0       	ldi	r30, 0x00	; 0
     87e:	fa e0       	ldi	r31, 0x0A	; 10
     880:	87 81       	ldd	r24, Z+7	; 0x07
     882:	8c 7f       	andi	r24, 0xFC	; 252
     884:	87 83       	std	Z+7, r24	; 0x07
     886:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <g_v+0x1c>
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f0       	breq	.+2      	; 0x892 <sboxnet_timer_bit+0x24>
     890:	61 c0       	rjmp	.+194    	; 0x954 <sboxnet_timer_bit+0xe6>
     892:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <g_v+0x20>
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <sboxnet_timer_bit+0x2e>
     89a:	59 c0       	rjmp	.+178    	; 0x94e <sboxnet_timer_bit+0xe0>
     89c:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <g_v+0x1f>
     8a0:	81 11       	cpse	r24, r1
     8a2:	55 c0       	rjmp	.+170    	; 0x94e <sboxnet_timer_bit+0xe0>
     8a4:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <g_v+0xbf>
     8a8:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <g_v+0xba>
     8ac:	89 17       	cp	r24, r25
     8ae:	38 f4       	brcc	.+14     	; 0x8be <sboxnet_timer_bit+0x50>
     8b0:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <g_v+0xb9>
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	e1 53       	subi	r30, 0x31	; 49
     8b8:	ff 4d       	sbci	r31, 0xDF	; 223
     8ba:	10 85       	ldd	r17, Z+8	; 0x08
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <sboxnet_timer_bit+0x5c>
     8be:	e6 e1       	ldi	r30, 0x16	; 22
     8c0:	f0 e2       	ldi	r31, 0x20	; 32
     8c2:	85 8d       	ldd	r24, Z+29	; 0x1d
     8c4:	82 60       	ori	r24, 0x02	; 2
     8c6:	85 8f       	std	Z+29, r24	; 0x1d
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	88 e0       	ldi	r24, 0x08	; 8
     8cc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7ef685>
     8d0:	e0 ea       	ldi	r30, 0xA0	; 160
     8d2:	fa e0       	ldi	r31, 0x0A	; 10
     8d4:	84 81       	ldd	r24, Z+4	; 0x04
     8d6:	89 60       	ori	r24, 0x09	; 9
     8d8:	84 83       	std	Z+4, r24	; 0x04
     8da:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__TEXT_REGION_LENGTH__+0x7ef68c>
     8de:	80 fd       	sbrc	r24, 0
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <sboxnet_timer_bit+0x7c>
     8e2:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7ef688>
     8e6:	82 fd       	sbrc	r24, 2
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <sboxnet_timer_bit+0xa2>
     8ea:	0e 94 41 01 	call	0x282	; 0x282 <sboxnet_prandom>
     8ee:	20 91 34 20 	lds	r18, 0x2034	; 0x802034 <g_v+0x1e>
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	22 0f       	add	r18, r18
     8fa:	33 1f       	adc	r19, r19
     8fc:	22 0f       	add	r18, r18
     8fe:	33 1f       	adc	r19, r19
     900:	8f 77       	andi	r24, 0x7F	; 127
     902:	a9 01       	movw	r20, r18
     904:	48 0f       	add	r20, r24
     906:	51 1d       	adc	r21, r1
     908:	ca 01       	movw	r24, r20
     90a:	0e 94 16 02 	call	0x42c	; 0x42c <sboxnet_set_backoff_with_offset>
     90e:	4c c0       	rjmp	.+152    	; 0x9a8 <sboxnet_timer_bit+0x13a>
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	fa e0       	ldi	r31, 0x0A	; 10
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	8f 7e       	andi	r24, 0xEF	; 239
     918:	84 83       	std	Z+4, r24	; 0x04
     91a:	83 81       	ldd	r24, Z+3	; 0x03
     91c:	83 7c       	andi	r24, 0xC3	; 195
     91e:	83 83       	std	Z+3, r24	; 0x03
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	80 61       	ori	r24, 0x10	; 16
     924:	84 83       	std	Z+4, r24	; 0x04
     926:	83 81       	ldd	r24, Z+3	; 0x03
     928:	88 60       	ori	r24, 0x08	; 8
     92a:	83 83       	std	Z+3, r24	; 0x03
     92c:	10 83       	st	Z, r17
     92e:	84 81       	ldd	r24, Z+4	; 0x04
     930:	8d 7f       	andi	r24, 0xFD	; 253
     932:	84 83       	std	Z+4, r24	; 0x04
     934:	8f ec       	ldi	r24, 0xCF	; 207
     936:	90 e2       	ldi	r25, 0x20	; 32
     938:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     93c:	e6 e1       	ldi	r30, 0x16	; 22
     93e:	f0 e2       	ldi	r31, 0x20	; 32
     940:	11 a3       	std	Z+33, r17	; 0x21
     942:	87 8d       	ldd	r24, Z+31	; 0x1f
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	87 8f       	std	Z+31, r24	; 0x1f
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	84 8f       	std	Z+28, r24	; 0x1c
     94c:	2d c0       	rjmp	.+90     	; 0x9a8 <sboxnet_timer_bit+0x13a>
     94e:	10 92 32 20 	sts	0x2032, r1	; 0x802032 <g_v+0x1c>
     952:	2a c0       	rjmp	.+84     	; 0x9a8 <sboxnet_timer_bit+0x13a>
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	81 f4       	brne	.+32     	; 0x978 <sboxnet_timer_bit+0x10a>
     958:	00 e8       	ldi	r16, 0x80	; 128
     95a:	16 e0       	ldi	r17, 0x06	; 6
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	f8 01       	movw	r30, r16
     960:	85 83       	std	Z+5, r24	; 0x05
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <g_v+0x1c>
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 03 02 	call	0x406	; 0x406 <sboxnet_set_timer>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	f8 01       	movw	r30, r16
     974:	84 87       	std	Z+12, r24	; 0x0c
     976:	18 c0       	rjmp	.+48     	; 0x9a8 <sboxnet_timer_bit+0x13a>
     978:	84 30       	cpi	r24, 0x04	; 4
     97a:	b1 f4       	brne	.+44     	; 0x9a8 <sboxnet_timer_bit+0x13a>
     97c:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__TEXT_REGION_LENGTH__+0x7ef68c>
     980:	80 fd       	sbrc	r24, 0
     982:	0b c0       	rjmp	.+22     	; 0x99a <sboxnet_timer_bit+0x12c>
     984:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7ef688>
     988:	82 ff       	sbrs	r24, 2
     98a:	07 c0       	rjmp	.+14     	; 0x99a <sboxnet_timer_bit+0x12c>
     98c:	0e 94 a5 01 	call	0x34a	; 0x34a <sboxnet_receiver_enable>
     990:	10 92 32 20 	sts	0x2032, r1	; 0x802032 <g_v+0x1c>
     994:	0e 94 f6 02 	call	0x5ec	; 0x5ec <sboxnet_check_try_transmit>
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <sboxnet_timer_bit+0x13a>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <__TEXT_REGION_LENGTH__+0x7ef68c>
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 03 02 	call	0x406	; 0x406 <sboxnet_set_timer>
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <sboxnet_receive_msg>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ac 01       	movw	r20, r24
     9c4:	66 30       	cpi	r22, 0x06	; 6
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <sboxnet_receive_msg+0x16>
     9c8:	73 c0       	rjmp	.+230    	; 0xab0 <sboxnet_receive_msg+0xfc>
     9ca:	9f b7       	in	r25, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	e6 e1       	ldi	r30, 0x16	; 22
     9d0:	f0 e2       	ldi	r31, 0x20	; 32
     9d2:	33 a5       	ldd	r19, Z+43	; 0x2b
     9d4:	26 a1       	ldd	r18, Z+38	; 0x26
     9d6:	83 2f       	mov	r24, r19
     9d8:	82 1b       	sub	r24, r18
     9da:	87 30       	cpi	r24, 0x07	; 7
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <sboxnet_receive_msg+0x2c>
     9de:	72 c0       	rjmp	.+228    	; 0xac4 <sboxnet_receive_msg+0x110>
     9e0:	23 17       	cp	r18, r19
     9e2:	38 f4       	brcc	.+14     	; 0x9f2 <sboxnet_receive_msg+0x3e>
     9e4:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <g_v+0x25>
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ea 5e       	subi	r30, 0xEA	; 234
     9ec:	ff 4d       	sbci	r31, 0xDF	; 223
     9ee:	c5 a5       	ldd	r28, Z+45	; 0x2d
     9f0:	6a c0       	rjmp	.+212    	; 0xac6 <sboxnet_receive_msg+0x112>
     9f2:	e6 e1       	ldi	r30, 0x16	; 22
     9f4:	f0 e2       	ldi	r31, 0x20	; 32
     9f6:	25 8d       	ldd	r18, Z+29	; 0x1d
     9f8:	22 60       	ori	r18, 0x02	; 2
     9fa:	25 8f       	std	Z+29, r18	; 0x1d
     9fc:	c0 e0       	ldi	r28, 0x00	; 0
     9fe:	63 c0       	rjmp	.+198    	; 0xac6 <sboxnet_receive_msg+0x112>
     a00:	ec 2f       	mov	r30, r28
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	31 96       	adiw	r30, 0x01	; 1
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	2e 17       	cp	r18, r30
     a0c:	3f 07       	cpc	r19, r31
     a0e:	0c f4       	brge	.+2      	; 0xa12 <sboxnet_receive_msg+0x5e>
     a10:	51 c0       	rjmp	.+162    	; 0xab4 <sboxnet_receive_msg+0x100>
     a12:	6c 17       	cp	r22, r28
     a14:	08 f4       	brcc	.+2      	; 0xa18 <sboxnet_receive_msg+0x64>
     a16:	50 c0       	rjmp	.+160    	; 0xab8 <sboxnet_receive_msg+0x104>
     a18:	c6 34       	cpi	r28, 0x46	; 70
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <sboxnet_receive_msg+0x6a>
     a1c:	4f c0       	rjmp	.+158    	; 0xabc <sboxnet_receive_msg+0x108>
     a1e:	8a 01       	movw	r16, r20
     a20:	df b7       	in	r29, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	8b e3       	ldi	r24, 0x3B	; 59
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     a2c:	df bf       	out	0x3f, r29	; 63
     a2e:	cc 23       	and	r28, r28
     a30:	09 f1       	breq	.+66     	; 0xa74 <sboxnet_receive_msg+0xc0>
     a32:	78 01       	movw	r14, r16
     a34:	4f ef       	ldi	r20, 0xFF	; 255
     a36:	4c 0f       	add	r20, r28
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	4f 5f       	subi	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 0f       	add	r16, r20
     a40:	15 1f       	adc	r17, r21
     a42:	df ef       	ldi	r29, 0xFF	; 255
     a44:	df b6       	in	r13, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	8b e3       	ldi	r24, 0x3B	; 59
     a4a:	90 e2       	ldi	r25, 0x20	; 32
     a4c:	0e 94 84 01 	call	0x308	; 0x308 <sboxnet_rb_read>
     a50:	df be       	out	0x3f, r13	; 63
     a52:	9d 2f       	mov	r25, r29
     a54:	98 27       	eor	r25, r24
     a56:	28 e0       	ldi	r18, 0x08	; 8
     a58:	3c e8       	ldi	r19, 0x8C	; 140
     a5a:	96 95       	lsr	r25
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <sboxnet_receive_msg+0xac>
     a5e:	93 27       	eor	r25, r19
     a60:	2a 95       	dec	r18
     a62:	d9 f7       	brne	.-10     	; 0xa5a <sboxnet_receive_msg+0xa6>
     a64:	d9 2f       	mov	r29, r25
     a66:	f7 01       	movw	r30, r14
     a68:	81 93       	st	Z+, r24
     a6a:	7f 01       	movw	r14, r30
     a6c:	0e 17       	cp	r16, r30
     a6e:	1f 07       	cpc	r17, r31
     a70:	49 f7       	brne	.-46     	; 0xa44 <sboxnet_receive_msg+0x90>
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <sboxnet_receive_msg+0xc2>
     a74:	df ef       	ldi	r29, 0xFF	; 255
     a76:	1f b7       	in	r17, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	8b e3       	ldi	r24, 0x3B	; 59
     a7c:	90 e2       	ldi	r25, 0x20	; 32
     a7e:	0e 94 6f 01 	call	0x2de	; 0x2de <sboxnet_rb_read_commit>
     a82:	1f bf       	out	0x3f, r17	; 63
     a84:	dd 23       	and	r29, r29
     a86:	59 f0       	breq	.+22     	; 0xa9e <sboxnet_receive_msg+0xea>
     a88:	0e 94 29 01 	call	0x252	; 0x252 <sboxnet_debug_inc_recverrors>
     a8c:	e5 e8       	ldi	r30, 0x85	; 133
     a8e:	f1 e2       	ldi	r31, 0x21	; 33
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	8e ef       	ldi	r24, 0xFE	; 254
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <sboxnet_receive_msg+0x11c>
     a9e:	e7 e6       	ldi	r30, 0x67	; 103
     aa0:	f1 e2       	ldi	r31, 0x21	; 33
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	80 83       	st	Z, r24
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	8c 2f       	mov	r24, r28
     aae:	10 c0       	rjmp	.+32     	; 0xad0 <sboxnet_receive_msg+0x11c>
     ab0:	8d ef       	ldi	r24, 0xFD	; 253
     ab2:	0e c0       	rjmp	.+28     	; 0xad0 <sboxnet_receive_msg+0x11c>
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	0c c0       	rjmp	.+24     	; 0xad0 <sboxnet_receive_msg+0x11c>
     ab8:	8d ef       	ldi	r24, 0xFD	; 253
     aba:	0a c0       	rjmp	.+20     	; 0xad0 <sboxnet_receive_msg+0x11c>
     abc:	8c ef       	ldi	r24, 0xFC	; 252
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <sboxnet_receive_msg+0x11c>
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <sboxnet_receive_msg+0x11c>
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	9f bf       	out	0x3f, r25	; 63
     ac8:	c6 30       	cpi	r28, 0x06	; 6
     aca:	08 f0       	brcs	.+2      	; 0xace <sboxnet_receive_msg+0x11a>
     acc:	99 cf       	rjmp	.-206    	; 0xa00 <sboxnet_receive_msg+0x4c>
     ace:	f8 cf       	rjmp	.-16     	; 0xac0 <sboxnet_receive_msg+0x10c>
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	08 95       	ret

00000ae0 <sboxnet_send_msg>:
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	fc 01       	movw	r30, r24
     af4:	03 81       	ldd	r16, Z+3	; 0x03
     af6:	0f 73       	andi	r16, 0x3F	; 63
     af8:	0a 5f       	subi	r16, 0xFA	; 250
     afa:	8f b7       	in	r24, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <g_v+0xc0>
     b02:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <g_v+0xbf>
     b06:	92 1b       	sub	r25, r18
     b08:	20 91 d3 20 	lds	r18, 0x20D3	; 0x8020d3 <g_v+0xbd>
     b0c:	92 1b       	sub	r25, r18
     b0e:	8f bf       	out	0x3f, r24	; 63
     b10:	09 17       	cp	r16, r25
     b12:	38 f0       	brcs	.+14     	; 0xb22 <sboxnet_send_msg+0x42>
     b14:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <g_dev_errflags>
     b18:	82 60       	ori	r24, 0x02	; 2
     b1a:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <g_dev_errflags>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	80 c0       	rjmp	.+256    	; 0xc22 <sboxnet_send_msg+0x142>
     b22:	7f 01       	movw	r14, r30
     b24:	cf b7       	in	r28, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	60 2f       	mov	r22, r16
     b2a:	8f ec       	ldi	r24, 0xCF	; 207
     b2c:	90 e2       	ldi	r25, 0x20	; 32
     b2e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     b32:	cf bf       	out	0x3f, r28	; 63
     b34:	88 23       	and	r24, r24
     b36:	09 f4       	brne	.+2      	; 0xb3a <sboxnet_send_msg+0x5a>
     b38:	3e c0       	rjmp	.+124    	; 0xbb6 <sboxnet_send_msg+0xd6>
     b3a:	10 e0       	ldi	r17, 0x00	; 0
     b3c:	01 50       	subi	r16, 0x01	; 1
     b3e:	11 09       	sbc	r17, r1
     b40:	10 16       	cp	r1, r16
     b42:	11 06       	cpc	r1, r17
     b44:	64 f5       	brge	.+88     	; 0xb9e <sboxnet_send_msg+0xbe>
     b46:	b1 2c       	mov	r11, r1
     b48:	cf ef       	ldi	r28, 0xFF	; 255
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f6 e1       	ldi	r31, 0x16	; 22
     b4e:	cf 2e       	mov	r12, r31
     b50:	f0 e2       	ldi	r31, 0x20	; 32
     b52:	df 2e       	mov	r13, r31
     b54:	f0 2d       	mov	r31, r0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	b8 12       	cpse	r11, r24
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <sboxnet_send_msg+0x82>
     b5c:	f6 01       	movw	r30, r12
     b5e:	60 81       	ld	r22, Z
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <sboxnet_send_msg+0x8a>
     b62:	f7 01       	movw	r30, r14
     b64:	eb 0d       	add	r30, r11
     b66:	f1 1d       	adc	r31, r1
     b68:	60 81       	ld	r22, Z
     b6a:	9c 2f       	mov	r25, r28
     b6c:	96 27       	eor	r25, r22
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	2c e8       	ldi	r18, 0x8C	; 140
     b72:	96 95       	lsr	r25
     b74:	08 f4       	brcc	.+2      	; 0xb78 <sboxnet_send_msg+0x98>
     b76:	92 27       	eor	r25, r18
     b78:	8a 95       	dec	r24
     b7a:	d9 f7       	brne	.-10     	; 0xb72 <sboxnet_send_msg+0x92>
     b7c:	c9 2f       	mov	r28, r25
     b7e:	df b7       	in	r29, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	8f ec       	ldi	r24, 0xCF	; 207
     b84:	90 e2       	ldi	r25, 0x20	; 32
     b86:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     b8a:	df bf       	out	0x3f, r29	; 63
     b8c:	88 23       	and	r24, r24
     b8e:	a9 f0       	breq	.+42     	; 0xbba <sboxnet_send_msg+0xda>
     b90:	b3 94       	inc	r11
     b92:	8b 2d       	mov	r24, r11
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	80 17       	cp	r24, r16
     b98:	91 07       	cpc	r25, r17
     b9a:	ec f2       	brlt	.-70     	; 0xb56 <sboxnet_send_msg+0x76>
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <sboxnet_send_msg+0xc0>
     b9e:	cf ef       	ldi	r28, 0xFF	; 255
     ba0:	df b7       	in	r29, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	6c 2f       	mov	r22, r28
     ba6:	8f ec       	ldi	r24, 0xCF	; 207
     ba8:	90 e2       	ldi	r25, 0x20	; 32
     baa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <sboxnet_rb_write>
     bae:	df bf       	out	0x3f, r29	; 63
     bb0:	81 11       	cpse	r24, r1
     bb2:	0e c0       	rjmp	.+28     	; 0xbd0 <sboxnet_send_msg+0xf0>
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <sboxnet_send_msg+0xdc>
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <sboxnet_send_msg+0xdc>
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	9f b7       	in	r25, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <g_v+0xbd>
     bc4:	20 91 d4 20 	lds	r18, 0x20D4	; 0x8020d4 <g_v+0xbe>
     bc8:	20 93 d2 20 	sts	0x20D2, r18	; 0x8020d2 <g_v+0xbc>
     bcc:	9f bf       	out	0x3f, r25	; 63
     bce:	29 c0       	rjmp	.+82     	; 0xc22 <sboxnet_send_msg+0x142>
     bd0:	cf b7       	in	r28, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	80 91 d5 20 	lds	r24, 0x20D5	; 0x8020d5 <g_v+0xbf>
     bd8:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <g_v+0xbd>
     bdc:	48 2f       	mov	r20, r24
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	49 0f       	add	r20, r25
     be2:	51 1d       	adc	r21, r1
     be4:	20 91 d6 20 	lds	r18, 0x20D6	; 0x8020d6 <g_v+0xc0>
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	24 17       	cp	r18, r20
     bec:	35 07       	cpc	r19, r21
     bee:	2c f4       	brge	.+10     	; 0xbfa <sboxnet_send_msg+0x11a>
     bf0:	e6 e1       	ldi	r30, 0x16	; 22
     bf2:	f0 e2       	ldi	r31, 0x20	; 32
     bf4:	25 8d       	ldd	r18, Z+29	; 0x1d
     bf6:	24 60       	ori	r18, 0x04	; 4
     bf8:	25 8f       	std	Z+29, r18	; 0x1d
     bfa:	89 0f       	add	r24, r25
     bfc:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <g_v+0xbf>
     c00:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <g_v+0xbd>
     c04:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <g_v+0xbc>
     c08:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <g_v+0xbe>
     c0c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <sboxnet_check_try_transmit>
     c10:	cf bf       	out	0x3f, r28	; 63
     c12:	eb e6       	ldi	r30, 0x6B	; 107
     c14:	f1 e2       	ldi	r31, 0x21	; 33
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	80 83       	st	Z, r24
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	08 95       	ret

00000c36 <sboxnet_can_send_msg>:
     c36:	fc 01       	movw	r30, r24
     c38:	23 81       	ldd	r18, Z+3	; 0x03
     c3a:	2f 73       	andi	r18, 0x3F	; 63
     c3c:	2a 5f       	subi	r18, 0xFA	; 250
     c3e:	8f b7       	in	r24, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	90 91 d6 20 	lds	r25, 0x20D6	; 0x8020d6 <g_v+0xc0>
     c46:	30 91 d5 20 	lds	r19, 0x20D5	; 0x8020d5 <g_v+0xbf>
     c4a:	93 1b       	sub	r25, r19
     c4c:	30 91 d3 20 	lds	r19, 0x20D3	; 0x8020d3 <g_v+0xbd>
     c50:	93 1b       	sub	r25, r19
     c52:	8f bf       	out	0x3f, r24	; 63
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	29 17       	cp	r18, r25
     c58:	08 f0       	brcs	.+2      	; 0xc5c <sboxnet_can_send_msg+0x26>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret

00000c5e <com_process_cmd_reset>:
     c5e:	9f b7       	in	r25, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <g_v>
     c68:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
     c6c:	88 60       	ori	r24, 0x08	; 8
     c6e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
     c72:	9f bf       	out	0x3f, r25	; 63
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	08 95       	ret

00000c78 <com_reg_read>:
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	86 3d       	cpi	r24, 0xD6	; 214
     c82:	27 e0       	ldi	r18, 0x07	; 7
     c84:	92 07       	cpc	r25, r18
     c86:	81 f0       	breq	.+32     	; 0xca8 <com_reg_read+0x30>
     c88:	87 3d       	cpi	r24, 0xD7	; 215
     c8a:	a7 e0       	ldi	r26, 0x07	; 7
     c8c:	9a 07       	cpc	r25, r26
     c8e:	59 f5       	brne	.+86     	; 0xce6 <com_reg_read+0x6e>
     c90:	89 e8       	ldi	r24, 0x89	; 137
     c92:	91 e2       	ldi	r25, 0x21	; 33
     c94:	8e 3f       	cpi	r24, 0xFE	; 254
     c96:	9f 42       	sbci	r25, 0x2F	; 47
     c98:	d0 f4       	brcc	.+52     	; 0xcce <com_reg_read+0x56>
     c9a:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <__bss_end>
     c9e:	81 11       	cpse	r24, r1
     ca0:	19 c0       	rjmp	.+50     	; 0xcd4 <com_reg_read+0x5c>
     ca2:	8a e8       	ldi	r24, 0x8A	; 138
     ca4:	91 e2       	ldi	r25, 0x21	; 33
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <com_reg_read+0x4a>
     ca8:	8e ef       	ldi	r24, 0xFE	; 254
     caa:	9f e2       	ldi	r25, 0x2F	; 47
     cac:	89 58       	subi	r24, 0x89	; 137
     cae:	91 42       	sbci	r25, 0x21	; 33
     cb0:	fb 01       	movw	r30, r22
     cb2:	80 83       	st	Z, r24
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	46 c0       	rjmp	.+140    	; 0xd46 <com_reg_read+0xce>
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	20 81       	ld	r18, Z
     cbe:	21 11       	cpse	r18, r1
     cc0:	0b c0       	rjmp	.+22     	; 0xcd8 <com_reg_read+0x60>
     cc2:	fc 01       	movw	r30, r24
     cc4:	8e 3f       	cpi	r24, 0xFE	; 254
     cc6:	2f e2       	ldi	r18, 0x2F	; 47
     cc8:	92 07       	cpc	r25, r18
     cca:	b9 f7       	brne	.-18     	; 0xcba <com_reg_read+0x42>
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <com_reg_read+0x60>
     cce:	e9 e8       	ldi	r30, 0x89	; 137
     cd0:	f1 e2       	ldi	r31, 0x21	; 33
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <com_reg_read+0x60>
     cd4:	e9 e8       	ldi	r30, 0x89	; 137
     cd6:	f1 e2       	ldi	r31, 0x21	; 33
     cd8:	e9 58       	subi	r30, 0x89	; 137
     cda:	f1 42       	sbci	r31, 0x21	; 33
     cdc:	db 01       	movw	r26, r22
     cde:	ed 93       	st	X+, r30
     ce0:	fc 93       	st	X, r31
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	30 c0       	rjmp	.+96     	; 0xd46 <com_reg_read+0xce>
     ce6:	8b 01       	movw	r16, r22
     ce8:	ec 01       	movw	r28, r24
     cea:	0e 94 06 81 	call	0x1020c	; 0x1020c <bldr_reg_read>
     cee:	88 23       	and	r24, r24
     cf0:	49 f1       	breq	.+82     	; 0xd44 <com_reg_read+0xcc>
     cf2:	cc 30       	cpi	r28, 0x0C	; 12
     cf4:	d1 05       	cpc	r29, r1
     cf6:	79 f0       	breq	.+30     	; 0xd16 <com_reg_read+0x9e>
     cf8:	cd 30       	cpi	r28, 0x0D	; 13
     cfa:	d1 05       	cpc	r29, r1
     cfc:	a9 f0       	breq	.+42     	; 0xd28 <com_reg_read+0xb0>
     cfe:	cb 30       	cpi	r28, 0x0B	; 11
     d00:	d1 05       	cpc	r29, r1
     d02:	d9 f4       	brne	.+54     	; 0xd3a <com_reg_read+0xc2>
     d04:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <g_com+0x4>
     d08:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <g_com+0x5>
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	18 c0       	rjmp	.+48     	; 0xd46 <com_reg_read+0xce>
     d16:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <g_com+0x6>
     d1a:	90 91 0c 20 	lds	r25, 0x200C	; 0x80200c <g_com+0x7>
     d1e:	d8 01       	movw	r26, r16
     d20:	8d 93       	st	X+, r24
     d22:	9c 93       	st	X, r25
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <com_reg_read+0xce>
     d28:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <g_com+0x8>
     d2c:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <g_com+0x9>
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <com_reg_read+0xce>
     d3a:	b8 01       	movw	r22, r16
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 27 09 	call	0x124e	; 0x124e <do_reg_read>
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <com_reg_read+0xce>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <__vector_86>:
}

/* Timer D1 CCB Interrupt vector
 * every 1ms
 */
ISR(TCD1_CCB_vect) {
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	0b b6       	in	r0, 0x3b	; 59
     d5c:	0f 92       	push	r0
     d5e:	2f 93       	push	r18
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d68:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d6a:	f8 94       	cli
        // CCB neu setzen. addieren TIMER_PERIOD
        TCD1.CCBBUF = TCD1.CNT + TIMER_PERIOD;
     d6c:	e0 e4       	ldi	r30, 0x40	; 64
     d6e:	f9 e0       	ldi	r31, 0x09	; 9
     d70:	80 a1       	ldd	r24, Z+32	; 0x20
     d72:	91 a1       	ldd	r25, Z+33	; 0x21
     d74:	8c 50       	subi	r24, 0x0C	; 12
     d76:	9e 4f       	sbci	r25, 0xFE	; 254
     d78:	82 af       	std	Z+58, r24	; 0x3a
     d7a:	93 af       	std	Z+59, r25	; 0x3b
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d7c:	2f bf       	out	0x3f, r18	; 63
    }
    
    // common timer erhöhen
    g_com.timer++;
     d7e:	e5 e0       	ldi	r30, 0x05	; 5
     d80:	f0 e2       	ldi	r31, 0x20	; 32
     d82:	84 85       	ldd	r24, Z+12	; 0x0c
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	84 87       	std	Z+12, r24	; 0x0c
    
    struct timer *t;
    // verkettete Timer 
    // Ist der common timer & 0xf == 0, dann auf 16ms timmer setzen
    if ((g_com.timer & 0x0f) == 0) {
     d88:	8f 70       	andi	r24, 0x0F	; 15
     d8a:	81 f4       	brne	.+32     	; 0xdac <__vector_86+0x5c>
        t = g_com.timer_16ms;
     d8c:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <g_com+0xf>
     d90:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <g_com+0x10>
        while (t) {
     d94:	30 97       	sbiw	r30, 0x00	; 0
     d96:	51 f0       	breq	.+20     	; 0xdac <__vector_86+0x5c>
            if (t->value > 0) {
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	18 16       	cp	r1, r24
     d9c:	14 f4       	brge	.+4      	; 0xda2 <__vector_86+0x52>
                t->value--;
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	82 83       	std	Z+2, r24	; 0x02
            }
            t = t->next;
     da2:	01 90       	ld	r0, Z+
     da4:	f0 81       	ld	r31, Z
     da6:	e0 2d       	mov	r30, r0
    struct timer *t;
    // verkettete Timer 
    // Ist der common timer & 0xf == 0, dann auf 16ms timmer setzen
    if ((g_com.timer & 0x0f) == 0) {
        t = g_com.timer_16ms;
        while (t) {
     da8:	30 97       	sbiw	r30, 0x00	; 0
     daa:	b1 f7       	brne	.-20     	; 0xd98 <__vector_86+0x48>
            }
            t = t->next;
        }
    }
    // 1ms timer
    t = g_com.timer_1ms;
     dac:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <g_com+0xd>
     db0:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <g_com+0xe>
    while (t) {
     db4:	30 97       	sbiw	r30, 0x00	; 0
     db6:	51 f0       	breq	.+20     	; 0xdcc <__vector_86+0x7c>
        if (t->value > 0) {
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	18 16       	cp	r1, r24
     dbc:	14 f4       	brge	.+4      	; 0xdc2 <__vector_86+0x72>
            t->value--;
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	82 83       	std	Z+2, r24	; 0x02
        }
        t = t->next;
     dc2:	01 90       	ld	r0, Z+
     dc4:	f0 81       	ld	r31, Z
     dc6:	e0 2d       	mov	r30, r0
            t = t->next;
        }
    }
    // 1ms timer
    t = g_com.timer_1ms;
    while (t) {
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	b1 f7       	brne	.-20     	; 0xdb8 <__vector_86+0x68>
        if (t->value > 0) {
            t->value--;
        }
        t = t->next;
    }
}
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0b be       	out	0x3b, r0	; 59
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <main>:

/* main: Geräte Hauptroutine
 * int main(void)
 * 
 */
__ATTR_OS_MAIN int main(void) {
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	c6 54       	subi	r28, 0x46	; 70
     dea:	d1 09       	sbc	r29, r1
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	de bf       	out	0x3e, r29	; 62
    // erst mal interupts aus
    cli();
     df0:	f8 94       	cli

/* Standard Geräte Initialiserung
 */
static void com_init_system(void) {
    // zuerst die User Geräte Initialiserung
    do_init_system();
     df2:	0e 94 c8 08 	call	0x1190	; 0x1190 <do_init_system>
    
    // standard timer
    // timer D1
    TCD1.CTRLB = TC_WGMODE_NORMAL_gc; // Normal Mode
     df6:	e0 e4       	ldi	r30, 0x40	; 64
     df8:	f9 e0       	ldi	r31, 0x09	; 9
     dfa:	11 82       	std	Z+1, r1	; 0x01
    TCD1.CTRLD = 0; // Event Action off
     dfc:	13 82       	std	Z+3, r1	; 0x03
    TCD1.CTRLE = 0; // normal mode
     dfe:	14 82       	std	Z+4, r1	; 0x04
    TCD1.INTCTRLA = 0;  // err and ov disabled
     e00:	16 82       	std	Z+6, r1	; 0x06
    TCD1.INTCTRLB = TC_CCBINTLVL_LO_gc; // CCB interupt level auf LOW
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	87 83       	std	Z+7, r24	; 0x07
    TCD1.INTFLAGS = 0xff; // clear interupt TCD0 flags
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	84 87       	std	Z+12, r24	; 0x0c
    TCD1.PER = 0xffff; // D1 Periode
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	9f ef       	ldi	r25, 0xFF	; 255
     e0e:	86 a3       	std	Z+38, r24	; 0x26
     e10:	97 a3       	std	Z+39, r25	; 0x27
    TCD1.CCB = TCD1.CNT + TIMER_PERIOD; // 1000 Hz
     e12:	80 a1       	ldd	r24, Z+32	; 0x20
     e14:	91 a1       	ldd	r25, Z+33	; 0x21
     e16:	8c 50       	subi	r24, 0x0C	; 12
     e18:	9e 4f       	sbci	r25, 0xFE	; 254
     e1a:	82 a7       	std	Z+42, r24	; 0x2a
     e1c:	93 a7       	std	Z+43, r25	; 0x2b
    TCD1.CTRLA = TC_CLKSEL_DIV64_gc; // TCD0 clock divider /64
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	80 83       	st	Z, r24

    // schreibe Product und Vendor ID in das EEPROM
    eeprom_update_word(&bldr_eeprom.productid, g_com.productid);
     e22:	05 e0       	ldi	r16, 0x05	; 5
     e24:	10 e2       	ldi	r17, 0x20	; 32
     e26:	f8 01       	movw	r30, r16
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	85 e0       	ldi	r24, 0x05	; 5
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 8c 09 	call	0x1318	; 0x1318 <eeprom_update_word>
    eeprom_update_word(&bldr_eeprom.vendorid, g_com.vendorid);
     e34:	f8 01       	movw	r30, r16
     e36:	62 81       	ldd	r22, Z+2	; 0x02
     e38:	73 81       	ldd	r23, Z+3	; 0x03
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 8c 09 	call	0x1318	; 0x1318 <eeprom_update_word>
    
    // schreibe Gerätebeschreibung in das EEPROM
    if (g_com.dev_desc_P) {
     e42:	f8 01       	movw	r30, r16
     e44:	02 85       	ldd	r16, Z+10	; 0x0a
     e46:	13 85       	ldd	r17, Z+11	; 0x0b
     e48:	01 15       	cp	r16, r1
     e4a:	11 05       	cpc	r17, r1
     e4c:	c1 f0       	breq	.+48     	; 0xe7e <main+0x9a>
     e4e:	0f 2e       	mov	r0, r31
     e50:	f0 e4       	ldi	r31, 0x40	; 64
     e52:	ef 2e       	mov	r14, r31
     e54:	f3 e0       	ldi	r31, 0x03	; 3
     e56:	ff 2e       	mov	r15, r31
     e58:	f0 2d       	mov	r31, r0
        PGM_P p = g_com.dev_desc_P;
        for (uint8_t n = 0; n < DEV_DESC_MAX_SIZE; n++) {
            uint8_t c = pgm_read_byte(p++);
     e5a:	f8 01       	movw	r30, r16
     e5c:	d4 90       	lpm	r13, Z
            eeprom_update_byte(&bldr_eeprom.dev_desc[0][n], c);
     e5e:	6d 2d       	mov	r22, r13
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 81 09 	call	0x1302	; 0x1302 <eeprom_update_byte>
            if (c == 0) {
     e66:	dd 20       	and	r13, r13
     e68:	51 f0       	breq	.+20     	; 0xe7e <main+0x9a>
     e6a:	ff ef       	ldi	r31, 0xFF	; 255
     e6c:	ef 1a       	sub	r14, r31
     e6e:	ff 0a       	sbc	r15, r31
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
    eeprom_update_word(&bldr_eeprom.vendorid, g_com.vendorid);
    
    // schreibe Gerätebeschreibung in das EEPROM
    if (g_com.dev_desc_P) {
        PGM_P p = g_com.dev_desc_P;
        for (uint8_t n = 0; n < DEV_DESC_MAX_SIZE; n++) {
     e74:	80 e6       	ldi	r24, 0x60	; 96
     e76:	e8 16       	cp	r14, r24
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	f8 06       	cpc	r15, r24
     e7c:	71 f7       	brne	.-36     	; 0xe5a <main+0x76>
    cli();
    // System Initiatliserung
    com_init_system();
    
    // Kommando reset verarbeiten
    com_process_cmd_reset();
     e7e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <com_process_cmd_reset>
#ifndef BOOTLOADER
extern void sbn_init(void);
extern uint8_t sbn_all_sent(void);
extern uint8_t sbn_send_msg(struct sboxnet_msg_header* pmsg);
extern int8_t sbn_receive_msg(struct sboxnet_msg_header* pmsg, uint8_t maxmsglen);
static INLINE void sboxnet_init(void) { sbn_init(); }
     e82:	0e 94 08 81 	call	0x10210	; 0x10210 <sbn_init>
    // Kommunikation Sboxnet Initialiseren
    sboxnet_init();
   
    // Standard sleep Mode IDLE
    set_sleep_mode(SLEEP_SMODE_IDLE_gc);
     e86:	e8 e4       	ldi	r30, 0x48	; 72
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 7f       	andi	r24, 0xF1	; 241
     e8e:	80 83       	st	Z, r24
    // Interrupts ein
    sei();
     e90:	78 94       	sei
    
    // Gerät Setup
    do_setup();
     e92:	0e 94 2d 09 	call	0x125a	; 0x125a <do_setup>
                do_main();
            }
        } else {
            // keine Adresse angefordert
            // schlafen legen
            sleep_mode();
     e96:	08 e4       	ldi	r16, 0x48	; 72
     e98:	10 e0       	ldi	r17, 0x00	; 0
    }
send_error:
    pmsg->opt.len = 2;
    pmsg->data[0] = pmsg->cmd; // ursprüngliches Kommando
    pmsg->data[1] = rc; // Rückgabewert
    pmsg->cmd = 0x80; // mark Kommando als Antwort
     e9a:	68 94       	set
     e9c:	77 24       	eor	r7, r7
     e9e:	77 f8       	bld	r7, 7
            return SBOXNET_ACKRC_SEND_NO_ANSWER;
        }
        
        // SBOXNET_CMD_NET_WATCHDOG
        case SBOXNET_CMD_NET_WATCHDOG: {
            return SBOXNET_ACKRC_SEND_NO_ANSWER;
     ea0:	66 24       	eor	r6, r6
     ea2:	6a 94       	dec	r6
        }
        
        // SBOXNET_CMD_DEV_RESET
        case SBOXNET_CMD_DEV_RESET: {
            // Geräte Reset
            setbit_atomic(g_dev_state, DEV_STATE_FLG_RESET_b);
     ea4:	0f 2e       	mov	r0, r31
     ea6:	f4 e0       	ldi	r31, 0x04	; 4
     ea8:	af 2e       	mov	r10, r31
     eaa:	f0 e2       	ldi	r31, 0x20	; 32
     eac:	bf 2e       	mov	r11, r31
     eae:	f0 2d       	mov	r31, r0
            if (pmsg->opt.len != 3) {
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            uint16_t data = 0;
            uint16_t mask = 0x01;
            mask <<= (val & 0x0f);
     eb0:	88 24       	eor	r8, r8
     eb2:	83 94       	inc	r8
     eb4:	91 2c       	mov	r9, r1
    char rc = 0;
    // ist die Quelladresse 0, dann watch dog timer setzen
    
    // ist Quelladresse 0 -> Watchdog Ping
    if (pmsg->srcaddr == 0) {
        g_v.timer_watchdog = WATCHDOG_VAL;
     eb6:	0f 2e       	mov	r0, r31
     eb8:	f6 e1       	ldi	r31, 0x16	; 22
     eba:	ef 2e       	mov	r14, r31
     ebc:	f0 e2       	ldi	r31, 0x20	; 32
     ebe:	ff 2e       	mov	r15, r31
     ec0:	f0 2d       	mov	r31, r0
    while(1) {
        // Buffer für Nachrichten
        struct sboxnet_msg_max msg;
        
        // wird keine Adresse angefordert? 0==keine Addresse angefordert: !=0 Adresse angefordert
        volatile uint8_t r2 = bldr_task(&msg);
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	0e 94 02 81 	call	0x10204	; 0x10204 <bldr_task>
     eca:	27 96       	adiw	r28, 0x07	; 7
     ecc:	8f af       	std	Y+63, r24	; 0x3f
     ece:	27 97       	sbiw	r28, 0x07	; 7
        if (/*bldr_task(&msg)*/ r2 == 0) {
     ed0:	27 96       	adiw	r28, 0x07	; 7
     ed2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ed4:	27 97       	sbiw	r28, 0x07	; 7
     ed6:	81 11       	cpse	r24, r1
     ed8:	37 c1       	rjmp	.+622    	; 0x1148 <__DATA_REGION_LENGTH__+0x148>
static INLINE uint8_t sboxnet_all_sent(void) { return sbn_all_sent(); }
extern uint8_t sboxnet_send_msg(struct sboxnet_msg_header* pmsg);
uint8_t sboxnet_send_msg(struct sboxnet_msg_header* pmsg);
static INLINE int8_t sboxnet_receive_msg(struct sboxnet_msg_header* pmsg, uint8_t maxmsglen) { return sbn_receive_msg(pmsg, maxmsglen); }
     eda:	65 e4       	ldi	r22, 0x45	; 69
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	0e 94 0a 81 	call	0x10214	; 0x10214 <sbn_receive_msg>
 * void com_receive_and_process_msg(struct sboxnet_msg_max* pmsg)
 *   - pmsg  Nachrichtenbuffer
 */
static void com_receive_and_process_msg(struct sboxnet_msg_max* pmsg) {    
    int8_t rc = sboxnet_receive_msg(&pmsg->msgh, sizeof(*pmsg));
    if (rc > 0) {
     ee4:	18 16       	cp	r1, r24
     ee6:	0c f0       	brlt	.+2      	; 0xeea <main+0x106>
     ee8:	25 c1       	rjmp	.+586    	; 0x1134 <__DATA_REGION_LENGTH__+0x134>
static void com_process_msg(struct sboxnet_msg_header *pmsg) {
    char rc = 0;
    // ist die Quelladresse 0, dann watch dog timer setzen
    
    // ist Quelladresse 0 -> Watchdog Ping
    if (pmsg->srcaddr == 0) {
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	81 11       	cpse	r24, r1
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <main+0x110>
        g_v.timer_watchdog = WATCHDOG_VAL;
     ef0:	f7 01       	movw	r30, r14
     ef2:	77 82       	std	Z+7, r7	; 0x07
    }
    
    // Usereinsprung
    rc = do_msg(pmsg);
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	0e 94 2b 09 	call	0x1256	; 0x1256 <do_msg>
     if (rc == SBOXNET_ACKRC_OK) {
     efc:	88 23       	and	r24, r24
     efe:	09 f4       	brne	.+2      	; 0xf02 <main+0x11e>
     f00:	0f c1       	rjmp	.+542    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
        goto send_ok;
    } else if (rc == SBOXNET_ACKRC_SEND_NO_ANSWER) {
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	09 f4       	brne	.+2      	; 0xf08 <main+0x124>
     f06:	1d c1       	rjmp	.+570    	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
        return;
    } else if (rc != SBOXNET_ACKRC_CMD_UNKNOWN) {
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	09 f0       	breq	.+2      	; 0xf0e <main+0x12a>
     f0c:	01 c1       	rjmp	.+514    	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
        goto send_error;
    }
    // ist Bit 7 des Kommandos gestetzt, dann keine Antwort
    if (pmsg->cmd & 0x80) {
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	88 23       	and	r24, r24
     f12:	0c f4       	brge	.+2      	; 0xf16 <main+0x132>
     f14:	16 c1       	rjmp	.+556    	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
 *  SBOXNET_CMD_DEV_SET_DESC Gerätebeschreibung setzen
 *  alle anderen werden weitergeleitet zu bldr_process_basic_msg
 */
static uint8_t com_process_std_msg(struct sboxnet_msg_header *pmsg) {
    // Nachrichten behandeln
    switch (pmsg->cmd) {
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	09 f4       	brne	.+2      	; 0xf1c <main+0x138>
     f1a:	e7 c0       	rjmp	.+462    	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
     f1c:	85 31       	cpi	r24, 0x15	; 21
     f1e:	41 f0       	breq	.+16     	; 0xf30 <main+0x14c>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	01 f5       	brne	.+64     	; 0xf64 <main+0x180>
        // SBOXNET_CMD_NET_RESET
        case SBOXNET_CMD_NET_RESET: {
            if (pmsg->srcaddr == 0) {
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	81 11       	cpse	r24, r1
     f28:	0c c1       	rjmp	.+536    	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
                // neue Adresse anfordern
                return com_process_cmd_reset();
     f2a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <com_process_cmd_reset>
     f2e:	de c0       	rjmp	.+444    	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
        }
        
        // SBOXNET_CMD_DEV_RESET
        case SBOXNET_CMD_DEV_RESET: {
            // Geräte Reset
            setbit_atomic(g_dev_state, DEV_STATE_FLG_RESET_b);
     f30:	f0 e2       	ldi	r31, 0x20	; 32
     f32:	af 16       	cp	r10, r31
     f34:	b1 04       	cpc	r11, r1
     f36:	30 f4       	brcc	.+12     	; 0xf44 <main+0x160>
     f38:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <main+0x170>
     f44:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f46:	f8 94       	cli
     f48:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <g_dev_state>
     f4c:	80 64       	ori	r24, 0x40	; 64
     f4e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <g_dev_state>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f52:	9f bf       	out	0x3f, r25	; 63
            
            if (pmsg->dstaddr == SBOXNET_ADDR_BROADCAST) {
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8f 3f       	cpi	r24, 0xFF	; 255
     f58:	09 f4       	brne	.+2      	; 0xf5c <main+0x178>
     f5a:	f3 c0       	rjmp	.+486    	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
                return SBOXNET_ACKRC_SEND_NO_ANSWER;
            } else {
                pmsg->opt.len = 0;
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	80 7c       	andi	r24, 0xC0	; 192
     f60:	8c 83       	std	Y+4, r24	; 0x04
     f62:	de c0       	rjmp	.+444    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
            }
        }
    }
    
    // falls Ziel Broadcat Adresse ist, keine Antwort
    if (pmsg->dstaddr == SBOXNET_ADDR_BROADCAST) {
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	9f 3f       	cpi	r25, 0xFF	; 255
     f68:	09 f4       	brne	.+2      	; 0xf6c <main+0x188>
     f6a:	eb c0       	rjmp	.+470    	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
        return SBOXNET_ACKRC_SEND_NO_ANSWER;
    }
    
    switch (pmsg->cmd) {
     f6c:	81 32       	cpi	r24, 0x21	; 33
     f6e:	09 f4       	brne	.+2      	; 0xf72 <main+0x18e>
     f70:	40 c0       	rjmp	.+128    	; 0xff2 <main+0x20e>
     f72:	30 f4       	brcc	.+12     	; 0xf80 <main+0x19c>
     f74:	83 31       	cpi	r24, 0x13	; 19
     f76:	09 f4       	brne	.+2      	; 0xf7a <main+0x196>
     f78:	92 c0       	rjmp	.+292    	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
     f7a:	80 32       	cpi	r24, 0x20	; 32
     f7c:	41 f0       	breq	.+16     	; 0xf8e <main+0x1aa>
     f7e:	b0 c0       	rjmp	.+352    	; 0x10e0 <__DATA_REGION_LENGTH__+0xe0>
     f80:	82 32       	cpi	r24, 0x22	; 34
     f82:	09 f4       	brne	.+2      	; 0xf86 <main+0x1a2>
     f84:	55 c0       	rjmp	.+170    	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     f86:	83 32       	cpi	r24, 0x23	; 35
     f88:	09 f4       	brne	.+2      	; 0xf8c <main+0x1a8>
     f8a:	6b c0       	rjmp	.+214    	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
     f8c:	a9 c0       	rjmp	.+338    	; 0x10e0 <__DATA_REGION_LENGTH__+0xe0>
    // Register, index 0
    uint16_t regaddr = *pdata;
    // Anzahl der Register
    uint8_t num = pmsg->data[2];
    // ist die Anzahl der Register gültig?
    if (pmsg->opt.len != 3 || num > SBOXNET_MSG_DATA_LEN/2 ) {
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	8f 73       	andi	r24, 0x3F	; 63
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	09 f0       	breq	.+2      	; 0xf98 <main+0x1b4>
     f96:	af c0       	rjmp	.+350    	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
    // Zeiger auf Nachricht Daten
    uint16_t *pdata = (uint16_t*)pmsg->data;
    // Register, index 0
    uint16_t regaddr = *pdata;
    // Anzahl der Register
    uint8_t num = pmsg->data[2];
     f98:	98 85       	ldd	r25, Y+8	; 0x08
    // ist die Anzahl der Register gültig?
    if (pmsg->opt.len != 3 || num > SBOXNET_MSG_DATA_LEN/2 ) {
     f9a:	90 32       	cpi	r25, 0x20	; 32
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <main+0x1bc>
     f9e:	ad c0       	rjmp	.+346    	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
 */
static uint8_t com_cmd_reg_read(struct sboxnet_msg_header *pmsg) {
    // Zeiger auf Nachricht Daten
    uint16_t *pdata = (uint16_t*)pmsg->data;
    // Register, index 0
    uint16_t regaddr = *pdata;
     fa0:	2e 81       	ldd	r18, Y+6	; 0x06
     fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    // ist die Anzahl der Register gültig?
    if (pmsg->opt.len != 3 || num > SBOXNET_MSG_DATA_LEN/2 ) {
        return SBOXNET_ACKRC_INVALID_ARG;
    }
    // Antwort vorbereiten
    pmsg->opt.len = 2*num;
     fa4:	89 2f       	mov	r24, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	8e 73       	andi	r24, 0x3E	; 62
     faa:	4c 81       	ldd	r20, Y+4	; 0x04
     fac:	40 7c       	andi	r20, 0xC0	; 192
     fae:	84 2b       	or	r24, r20
     fb0:	8c 83       	std	Y+4, r24	; 0x04
    while (num) {
     fb2:	99 23       	and	r25, r25
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <main+0x1d4>
     fb6:	b4 c0       	rjmp	.+360    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	69 01       	movw	r12, r18
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	c8 1a       	sub	r12, r24
     fc0:	d8 0a       	sbc	r13, r24
     fc2:	c9 0e       	add	r12, r25
     fc4:	d1 1c       	adc	r13, r1
     fc6:	be 01       	movw	r22, r28
     fc8:	6a 5f       	subi	r22, 0xFA	; 250
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
        uint8_t rc = com_reg_read(regaddr++, pdata++);
     fcc:	1b 01       	movw	r2, r22
     fce:	e2 e0       	ldi	r30, 0x02	; 2
     fd0:	2e 0e       	add	r2, r30
     fd2:	31 1c       	adc	r3, r1
     fd4:	29 01       	movw	r4, r18
     fd6:	ff ef       	ldi	r31, 0xFF	; 255
     fd8:	4f 1a       	sub	r4, r31
     fda:	5f 0a       	sbc	r5, r31
     fdc:	c9 01       	movw	r24, r18
     fde:	0e 94 3c 06 	call	0xc78	; 0xc78 <com_reg_read>
        if (rc != 0) {
     fe2:	81 11       	cpse	r24, r1
     fe4:	ba c0       	rjmp	.+372    	; 0x115a <__DATA_REGION_LENGTH__+0x15a>
        return SBOXNET_ACKRC_INVALID_ARG;
    }
    // Antwort vorbereiten
    pmsg->opt.len = 2*num;
    while (num) {
        uint8_t rc = com_reg_read(regaddr++, pdata++);
     fe6:	b1 01       	movw	r22, r2
     fe8:	92 01       	movw	r18, r4
    if (pmsg->opt.len != 3 || num > SBOXNET_MSG_DATA_LEN/2 ) {
        return SBOXNET_ACKRC_INVALID_ARG;
    }
    // Antwort vorbereiten
    pmsg->opt.len = 2*num;
    while (num) {
     fea:	4c 14       	cp	r4, r12
     fec:	5d 04       	cpc	r5, r13
     fee:	71 f7       	brne	.-36     	; 0xfcc <main+0x1e8>
     ff0:	97 c0       	rjmp	.+302    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
 */
static uint8_t com_cmd_reg_read_multi(struct sboxnet_msg_header *pmsg) {
    // Zeiger auf Daten
    uint16_t *pdata = (uint16_t*)pmsg->data;
    // ist die Länge der Nachricht OK?
    if (pmsg->opt.len > SBOXNET_MSG_DATA_LEN || (pmsg->opt.len & 0x01)) {
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	2f 73       	andi	r18, 0x3F	; 63
     ff6:	82 2f       	mov	r24, r18
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	20 fd       	sbrc	r18, 0
     ffc:	80 c0       	rjmp	.+256    	; 0x10fe <__DATA_REGION_LENGTH__+0xfe>
        return SBOXNET_ACKRC_INVALID_ARG;
    }
    // Länge der Nachricht
    uint8_t n = pmsg->opt.len / 2;
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	58 2e       	mov	r5, r24
    // Pro Register, lesen
    while (n > 0) {
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1008:	8b c0       	rjmp	.+278    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
    100a:	6e 01       	movw	r12, r28
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	c8 0e       	add	r12, r24
    1010:	d1 1c       	adc	r13, r1
    1012:	f6 01       	movw	r30, r12
        uint8_t rc = com_reg_read(*pdata, pdata);
    1014:	b6 01       	movw	r22, r12
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	c8 0e       	add	r12, r24
    101a:	d1 1c       	adc	r13, r1
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	0e 94 3c 06 	call	0xc78	; 0xc78 <com_reg_read>
        if (rc != 0) {
    1024:	81 11       	cpse	r24, r1
    1026:	99 c0       	rjmp	.+306    	; 0x115a <__DATA_REGION_LENGTH__+0x15a>
            return rc;
        }
        pdata++;
        n--;
    1028:	5a 94       	dec	r5
        return SBOXNET_ACKRC_INVALID_ARG;
    }
    // Länge der Nachricht
    uint8_t n = pmsg->opt.len / 2;
    // Pro Register, lesen
    while (n > 0) {
    102a:	51 10       	cpse	r5, r1
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    102e:	78 c0       	rjmp	.+240    	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
            // Register
            uint16_t regaddr = pdata[0];
            // und die Daten / Wert
            uint16_t regval  = pdata[1];
            // maske
            uint16_t mask    = (pmsg->opt.len == 6 ? pdata[2] : 0xffff);
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	98 2f       	mov	r25, r24
    1034:	9f 73       	andi	r25, 0x3F	; 63
    1036:	96 30       	cpi	r25, 0x06	; 6
    1038:	19 f4       	brne	.+6      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103a:	4a 85       	ldd	r20, Y+10	; 0x0a
    103c:	5b 85       	ldd	r21, Y+11	; 0x0b
    103e:	06 c0       	rjmp	.+12     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
            if (pmsg->opt.len != 4 && pmsg->opt.len != 6) {
    1040:	8d 73       	andi	r24, 0x3D	; 61
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	09 f0       	breq	.+2      	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
    1046:	5d c0       	rjmp	.+186    	; 0x1102 <__DATA_REGION_LENGTH__+0x102>
            // Register
            uint16_t regaddr = pdata[0];
            // und die Daten / Wert
            uint16_t regval  = pdata[1];
            // maske
            uint16_t mask    = (pmsg->opt.len == 6 ? pdata[2] : 0xffff);
    1048:	4f ef       	ldi	r20, 0xFF	; 255
    104a:	5f ef       	ldi	r21, 0xFF	; 255
            // Register schreiben

            // Zeiger auf Daten
            uint16_t *pdata = (uint16_t*)pmsg->data;
            // Register
            uint16_t regaddr = pdata[0];
    104c:	2e 81       	ldd	r18, Y+6	; 0x06
    104e:	3f 81       	ldd	r19, Y+7	; 0x07
            // und die Daten / Wert
            uint16_t regval  = pdata[1];
    1050:	68 85       	ldd	r22, Y+8	; 0x08
    1052:	79 85       	ldd	r23, Y+9	; 0x09
            // maske
            uint16_t mask    = (pmsg->opt.len == 6 ? pdata[2] : 0xffff);
            if (pmsg->opt.len != 4 && pmsg->opt.len != 6) {
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            pmsg->opt.len = 0;
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	90 7c       	andi	r25, 0xC0	; 192
    1058:	9c 83       	std	Y+4, r25	; 0x04
 *     - data  16 Bit Daten
 *     - mask  16 Bit Maske: beschrieben wird (data & mask)
 */
static uint8_t com_reg_write(uint16_t reg, uint16_t data, uint16_t mask) {
    // ruft nur Geräte do_reg_write auf
    return do_reg_write(reg, data, mask);
    105a:	c9 01       	movw	r24, r18
    105c:	0e 94 29 09 	call	0x1252	; 0x1252 <do_reg_write>
    1060:	45 c0       	rjmp	.+138    	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
            uint16_t* pdata = (uint16_t*)pmsg->data;
            // Register
            uint16_t regaddr = pdata[0];
            // Bit
            uint8_t val = pmsg->data[2];// value (0x80) und bit (0x0f) nummer
            if (pmsg->opt.len != 3) {
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	8f 73       	andi	r24, 0x3F	; 63
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	09 f0       	breq	.+2      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    106a:	4d c0       	rjmp	.+154    	; 0x1106 <__DATA_REGION_LENGTH__+0x106>
            // Zeiger auf Daten
            uint16_t* pdata = (uint16_t*)pmsg->data;
            // Register
            uint16_t regaddr = pdata[0];
            // Bit
            uint8_t val = pmsg->data[2];// value (0x80) und bit (0x0f) nummer
    106c:	88 85       	ldd	r24, Y+8	; 0x08
            if (pmsg->opt.len != 3) {
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            uint16_t data = 0;
            uint16_t mask = 0x01;
            mask <<= (val & 0x0f);
    106e:	98 2f       	mov	r25, r24
    1070:	9f 70       	andi	r25, 0x0F	; 15
    1072:	a4 01       	movw	r20, r8
    1074:	02 c0       	rjmp	.+4      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1076:	44 0f       	add	r20, r20
    1078:	55 1f       	adc	r21, r21
    107a:	9a 95       	dec	r25
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
            // ist Bit 7 im Wert gesetzt -> data = mask entspricht bitval = 1
            if (val & 0x80) {
    107e:	88 23       	and	r24, r24
    1080:	1c f4       	brge	.+6      	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
                data = mask;
    1082:	64 2f       	mov	r22, r20
    1084:	75 2f       	mov	r23, r21
    1086:	02 c0       	rjmp	.+4      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
            // Bit
            uint8_t val = pmsg->data[2];// value (0x80) und bit (0x0f) nummer
            if (pmsg->opt.len != 3) {
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            uint16_t data = 0;
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
            // Bit in einem Register schreiben
            
            // Zeiger auf Daten
            uint16_t* pdata = (uint16_t*)pmsg->data;
            // Register
            uint16_t regaddr = pdata[0];
    108c:	2e 81       	ldd	r18, Y+6	; 0x06
    108e:	3f 81       	ldd	r19, Y+7	; 0x07
            mask <<= (val & 0x0f);
            // ist Bit 7 im Wert gesetzt -> data = mask entspricht bitval = 1
            if (val & 0x80) {
                data = mask;
            }
            pmsg->opt.len = 0;
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	90 7c       	andi	r25, 0xC0	; 192
    1094:	9c 83       	std	Y+4, r25	; 0x04
 *     - data  16 Bit Daten
 *     - mask  16 Bit Maske: beschrieben wird (data & mask)
 */
static uint8_t com_reg_write(uint16_t reg, uint16_t data, uint16_t mask) {
    // ruft nur Geräte do_reg_write auf
    return do_reg_write(reg, data, mask);
    1096:	c9 01       	movw	r24, r18
    1098:	0e 94 29 09 	call	0x1252	; 0x1252 <do_reg_write>
    109c:	27 c0       	rjmp	.+78     	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
        // SBOXNET_CMD_DEV_SET_DESC
        case SBOXNET_CMD_DEV_SET_DESC: {
            // Gerätebeshcribung setzen
            
            // Länge der Beschreibung
            uint8_t n = pmsg->opt.len;
    109e:	4c 81       	ldd	r20, Y+4	; 0x04
    10a0:	4f 73       	andi	r20, 0x3F	; 63
            // Länge Muss sein [1..(DEV_DESC_MAX_SIZE]
            if (n == 0 || n > DEV_DESC_MAX_SIZE) {
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	84 0f       	add	r24, r20
    10a6:	80 32       	cpi	r24, 0x20	; 32
    10a8:	80 f5       	brcc	.+96     	; 0x110a <__DATA_REGION_LENGTH__+0x10a>
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            // ID der Beschreibung
            uint8_t id = pmsg->data[0];
    10aa:	6e 81       	ldd	r22, Y+6	; 0x06
            //ist ID gültig?
            if (id == 0 || id >= DEV_NUM_DESCS) {
    10ac:	9f ef       	ldi	r25, 0xFF	; 255
    10ae:	96 0f       	add	r25, r22
    10b0:	92 30       	cpi	r25, 0x02	; 2
    10b2:	68 f5       	brcc	.+90     	; 0x110e <__DATA_REGION_LENGTH__+0x10e>
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            n--;
            if (n < DEV_DESC_MAX_SIZE) {
                pmsg->data[1+n] = 0;
    10b4:	e7 e0       	ldi	r30, 0x07	; 7
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	ec 0f       	add	r30, r28
    10ba:	fd 1f       	adc	r31, r29
    10bc:	e8 0f       	add	r30, r24
    10be:	f1 1d       	adc	r31, r1
    10c0:	10 82       	st	Z, r1
                n++;
            }
            // schreiben ins EEPROM
            eeprom_update_block(&pmsg->data[1], bldr_eeprom.dev_desc[id], n);
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	e0 e2       	ldi	r30, 0x20	; 32
    10c6:	6e 9f       	mul	r22, r30
    10c8:	b0 01       	movw	r22, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	60 5c       	subi	r22, 0xC0	; 192
    10ce:	7c 4f       	sbci	r23, 0xFC	; 252
    10d0:	ce 01       	movw	r24, r28
    10d2:	07 96       	adiw	r24, 0x07	; 7
    10d4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <eeprom_update_block>
            pmsg->opt.len = 0;
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	80 7c       	andi	r24, 0xC0	; 192
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	20 c0       	rjmp	.+64     	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
            return SBOXNET_ACKRC_OK;
        }
        default:
            // sonst bldr_process_basic_msg
            return bldr_process_basic_msg(pmsg);        
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 04 81 	call	0x10208	; 0x10208 <bldr_process_basic_msg>
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
            return SBOXNET_ACKRC_SEND_NO_ANSWER;
        }
        
        // SBOXNET_CMD_NET_WATCHDOG
        case SBOXNET_CMD_NET_WATCHDOG: {
            return SBOXNET_ACKRC_SEND_NO_ANSWER;
    10ea:	86 2d       	mov	r24, r6
        return;  // discard Ack Answers
    }
    
    // Standard Nachricht
    rc = com_process_std_msg(pmsg);
    if (rc == SBOXNET_ACKRC_SEND_NO_ANSWER) {
    10ec:	8f 3f       	cpi	r24, 0xFF	; 255
    10ee:	49 f1       	breq	.+82     	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
        return;
    }
    if (rc == SBOXNET_ACKRC_OK) {
    10f0:	81 11       	cpse	r24, r1
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
    10f4:	15 c0       	rjmp	.+42     	; 0x1120 <__DATA_REGION_LENGTH__+0x120>
    // Register, index 0
    uint16_t regaddr = *pdata;
    // Anzahl der Register
    uint8_t num = pmsg->data[2];
    // ist die Anzahl der Register gültig?
    if (pmsg->opt.len != 3 || num > SBOXNET_MSG_DATA_LEN/2 ) {
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
 */
static uint8_t com_cmd_reg_read_multi(struct sboxnet_msg_header *pmsg) {
    // Zeiger auf Daten
    uint16_t *pdata = (uint16_t*)pmsg->data;
    // ist die Länge der Nachricht OK?
    if (pmsg->opt.len > SBOXNET_MSG_DATA_LEN || (pmsg->opt.len & 0x01)) {
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
            uint16_t regaddr = pdata[0];
            // und die Daten / Wert
            uint16_t regval  = pdata[1];
            // maske
            uint16_t mask    = (pmsg->opt.len == 6 ? pdata[2] : 0xffff);
            if (pmsg->opt.len != 4 && pmsg->opt.len != 6) {
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
            uint16_t* pdata = (uint16_t*)pmsg->data;
            // Register
            uint16_t regaddr = pdata[0];
            // Bit
            uint8_t val = pmsg->data[2];// value (0x80) und bit (0x0f) nummer
            if (pmsg->opt.len != 3) {
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
            // Gerätebeshcribung setzen
            
            // Länge der Beschreibung
            uint8_t n = pmsg->opt.len;
            // Länge Muss sein [1..(DEV_DESC_MAX_SIZE]
            if (n == 0 || n > DEV_DESC_MAX_SIZE) {
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
                return SBOXNET_ACKRC_INVALID_ARG;
            }
            // ID der Beschreibung
            uint8_t id = pmsg->data[0];
            //ist ID gültig?
            if (id == 0 || id >= DEV_NUM_DESCS) {
    110e:	83 e0       	ldi	r24, 0x03	; 3
    }
    if (rc == SBOXNET_ACKRC_OK) {
		goto send_ok;
    }
send_error:
    pmsg->opt.len = 2;
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	90 7c       	andi	r25, 0xC0	; 192
    1114:	92 60       	ori	r25, 0x02	; 2
    1116:	9c 83       	std	Y+4, r25	; 0x04
    pmsg->data[0] = pmsg->cmd; // ursprüngliches Kommando
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	9e 83       	std	Y+6, r25	; 0x06
    pmsg->data[1] = rc; // Rückgabewert
    111c:	8f 83       	std	Y+7, r24	; 0x07
    pmsg->cmd = 0x80; // mark Kommando als Antwort
    111e:	7d 82       	std	Y+5, r7	; 0x05
send_ok:
    // Antwort senden an Absender
    pmsg->dstaddr = pmsg->srcaddr;
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    pmsg->cmd |= 0x80; // als Antwort auf Kommando markieren
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	80 68       	ori	r24, 0x80	; 128
    1128:	8d 83       	std	Y+5, r24	; 0x05
    sboxnet_send_msg(pmsg);
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	0e 94 70 05 	call	0xae0	; 0xae0 <sboxnet_send_msg>
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
    if (rc > 0) {
        // Kommando war erfolgreich
        com_process_msg(&pmsg->msgh);
    
        // ansonsten war das Ergebnis ein CRC Fehler?
    } else if (rc == SBOXNET_ERR_RECVMSG_CRC) {
    1134:	8e 3f       	cpi	r24, 0xFE	; 254
    1136:	29 f4       	brne	.+10     	; 0x1142 <__DATA_REGION_LENGTH__+0x142>
        // wenn ja, das Errorflag setzen CRC Fehler
        setbit(g_dev_errflags, DEV_ERR_FLG_SBOXNETCRC_b); // crc error
    1138:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <g_dev_errflags>
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <g_dev_errflags>
                // start firmware update
                bldr_activate();
                // never reached
            } else */ {
                // ansonsten User Main ausführen
                do_main();
    1142:	0e 94 5f 09 	call	0x12be	; 0x12be <do_main>
    1146:	bd ce       	rjmp	.-646    	; 0xec2 <main+0xde>
            }
        } else {
            // keine Adresse angefordert
            // schlafen legen
            sleep_mode();
    1148:	f8 01       	movw	r30, r16
    114a:	80 81       	ld	r24, Z
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	80 83       	st	Z, r24
    1150:	88 95       	sleep
    1152:	80 81       	ld	r24, Z
    1154:	8e 7f       	andi	r24, 0xFE	; 254
    1156:	80 83       	st	Z, r24
        }
    }
    1158:	b4 ce       	rjmp	.-664    	; 0xec2 <main+0xde>
        return;  // discard Ack Answers
    }
    
    // Standard Nachricht
    rc = com_process_std_msg(pmsg);
    if (rc == SBOXNET_ACKRC_SEND_NO_ANSWER) {
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	c9 f6       	brne	.-78     	; 0x1110 <__DATA_REGION_LENGTH__+0x110>
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <__DATA_REGION_LENGTH__+0x142>

00001160 <__vector_20>:
    return;
}

// do_before_bldr_activate: Statements die vor der Aktivierung des Bootloaders ausgeführt werden sollen
// return none
void do_before_bldr_activate(void) {
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	8f 93       	push	r24
    116c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    1176:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    117a:	88 23       	and	r24, r24
    117c:	1c f4       	brge	.+6      	; 0x1184 <__vector_20+0x24>
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    1184:	8f 91       	pop	r24
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <do_init_system>:
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b6 e0       	ldi	r27, 0x06	; 6
    1194:	14 96       	adiw	r26, 0x04	; 4
    1196:	1c 92       	st	X, r1
    1198:	14 97       	sbiw	r26, 0x04	; 4
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	8c 93       	st	X, r24
    11a0:	11 97       	sbiw	r26, 0x01	; 1
    11a2:	e0 eb       	ldi	r30, 0xB0	; 176
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 83       	st	Z, r24
    11a8:	50 96       	adiw	r26, 0x10	; 16
    11aa:	1c 92       	st	X, r1
    11ac:	a0 e2       	ldi	r26, 0x20	; 32
    11ae:	b6 e0       	ldi	r27, 0x06	; 6
    11b0:	14 96       	adiw	r26, 0x04	; 4
    11b2:	1c 92       	st	X, r1
    11b4:	14 97       	sbiw	r26, 0x04	; 4
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	8c 93       	st	X, r24
    11ba:	11 97       	sbiw	r26, 0x01	; 1
    11bc:	80 83       	st	Z, r24
    11be:	50 96       	adiw	r26, 0x10	; 16
    11c0:	1c 92       	st	X, r1
    11c2:	a0 e4       	ldi	r26, 0x40	; 64
    11c4:	b6 e0       	ldi	r27, 0x06	; 6
    11c6:	14 96       	adiw	r26, 0x04	; 4
    11c8:	1c 92       	st	X, r1
    11ca:	14 97       	sbiw	r26, 0x04	; 4
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	8c 93       	st	X, r24
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	80 83       	st	Z, r24
    11d4:	50 96       	adiw	r26, 0x10	; 16
    11d6:	1c 92       	st	X, r1
    11d8:	a0 e6       	ldi	r26, 0x60	; 96
    11da:	b6 e0       	ldi	r27, 0x06	; 6
    11dc:	14 96       	adiw	r26, 0x04	; 4
    11de:	1c 92       	st	X, r1
    11e0:	14 97       	sbiw	r26, 0x04	; 4
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	8c 93       	st	X, r24
    11e6:	11 97       	sbiw	r26, 0x01	; 1
    11e8:	80 83       	st	Z, r24
    11ea:	50 96       	adiw	r26, 0x10	; 16
    11ec:	1c 92       	st	X, r1
    11ee:	50 97       	sbiw	r26, 0x10	; 16
    11f0:	e5 e0       	ldi	r30, 0x05	; 5
    11f2:	f0 e2       	ldi	r31, 0x20	; 32
    11f4:	23 e2       	ldi	r18, 0x23	; 35
    11f6:	31 ea       	ldi	r19, 0xA1	; 161
    11f8:	20 83       	st	Z, r18
    11fa:	31 83       	std	Z+1, r19	; 0x01
    11fc:	26 e6       	ldi	r18, 0x66	; 102
    11fe:	35 e5       	ldi	r19, 0x55	; 85
    1200:	22 83       	std	Z+2, r18	; 0x02
    1202:	33 83       	std	Z+3, r19	; 0x03
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	32 e0       	ldi	r19, 0x02	; 2
    1208:	24 83       	std	Z+4, r18	; 0x04
    120a:	35 83       	std	Z+5, r19	; 0x05
    120c:	20 e4       	ldi	r18, 0x40	; 64
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	26 83       	std	Z+6, r18	; 0x06
    1212:	37 83       	std	Z+7, r19	; 0x07
    1214:	10 86       	std	Z+8, r1	; 0x08
    1216:	11 86       	std	Z+9, r1	; 0x09
    1218:	2c ef       	ldi	r18, 0xFC	; 252
    121a:	31 e0       	ldi	r19, 0x01	; 1
    121c:	22 87       	std	Z+10, r18	; 0x0a
    121e:	33 87       	std	Z+11, r19	; 0x0b
    1220:	e0 e4       	ldi	r30, 0x40	; 64
    1222:	f8 e0       	ldi	r31, 0x08	; 8
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	13 82       	std	Z+3, r1	; 0x03
    1228:	14 82       	std	Z+4, r1	; 0x04
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	96 83       	std	Z+6, r25	; 0x06
    122e:	17 82       	std	Z+7, r1	; 0x07
    1230:	84 87       	std	Z+12, r24	; 0x0c
    1232:	81 e1       	ldi	r24, 0x11	; 17
    1234:	9a e7       	ldi	r25, 0x7A	; 122
    1236:	86 a3       	std	Z+38, r24	; 0x26
    1238:	97 a3       	std	Z+39, r25	; 0x27
    123a:	87 e0       	ldi	r24, 0x07	; 7
    123c:	80 83       	st	Z, r24
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	15 96       	adiw	r26, 0x05	; 5
    1242:	8c 93       	st	X, r24
    1244:	15 97       	sbiw	r26, 0x05	; 5
    1246:	80 ec       	ldi	r24, 0xC0	; 192
    1248:	16 96       	adiw	r26, 0x06	; 6
    124a:	8c 93       	st	X, r24
    124c:	08 95       	ret

0000124e <do_reg_read>:
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	08 95       	ret

00001252 <do_reg_write>:
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	08 95       	ret

00001256 <do_msg>:
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	08 95       	ret

0000125a <do_setup>:
    125a:	78 94       	sei
    125c:	08 95       	ret

0000125e <exec_step0>:
}


void exec_step0() {
    // first porta auf alle HIGH
    port_out(PORTA) = 0xff;
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7ef604>
    // PC* auf LOW
    port_out(PORTC) = 0;
    1264:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <__TEXT_REGION_LENGTH__+0x7ef644>
    
    port_out(PORTB) = 0xff; // PB all 1
    1268:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x7ef624>
    port_clr(PORTD, 0x0f); // PD0..3 auf LOW
    126c:	e0 e6       	ldi	r30, 0x60	; 96
    126e:	f6 e0       	ldi	r31, 0x06	; 6
    1270:	8f e0       	ldi	r24, 0x0F	; 15
    1272:	86 83       	std	Z+6, r24	; 0x06
    
    port_set(PORTD, 0x30); // PD4..5 H
    1274:	80 e3       	ldi	r24, 0x30	; 48
    1276:	85 83       	std	Z+5, r24	; 0x05
    port_clr(PORTD, 0xc0); // PD6..7 L
    1278:	80 ec       	ldi	r24, 0xC0	; 192
    127a:	86 83       	std	Z+6, r24	; 0x06
    127c:	08 95       	ret

0000127e <exec_step1>:
}

void exec_step1() {
    // first porta auf alle L
    port_out(PORTA) = 0;
    127e:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x7ef604>
    // PC* auf H
    port_out(PORTC) = 0xff;
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x7ef644>
    
    port_out(PORTB) = 0; // PB all 0
    1288:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x7ef624>
    port_set(PORTD, 0x0f); // PD0..3 auf H
    128c:	e0 e6       	ldi	r30, 0x60	; 96
    128e:	f6 e0       	ldi	r31, 0x06	; 6
    1290:	8f e0       	ldi	r24, 0x0F	; 15
    1292:	85 83       	std	Z+5, r24	; 0x05
    
    port_clr(PORTD, 0x30); // PD4..5 L
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	86 83       	std	Z+6, r24	; 0x06
    port_set(PORTD, 0xc0); // PD6..7 H
    1298:	80 ec       	ldi	r24, 0xC0	; 192
    129a:	85 83       	std	Z+5, r24	; 0x05
    129c:	08 95       	ret

0000129e <exec_step2>:
}

void exec_step2() {
    // first porta auf  00001111
    port_out(PORTA) = 0x0f;
    129e:	8f e0       	ldi	r24, 0x0F	; 15
    12a0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7ef604>
    // PC* auf 11110000
    port_out(PORTC) = 0xf0;
    12a4:	90 ef       	ldi	r25, 0xF0	; 240
    12a6:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <__TEXT_REGION_LENGTH__+0x7ef644>
    
    port_out(PORTB) = 0; // PB all 0
    12aa:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x7ef624>
    port_set(PORTD, 0x0f); // PD0..3 auf H
    12ae:	e0 e6       	ldi	r30, 0x60	; 96
    12b0:	f6 e0       	ldi	r31, 0x06	; 6
    12b2:	85 83       	std	Z+5, r24	; 0x05
    
    port_clr(PORTD, 0x30); // PD4..5 L
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	86 83       	std	Z+6, r24	; 0x06
    port_set(PORTD, 0xc0); // PD6..7 H
    12b8:	80 ec       	ldi	r24, 0xC0	; 192
    12ba:	85 83       	std	Z+5, r24	; 0x05
    12bc:	08 95       	ret

000012be <do_main>:
// do_main: Hauptroutine
// wird periodisch aufgerufen
// return none

void do_main(void) {
    sei();
    12be:	78 94       	sei
    //exec_step1();
    //exec_step2();
    //step=3;
    
    
    switch(step)
    12c0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <do_main+0x18>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	41 f0       	breq	.+16     	; 0x12dc <do_main+0x1e>
    12cc:	81 11       	cpse	r24, r1
    12ce:	08 c0       	rjmp	.+16     	; 0x12e0 <do_main+0x22>
    {
        case 0:
        {
            exec_step0();
    12d0:	0e 94 2f 09 	call	0x125e	; 0x125e <exec_step0>
            //step++;
            break;
    12d4:	08 95       	ret
        }
        case 1:
        {
            exec_step1();
    12d6:	0e 94 3f 09 	call	0x127e	; 0x127e <exec_step1>
            //step++;
            break;
    12da:	08 95       	ret
        }
        case 2:
        {
            exec_step2();
    12dc:	0e 94 4f 09 	call	0x129e	; 0x129e <exec_step2>
    12e0:	08 95       	ret

000012e2 <eeprom_update_block>:
    12e2:	dc 01       	movw	r26, r24
    12e4:	a4 0f       	add	r26, r20
    12e6:	b5 1f       	adc	r27, r21
    12e8:	41 50       	subi	r20, 0x01	; 1
    12ea:	50 40       	sbci	r21, 0x00	; 0
    12ec:	48 f0       	brcs	.+18     	; 0x1300 <eeprom_update_block+0x1e>
    12ee:	cb 01       	movw	r24, r22
    12f0:	84 0f       	add	r24, r20
    12f2:	95 1f       	adc	r25, r21
    12f4:	2e 91       	ld	r18, -X
    12f6:	0e 94 82 09 	call	0x1304	; 0x1304 <eeprom_update_r18>
    12fa:	41 50       	subi	r20, 0x01	; 1
    12fc:	50 40       	sbci	r21, 0x00	; 0
    12fe:	d0 f7       	brcc	.-12     	; 0x12f4 <eeprom_update_block+0x12>
    1300:	08 95       	ret

00001302 <eeprom_update_byte>:
    1302:	26 2f       	mov	r18, r22

00001304 <eeprom_update_r18>:
    1304:	0e 94 b9 09 	call	0x1372	; 0x1372 <eeprom_mapen>
    1308:	00 80       	ld	r0, Z
    130a:	02 16       	cp	r0, r18
    130c:	19 f0       	breq	.+6      	; 0x1314 <eeprom_update_r18+0x10>
    130e:	0e 94 93 09 	call	0x1326	; 0x1326 <eeprom_write_r18>
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	08 95       	ret

00001318 <eeprom_update_word>:
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	27 2f       	mov	r18, r23
    131c:	0e 94 82 09 	call	0x1304	; 0x1304 <eeprom_update_r18>
    1320:	0c 94 81 09 	jmp	0x1302	; 0x1302 <eeprom_update_byte>

00001324 <eeprom_write_byte>:
    1324:	26 2f       	mov	r18, r22

00001326 <eeprom_write_r18>:
    1326:	e0 ec       	ldi	r30, 0xC0	; 192
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	37 85       	ldd	r19, Z+15	; 0x0f
    132c:	37 fd       	sbrc	r19, 7
    132e:	fd cf       	rjmp	.-6      	; 0x132a <eeprom_write_r18+0x4>
    1330:	34 85       	ldd	r19, Z+12	; 0x0c
    1332:	37 7f       	andi	r19, 0xF7	; 247
    1334:	34 87       	std	Z+12, r19	; 0x0c
    1336:	37 85       	ldd	r19, Z+15	; 0x0f
    1338:	31 ff       	sbrs	r19, 1
    133a:	09 c0       	rjmp	.+18     	; 0x134e <eeprom_write_r18+0x28>
    133c:	36 e3       	ldi	r19, 0x36	; 54
    133e:	32 87       	std	Z+10, r19	; 0x0a
    1340:	38 ed       	ldi	r19, 0xD8	; 216
    1342:	34 bf       	out	0x34, r19	; 52
    1344:	31 e0       	ldi	r19, 0x01	; 1
    1346:	33 87       	std	Z+11, r19	; 0x0b
    1348:	37 85       	ldd	r19, Z+15	; 0x0f
    134a:	37 fd       	sbrc	r19, 7
    134c:	fd cf       	rjmp	.-6      	; 0x1348 <eeprom_write_r18+0x22>
    134e:	33 e3       	ldi	r19, 0x33	; 51
    1350:	32 87       	std	Z+10, r19	; 0x0a
    1352:	80 83       	st	Z, r24
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	12 82       	std	Z+2, r1	; 0x02
    1358:	24 83       	std	Z+4, r18	; 0x04
    135a:	25 e3       	ldi	r18, 0x35	; 53
    135c:	22 87       	std	Z+10, r18	; 0x0a
    135e:	28 ed       	ldi	r18, 0xD8	; 216
    1360:	31 e0       	ldi	r19, 0x01	; 1
    1362:	24 bf       	out	0x34, r18	; 52
    1364:	33 87       	std	Z+11, r19	; 0x0b
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	08 95       	ret

0000136a <eeprom_read_byte>:
    136a:	03 d0       	rcall	.+6      	; 0x1372 <eeprom_mapen>
    136c:	80 81       	ld	r24, Z
    136e:	99 27       	eor	r25, r25
    1370:	08 95       	ret

00001372 <eeprom_mapen>:
    1372:	e0 ec       	ldi	r30, 0xC0	; 192
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	37 85       	ldd	r19, Z+15	; 0x0f
    1378:	37 fd       	sbrc	r19, 7
    137a:	fd cf       	rjmp	.-6      	; 0x1376 <eeprom_mapen+0x4>
    137c:	34 85       	ldd	r19, Z+12	; 0x0c
    137e:	38 60       	ori	r19, 0x08	; 8
    1380:	34 87       	std	Z+12, r19	; 0x0c
    1382:	fc 01       	movw	r30, r24
    1384:	e0 50       	subi	r30, 0x00	; 0
    1386:	f0 4f       	sbci	r31, 0xF0	; 240
    1388:	08 95       	ret

0000138a <_exit>:
    138a:	f8 94       	cli

0000138c <__stop_program>:
    138c:	ff cf       	rjmp	.-2      	; 0x138c <__stop_program>
