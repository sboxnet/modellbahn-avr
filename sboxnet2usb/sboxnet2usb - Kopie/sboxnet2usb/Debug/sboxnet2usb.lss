
sboxnet2usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002fc4  00003078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fc4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  00800102  00800102  0000307a  2**0
                  ALLOC
  3 .eeprom       00000042  00810000  00810000  0000307a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00003130  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d04  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c19  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026b4  00000000  00000000  00006ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cbc  00000000  00000000  000094a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012da  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b5a  00000000  00000000  0000b43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  0000cf94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
       c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      2c:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_11>
      30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      40:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_16>
      44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      48:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_18>
      4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      5c:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_23>
      60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      64:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_25>
      68:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      6c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      70:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      74:	16 12       	cpse	r1, r22
      76:	16 12       	cpse	r1, r22
      78:	16 12       	cpse	r1, r22
      7a:	16 12       	cpse	r1, r22
      7c:	16 12       	cpse	r1, r22
      7e:	04 12       	cpse	r0, r20
      80:	fb 11       	cpse	r31, r11
      82:	16 12       	cpse	r1, r22
      84:	f4 11       	cpse	r31, r4
      86:	0d 12       	cpse	r0, r29
      88:	16 12       	cpse	r1, r22
      8a:	16 12       	cpse	r1, r22
      8c:	16 12       	cpse	r1, r22
      8e:	17 14       	cp	r1, r7
      90:	8b 14       	cp	r8, r11
      92:	a2 14       	cp	r10, r2
      94:	12 15       	cp	r17, r2
      96:	f9 15       	cp	r31, r9
      98:	f9 15       	cp	r31, r9
      9a:	f9 15       	cp	r31, r9
      9c:	f9 15       	cp	r31, r9
      9e:	f9 15       	cp	r31, r9
      a0:	f9 15       	cp	r31, r9
      a2:	51 15       	cp	r21, r1
      a4:	66 15       	cp	r22, r6
      a6:	7b 15       	cp	r23, r11
      a8:	90 15       	cp	r25, r0
      aa:	f9 15       	cp	r31, r9
      ac:	f9 15       	cp	r31, r9
      ae:	a5 15       	cp	r26, r5
      b0:	f9 15       	cp	r31, r9
      b2:	f9 15       	cp	r31, r9
      b4:	f9 15       	cp	r31, r9
      b6:	f9 15       	cp	r31, r9
      b8:	f9 15       	cp	r31, r9
      ba:	f9 15       	cp	r31, r9
      bc:	f9 15       	cp	r31, r9
      be:	f9 15       	cp	r31, r9
      c0:	f9 15       	cp	r31, r9
      c2:	f9 15       	cp	r31, r9
      c4:	f9 15       	cp	r31, r9
      c6:	f9 15       	cp	r31, r9
      c8:	f9 15       	cp	r31, r9
      ca:	f9 15       	cp	r31, r9
      cc:	f9 15       	cp	r31, r9
      ce:	f9 15       	cp	r31, r9
      d0:	c1 15       	cp	r28, r1

000000d2 <__trampolines_end>:
      d2:	12 01       	movw	r2, r4
      d4:	10 01       	movw	r2, r0
      d6:	ff ff       	.word	0xffff	; ????
      d8:	ff 40       	sbci	r31, 0x0F	; 15
      da:	23 f1       	brvs	.+72     	; 0x124 <g_string1_P+0x2a>
      dc:	02 a0       	ldd	r0, Z+34	; 0x22
      de:	01 01       	movw	r0, r2
      e0:	01 02       	muls	r16, r17
      e2:	03 01       	movw	r0, r6

000000e4 <g_config_1_P>:
      e4:	09 02 12 00 01 01 00 80 19 09 04 00 00 00 ff ff     ................
      f4:	ff 00                                               ..

000000f6 <g_string0_P>:
      f6:	04 03 09 04                                         ....

000000fa <g_string1_P>:
      fa:	44 03 54 00 68 00 6f 00 6d 00 61 00 73 00 20 00     D.T.h.o.m.a.s. .
     10a:	4d 00 61 00 69 00 65 00 72 00 20 00 3c 00 62 00     M.a.i.e.r. .<.b.
     11a:	61 00 6c 00 61 00 67 00 69 00 40 00 6a 00 75 00     a.l.a.g.i.@.j.u.
     12a:	73 00 74 00 6d 00 61 00 69 00 6c 00 2e 00 64 00     s.t.m.a.i.l...d.
     13a:	65 00 3e 00 00 00                                   e.>...

00000140 <g_string2_P>:
     140:	18 03 73 00 62 00 6f 00 78 00 6e 00 65 00 74 00     ..s.b.o.x.n.e.t.
     150:	32 00 75 00 73 00 62 00 00 00                       2.u.s.b...

0000015a <g_strings_P>:
     15a:	f6 00 fa 00 40 01                                   ....@.

00000160 <epsizemap.2750>:
     160:	08 10 20 40                                         .. @

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d4 e0       	ldi	r29, 0x04	; 4
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e4 ec       	ldi	r30, 0xC4	; 196
     178:	ff e2       	ldi	r31, 0x2F	; 47
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a2 30       	cpi	r26, 0x02	; 2
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	23 e0       	ldi	r18, 0x03	; 3
     188:	a2 e0       	ldi	r26, 0x02	; 2
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a8 34       	cpi	r26, 0x48	; 72
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <stack_init8>:
            break;
        }
    }
    DPSTR("SE\n");
    return USB_RC_OK;
}
     196:	08 e4       	ldi	r16, 0x48	; 72
     198:	13 e0       	ldi	r17, 0x03	; 3
     19a:	07 c0       	rjmp	.+14     	; 0x1aa <stack_init8+0x14>
     19c:	c8 01       	movw	r24, r16
     19e:	8c 01       	movw	r16, r24
     1a0:	0f 5f       	subi	r16, 0xFF	; 255
     1a2:	1f 4f       	sbci	r17, 0xFF	; 255
     1a4:	25 ea       	ldi	r18, 0xA5	; 165
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
     1aa:	f4 e0       	ldi	r31, 0x04	; 4
     1ac:	0f 3f       	cpi	r16, 0xFF	; 255
     1ae:	1f 07       	cpc	r17, r31
     1b0:	a8 f3       	brcs	.-22     	; 0x19c <stack_init8+0x6>
     1b2:	00 00       	nop
     1b4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <main>
     1b8:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <_exit>

000001bc <__bad_interrupt>:
     1bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c0 <_crc_ibutton_update>:
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <_crc_ibutton_update+0x6>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <_crc_ibutton_update+0x8>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	8b 83       	std	Y+3, r24	; 0x03
     1ce:	6c 83       	std	Y+4, r22	; 0x04
     1d0:	8b 81       	ldd	r24, Y+3	; 0x03
     1d2:	9c 81       	ldd	r25, Y+4	; 0x04
     1d4:	89 27       	eor	r24, r25
     1d6:	28 e0       	ldi	r18, 0x08	; 8
     1d8:	9c e8       	ldi	r25, 0x8C	; 140
     1da:	86 95       	lsr	r24
     1dc:	08 f4       	brcc	.+2      	; 0x1e0 <_crc_ibutton_update+0x20>
     1de:	89 27       	eor	r24, r25
     1e0:	2a 95       	dec	r18
     1e2:	d9 f7       	brne	.-10     	; 0x1da <_crc_ibutton_update+0x1a>
     1e4:	8b 83       	std	Y+3, r24	; 0x03
     1e6:	29 83       	std	Y+1, r18	; 0x01
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <__iCliRetVal>:
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	f8 94       	cli
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <__iRestore>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	00 d0       	rcall	.+0      	; 0x212 <__iRestore+0x6>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	8f e5       	ldi	r24, 0x5F	; 95
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	29 81       	ldd	r18, Y+1	; 0x01
     220:	3a 81       	ldd	r19, Y+2	; 0x02
     222:	f9 01       	movw	r30, r18
     224:	20 81       	ld	r18, Z
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
     22a:	00 00       	nop
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <prng_xorshift8>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	1f 92       	push	r1
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	98 2f       	mov	r25, r24
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	89 27       	eor	r24, r25
     252:	89 83       	std	Y+1, r24	; 0x01
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	86 95       	lsr	r24
     258:	99 81       	ldd	r25, Y+1	; 0x01
     25a:	89 27       	eor	r24, r25
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	88 0f       	add	r24, r24
     262:	88 0f       	add	r24, r24
     264:	98 2f       	mov	r25, r24
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	89 27       	eor	r24, r25
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0f 90       	pop	r0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <sboxnet_debug_inc_recverrors>:
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <g_sboxnet+0x223>
     282:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <g_sboxnet+0x224>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <g_sboxnet+0x224>
     28c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <g_sboxnet+0x223>
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <sboxnet_debug_inc_recverr_dor>:
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <g_sboxnet+0x229>
     2a4:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <g_sboxnet+0x22a>
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <g_sboxnet+0x22a>
     2ae:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <g_sboxnet+0x229>
     2b2:	00 00       	nop
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <sboxnet_debug_inc_recv_byte>:
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <g_sboxnet+0x20d>
     2c6:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <g_sboxnet+0x20e>
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <g_sboxnet+0x20e>
     2d0:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <g_sboxnet+0x20d>
     2d4:	00 00       	nop
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <sboxnet_crc8_init>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <sboxnet_crc8_add>:
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <sboxnet_crc8_add+0x6>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	6a 83       	std	Y+2, r22	; 0x02
     2fa:	6a 81       	ldd	r22, Y+2	; 0x02
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_crc_ibutton_update>
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <sboxnet_crc8_ok>:
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	99 81       	ldd	r25, Y+1	; 0x01
     31c:	99 23       	and	r25, r25
     31e:	09 f0       	breq	.+2      	; 0x322 <sboxnet_crc8_ok+0x16>
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <sboxnet_prandom>:
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_sboxnet+0x8>
     336:	0e 94 1b 01 	call	0x236	; 0x236 <prng_xorshift8>
     33a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_sboxnet+0x8>
     33e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_sboxnet+0x8>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <sboxnet_rb_init>:
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <sboxnet_rb_init+0x6>
     34e:	1f 92       	push	r1
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	6b 83       	std	Y+3, r22	; 0x03
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	fc 01       	movw	r30, r24
     360:	10 82       	st	Z, r1
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	fc 01       	movw	r30, r24
     368:	11 82       	std	Z+1, r1	; 0x01
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	fc 01       	movw	r30, r24
     370:	12 82       	std	Z+2, r1	; 0x02
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	13 82       	std	Z+3, r1	; 0x03
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	fc 01       	movw	r30, r24
     380:	14 82       	std	Z+4, r1	; 0x04
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	fc 01       	movw	r30, r24
     388:	15 82       	std	Z+5, r1	; 0x05
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	fc 01       	movw	r30, r24
     390:	16 82       	std	Z+6, r1	; 0x06
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	2b 81       	ldd	r18, Y+3	; 0x03
     398:	fc 01       	movw	r30, r24
     39a:	27 83       	std	Z+7, r18	; 0x07
     39c:	00 00       	nop
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <sboxnet_rb_getcount>:
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <sboxnet_rb_getcount+0x6>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	fc 01       	movw	r30, r24
     3be:	86 81       	ldd	r24, Z+6	; 0x06
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <sboxnet_rb_getfree>:
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <sboxnet_rb_getfree+0x6>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	fc 01       	movw	r30, r24
     3de:	27 81       	ldd	r18, Z+7	; 0x07
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	86 81       	ldd	r24, Z+6	; 0x06
     3e8:	28 1b       	sub	r18, r24
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	fc 01       	movw	r30, r24
     3f0:	84 81       	ldd	r24, Z+4	; 0x04
     3f2:	f2 2f       	mov	r31, r18
     3f4:	f8 1b       	sub	r31, r24
     3f6:	8f 2f       	mov	r24, r31
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <sboxnet_rb_write_commit>:
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <sboxnet_rb_write_commit+0x6>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	86 81       	ldd	r24, Z+6	; 0x06
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	fc 01       	movw	r30, r24
     422:	84 81       	ldd	r24, Z+4	; 0x04
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	28 0f       	add	r18, r24
     42a:	39 1f       	adc	r19, r25
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	fc 01       	movw	r30, r24
     432:	87 81       	ldd	r24, Z+7	; 0x07
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	82 17       	cp	r24, r18
     43a:	93 07       	cpc	r25, r19
     43c:	2c f4       	brge	.+10     	; 0x448 <sboxnet_rb_write_commit+0x46>
     43e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
     442:	84 60       	ori	r24, 0x04	; 4
     444:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	fc 01       	movw	r30, r24
     44e:	26 81       	ldd	r18, Z+6	; 0x06
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	fc 01       	movw	r30, r24
     456:	84 81       	ldd	r24, Z+4	; 0x04
     458:	28 0f       	add	r18, r24
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	fc 01       	movw	r30, r24
     460:	26 83       	std	Z+6, r18	; 0x06
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	fc 01       	movw	r30, r24
     468:	14 82       	std	Z+4, r1	; 0x04
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	fc 01       	movw	r30, r24
     470:	23 81       	ldd	r18, Z+3	; 0x03
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	fc 01       	movw	r30, r24
     478:	25 83       	std	Z+5, r18	; 0x05
     47a:	00 00       	nop
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <sboxnet_rb_write_rollback>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <sboxnet_rb_write_rollback+0x6>
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	14 82       	std	Z+4, r1	; 0x04
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	fc 01       	movw	r30, r24
     4a2:	25 81       	ldd	r18, Z+5	; 0x05
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	fc 01       	movw	r30, r24
     4aa:	23 83       	std	Z+3, r18	; 0x03
     4ac:	00 00       	nop
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <sboxnet_rb_write>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 d0       	rcall	.+0      	; 0x4be <sboxnet_rb_write+0x6>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <sboxnet_rb_write+0x8>
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	9b 83       	std	Y+3, r25	; 0x03
     4c6:	8a 83       	std	Y+2, r24	; 0x02
     4c8:	6c 83       	std	Y+4, r22	; 0x04
     4ca:	19 82       	std	Y+1, r1	; 0x01
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	9b 81       	ldd	r25, Y+3	; 0x03
     4d0:	fc 01       	movw	r30, r24
     4d2:	26 81       	ldd	r18, Z+6	; 0x06
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	9b 81       	ldd	r25, Y+3	; 0x03
     4d8:	fc 01       	movw	r30, r24
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	28 0f       	add	r18, r24
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	9b 81       	ldd	r25, Y+3	; 0x03
     4e2:	fc 01       	movw	r30, r24
     4e4:	87 81       	ldd	r24, Z+7	; 0x07
     4e6:	28 17       	cp	r18, r24
     4e8:	98 f5       	brcc	.+102    	; 0x550 <__stack+0x51>
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	9b 81       	ldd	r25, Y+3	; 0x03
     4ee:	fc 01       	movw	r30, r24
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	28 0f       	add	r18, r24
     4f6:	8a 81       	ldd	r24, Y+2	; 0x02
     4f8:	9b 81       	ldd	r25, Y+3	; 0x03
     4fa:	fc 01       	movw	r30, r24
     4fc:	24 83       	std	Z+4, r18	; 0x04
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	9b 81       	ldd	r25, Y+3	; 0x03
     502:	fc 01       	movw	r30, r24
     504:	83 81       	ldd	r24, Z+3	; 0x03
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	2a 81       	ldd	r18, Y+2	; 0x02
     50c:	3b 81       	ldd	r19, Y+3	; 0x03
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	08 96       	adiw	r24, 0x08	; 8
     514:	2c 81       	ldd	r18, Y+4	; 0x04
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	9b 81       	ldd	r25, Y+3	; 0x03
     51e:	fc 01       	movw	r30, r24
     520:	83 81       	ldd	r24, Z+3	; 0x03
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	28 0f       	add	r18, r24
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	9b 81       	ldd	r25, Y+3	; 0x03
     52a:	fc 01       	movw	r30, r24
     52c:	23 83       	std	Z+3, r18	; 0x03
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	9b 81       	ldd	r25, Y+3	; 0x03
     532:	fc 01       	movw	r30, r24
     534:	23 81       	ldd	r18, Z+3	; 0x03
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	9b 81       	ldd	r25, Y+3	; 0x03
     53a:	fc 01       	movw	r30, r24
     53c:	87 81       	ldd	r24, Z+7	; 0x07
     53e:	28 17       	cp	r18, r24
     540:	20 f0       	brcs	.+8      	; 0x54a <__stack+0x4b>
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	9b 81       	ldd	r25, Y+3	; 0x03
     546:	fc 01       	movw	r30, r24
     548:	13 82       	std	Z+3, r1	; 0x03
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	89 83       	std	Y+1, r24	; 0x01
     54e:	06 c0       	rjmp	.+12     	; 0x55c <__stack+0x5d>
     550:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
     554:	84 60       	ori	r24, 0x04	; 4
     556:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
     55a:	19 82       	std	Y+1, r1	; 0x01
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <sboxnet_rb_put_first>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <sboxnet_rb_put_first+0x6>
     572:	1f 92       	push	r1
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	6b 83       	std	Y+3, r22	; 0x03
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	fc 01       	movw	r30, r24
     584:	85 81       	ldd	r24, Z+5	; 0x05
     586:	88 2f       	mov	r24, r24
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
     592:	08 96       	adiw	r24, 0x08	; 8
     594:	2b 81       	ldd	r18, Y+3	; 0x03
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
     59a:	00 00       	nop
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <sboxnet_rb_write_count>:
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <sboxnet_rb_write_count+0x6>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ba:	fc 01       	movw	r30, r24
     5bc:	84 81       	ldd	r24, Z+4	; 0x04
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <sboxnet_rb_read_commit>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <sboxnet_rb_read_commit+0x6>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	9a 83       	std	Y+2, r25	; 0x02
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	26 81       	ldd	r18, Z+6	; 0x06
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	fc 01       	movw	r30, r24
     5e4:	81 81       	ldd	r24, Z+1	; 0x01
     5e6:	28 17       	cp	r18, r24
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <sboxnet_rb_read_commit+0x2c>
     5ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
     5ee:	82 60       	ori	r24, 0x02	; 2
     5f0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	26 81       	ldd	r18, Z+6	; 0x06
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	28 1b       	sub	r18, r24
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	fc 01       	movw	r30, r24
     60c:	26 83       	std	Z+6, r18	; 0x06
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	fc 01       	movw	r30, r24
     614:	11 82       	std	Z+1, r1	; 0x01
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	fc 01       	movw	r30, r24
     61c:	20 81       	ld	r18, Z
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	fc 01       	movw	r30, r24
     624:	22 83       	std	Z+2, r18	; 0x02
     626:	00 00       	nop
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <sboxnet_rb_read_rollback>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	00 d0       	rcall	.+0      	; 0x638 <sboxnet_rb_read_rollback+0x6>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	9a 83       	std	Y+2, r25	; 0x02
     63e:	89 83       	std	Y+1, r24	; 0x01
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	fc 01       	movw	r30, r24
     646:	11 82       	std	Z+1, r1	; 0x01
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	22 81       	ldd	r18, Z+2	; 0x02
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
     658:	00 00       	nop
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <sboxnet_rb_read>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	00 d0       	rcall	.+0      	; 0x66a <sboxnet_rb_read+0x6>
     66a:	1f 92       	push	r1
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	9b 83       	std	Y+3, r25	; 0x03
     672:	8a 83       	std	Y+2, r24	; 0x02
     674:	19 82       	std	Y+1, r1	; 0x01
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	9b 81       	ldd	r25, Y+3	; 0x03
     67a:	fc 01       	movw	r30, r24
     67c:	26 81       	ldd	r18, Z+6	; 0x06
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	fc 01       	movw	r30, r24
     684:	81 81       	ldd	r24, Z+1	; 0x01
     686:	82 17       	cp	r24, r18
     688:	88 f5       	brcc	.+98     	; 0x6ec <sboxnet_rb_read+0x88>
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	9b 81       	ldd	r25, Y+3	; 0x03
     68e:	fc 01       	movw	r30, r24
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	28 0f       	add	r18, r24
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	9b 81       	ldd	r25, Y+3	; 0x03
     69a:	fc 01       	movw	r30, r24
     69c:	21 83       	std	Z+1, r18	; 0x01
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	9b 81       	ldd	r25, Y+3	; 0x03
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2a 81       	ldd	r18, Y+2	; 0x02
     6ac:	3b 81       	ldd	r19, Y+3	; 0x03
     6ae:	82 0f       	add	r24, r18
     6b0:	93 1f       	adc	r25, r19
     6b2:	08 96       	adiw	r24, 0x08	; 8
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	9b 81       	ldd	r25, Y+3	; 0x03
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	28 0f       	add	r18, r24
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	9b 81       	ldd	r25, Y+3	; 0x03
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 81       	ld	r18, Z
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	9b 81       	ldd	r25, Y+3	; 0x03
     6da:	fc 01       	movw	r30, r24
     6dc:	87 81       	ldd	r24, Z+7	; 0x07
     6de:	28 17       	cp	r18, r24
     6e0:	50 f0       	brcs	.+20     	; 0x6f6 <sboxnet_rb_read+0x92>
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	9b 81       	ldd	r25, Y+3	; 0x03
     6e6:	fc 01       	movw	r30, r24
     6e8:	10 82       	st	Z, r1
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <sboxnet_rb_read+0x92>
     6ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <sboxnet_rb_read_getone>:
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <sboxnet_rb_read_getone+0x6>
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9b 83       	std	Y+3, r25	; 0x03
     712:	8a 83       	std	Y+2, r24	; 0x02
     714:	19 82       	std	Y+1, r1	; 0x01
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	9b 81       	ldd	r25, Y+3	; 0x03
     71a:	fc 01       	movw	r30, r24
     71c:	26 81       	ldd	r18, Z+6	; 0x06
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	fc 01       	movw	r30, r24
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	82 17       	cp	r24, r18
     728:	78 f4       	brcc	.+30     	; 0x748 <sboxnet_rb_read_getone+0x44>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	9b 81       	ldd	r25, Y+3	; 0x03
     72e:	fc 01       	movw	r30, r24
     730:	80 81       	ld	r24, Z
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	2a 81       	ldd	r18, Y+2	; 0x02
     738:	3b 81       	ldd	r19, Y+3	; 0x03
     73a:	82 0f       	add	r24, r18
     73c:	93 1f       	adc	r25, r19
     73e:	08 96       	adiw	r24, 0x08	; 8
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	05 c0       	rjmp	.+10     	; 0x752 <sboxnet_rb_read_getone+0x4e>
     748:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
     74c:	82 60       	ori	r24, 0x02	; 2
     74e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <sboxnet_rb_can_read_bytes>:
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <sboxnet_rb_can_read_bytes+0x6>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	9a 83       	std	Y+2, r25	; 0x02
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	26 81       	ldd	r18, Z+6	; 0x06
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	fc 01       	movw	r30, r24
     77c:	81 81       	ldd	r24, Z+1	; 0x01
     77e:	f2 2f       	mov	r31, r18
     780:	f8 1b       	sub	r31, r24
     782:	8f 2f       	mov	r24, r31
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <sboxnet_receiver_enable>:
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	88 ec       	ldi	r24, 0xC8	; 200
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	28 ec       	ldi	r18, 0xC8	; 200
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	21 60       	ori	r18, 0x01	; 1
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
     7a8:	89 ec       	ldi	r24, 0xC9	; 201
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	29 ec       	ldi	r18, 0xC9	; 201
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	20 69       	ori	r18, 0x90	; 144
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	00 00       	nop
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <sboxnet_init>:
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <sboxnet_init+0x6>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	9a 83       	std	Y+2, r25	; 0x02
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	43 e3       	ldi	r20, 0x33	; 51
     7da:	52 e0       	ldi	r21, 0x02	; 2
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <memset>
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	fc 01       	movw	r30, r24
     7ea:	10 82       	st	Z, r1
     7ec:	86 e6       	ldi	r24, 0x66	; 102
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 81       	ld	r18, Z
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 87       	std	Z+8, r18	; 0x08
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	29 e1       	ldi	r18, 0x19	; 25
     802:	fc 01       	movw	r30, r24
     804:	22 83       	std	Z+2, r18	; 0x02
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	09 96       	adiw	r24, 0x09	; 9
     80c:	6a ef       	ldi	r22, 0xFA	; 250
     80e:	0e 94 a4 01 	call	0x348	; 0x348 <sboxnet_rb_init>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	85 5f       	subi	r24, 0xF5	; 245
     818:	9e 4f       	sbci	r25, 0xFE	; 254
     81a:	6a ef       	ldi	r22, 0xFA	; 250
     81c:	0e 94 a4 01 	call	0x348	; 0x348 <sboxnet_rb_init>
     820:	8a e2       	ldi	r24, 0x2A	; 42
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	2a e2       	ldi	r18, 0x2A	; 42
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	f9 01       	movw	r30, r18
     82a:	20 81       	ld	r18, Z
     82c:	2b 7f       	andi	r18, 0xFB	; 251
     82e:	fc 01       	movw	r30, r24
     830:	20 83       	st	Z, r18
     832:	8b e2       	ldi	r24, 0x2B	; 43
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	2b e2       	ldi	r18, 0x2B	; 43
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	24 60       	ori	r18, 0x04	; 4
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18
     844:	8b e2       	ldi	r24, 0x2B	; 43
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	2b e2       	ldi	r18, 0x2B	; 43
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	f9 01       	movw	r30, r18
     84e:	20 81       	ld	r18, Z
     850:	28 60       	ori	r18, 0x08	; 8
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
     856:	8a e2       	ldi	r24, 0x2A	; 42
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	2a e2       	ldi	r18, 0x2A	; 42
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	28 60       	ori	r18, 0x08	; 8
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
     868:	8d e3       	ldi	r24, 0x3D	; 61
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	2d e3       	ldi	r18, 0x3D	; 61
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	2b 7f       	andi	r18, 0xFB	; 251
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	89 e6       	ldi	r24, 0x69	; 105
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	29 e6       	ldi	r18, 0x69	; 105
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	2f 7d       	andi	r18, 0xDF	; 223
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	89 e6       	ldi	r24, 0x69	; 105
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	29 e6       	ldi	r18, 0x69	; 105
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	20 61       	ori	r18, 0x10	; 16
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
     89e:	8c e3       	ldi	r24, 0x3C	; 60
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	24 e0       	ldi	r18, 0x04	; 4
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
     8a8:	8d ec       	ldi	r24, 0xCD	; 205
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	fc 01       	movw	r30, r24
     8ae:	10 82       	st	Z, r1
     8b0:	8c ec       	ldi	r24, 0xCC	; 204
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	23 e0       	ldi	r18, 0x03	; 3
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
     8ba:	88 ec       	ldi	r24, 0xC8	; 200
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	20 e4       	ldi	r18, 0x40	; 64
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
     8c4:	8a ec       	ldi	r24, 0xCA	; 202
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	26 e2       	ldi	r18, 0x26	; 38
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
     8ce:	89 ec       	ldi	r24, 0xC9	; 201
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	24 e0       	ldi	r18, 0x04	; 4
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
     8d8:	0e 94 c7 03 	call	0x78e	; 0x78e <sboxnet_receiver_enable>
     8dc:	00 00       	nop
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <sboxnet_deinit>:
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <sboxnet_deinit+0x6>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	8f e5       	ldi	r24, 0x5F	; 95
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc 01       	movw	r30, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	8a 83       	std	Y+2, r24	; 0x02
     8fc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	2c c0       	rjmp	.+88     	; 0x95c <sboxnet_deinit+0x74>
     904:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_sboxnet>
     908:	89 ec       	ldi	r24, 0xC9	; 201
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	24 e0       	ldi	r18, 0x04	; 4
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	8a e2       	ldi	r24, 0x2A	; 42
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	2a e2       	ldi	r18, 0x2A	; 42
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	2b 7f       	andi	r18, 0xFB	; 251
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
     924:	8a e2       	ldi	r24, 0x2A	; 42
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2a e2       	ldi	r18, 0x2A	; 42
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	27 7f       	andi	r18, 0xF7	; 247
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
     936:	8b e2       	ldi	r24, 0x2B	; 43
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	2b e2       	ldi	r18, 0x2B	; 43
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	28 60       	ori	r18, 0x08	; 8
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
     948:	8d e3       	ldi	r24, 0x3D	; 61
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2d e3       	ldi	r18, 0x3D	; 61
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	2b 7f       	andi	r18, 0xFB	; 251
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
     95a:	19 82       	std	Y+1, r1	; 0x01
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	88 23       	and	r24, r24
     960:	89 f6       	brne	.-94     	; 0x904 <sboxnet_deinit+0x1c>
     962:	ce 01       	movw	r24, r28
     964:	02 96       	adiw	r24, 0x02	; 2
     966:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
     96a:	00 00       	nop
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <sboxnet_set_timer>:
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <sboxnet_set_timer+0xa>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	84 e8       	ldi	r24, 0x84	; 132
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	00 81       	ld	r16, Z
     990:	11 81       	ldd	r17, Z+1	; 0x01
     992:	8a e8       	ldi	r24, 0x8A	; 138
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	3a 81       	ldd	r19, Y+2	; 0x02
     99a:	20 0f       	add	r18, r16
     99c:	31 1f       	adc	r19, r17
     99e:	fc 01       	movw	r30, r24
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	20 83       	st	Z, r18
     9a4:	86 e3       	ldi	r24, 0x36	; 54
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	24 e0       	ldi	r18, 0x04	; 4
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
     9ae:	8f e6       	ldi	r24, 0x6F	; 111
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	2f e6       	ldi	r18, 0x6F	; 111
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	24 60       	ori	r18, 0x04	; 4
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	00 00       	nop
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <sboxnet_clear_line_sensor>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	8c e3       	ldi	r24, 0x3C	; 60
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	24 e0       	ldi	r18, 0x04	; 4
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
     9e2:	00 00       	nop
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <sboxnet_line_sensor_changed>:
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	8c e3       	ldi	r24, 0x3C	; 60
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	80 81       	ld	r24, Z
     9fa:	84 70       	andi	r24, 0x04	; 4
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <sboxnet_set_backoff_with_offset>:
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <sboxnet_set_backoff_with_offset+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	9a 83       	std	Y+2, r25	; 0x02
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sboxnet_clear_line_sensor>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_sboxnet>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	88 58       	subi	r24, 0x88	; 136
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	0e 94 bb 04 	call	0x976	; 0x976 <sboxnet_set_timer>
     a26:	00 00       	nop
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <sboxnet_intr_usart_rx>:
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <sboxnet_intr_usart_rx+0x6>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <sboxnet_intr_usart_rx+0x8>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <sboxnet_intr_usart_rx+0xa>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	88 ec       	ldi	r24, 0xC8	; 200
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	8b 83       	std	Y+3, r24	; 0x03
     a5a:	89 ec       	ldi	r24, 0xC9	; 201
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	80 81       	ld	r24, Z
     a62:	82 70       	andi	r24, 0x02	; 2
     a64:	8c 83       	std	Y+4, r24	; 0x04
     a66:	8e ec       	ldi	r24, 0xCE	; 206
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	fc 01       	movw	r30, r24
     a6c:	80 81       	ld	r24, Z
     a6e:	8d 83       	std	Y+5, r24	; 0x05
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	8c 71       	andi	r24, 0x1C	; 28
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	88 23       	and	r24, r24
     a7a:	e9 f1       	breq	.+122    	; 0xaf6 <sboxnet_intr_usart_rx+0xc4>
     a7c:	0e 94 3b 01 	call	0x276	; 0x276 <sboxnet_debug_inc_recverrors>
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	80 71       	andi	r24, 0x10	; 16
     a88:	99 27       	eor	r25, r25
     a8a:	89 2b       	or	r24, r25
     a8c:	89 f0       	breq	.+34     	; 0xab0 <sboxnet_intr_usart_rx+0x7e>
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	8b 5d       	subi	r24, 0xDB	; 219
     a94:	9d 4f       	sbci	r25, 0xFD	; 253
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	9c 01       	movw	r18, r24
     a9e:	2f 5f       	subi	r18, 0xFF	; 255
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	8b 5d       	subi	r24, 0xDB	; 219
     aa8:	9d 4f       	sbci	r25, 0xFD	; 253
     aaa:	fc 01       	movw	r30, r24
     aac:	31 83       	std	Z+1, r19	; 0x01
     aae:	20 83       	st	Z, r18
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	88 70       	andi	r24, 0x08	; 8
     ab8:	99 27       	eor	r25, r25
     aba:	89 2b       	or	r24, r25
     abc:	11 f0       	breq	.+4      	; 0xac2 <sboxnet_intr_usart_rx+0x90>
     abe:	0e 94 4c 01 	call	0x298	; 0x298 <sboxnet_debug_inc_recverr_dor>
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	84 70       	andi	r24, 0x04	; 4
     aca:	99 27       	eor	r25, r25
     acc:	89 2b       	or	r24, r25
     ace:	09 f4       	brne	.+2      	; 0xad2 <sboxnet_intr_usart_rx+0xa0>
     ad0:	df c0       	rjmp	.+446    	; 0xc90 <sboxnet_intr_usart_rx+0x25e>
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	89 5d       	subi	r24, 0xD9	; 217
     ad8:	9d 4f       	sbci	r25, 0xFD	; 253
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	9c 01       	movw	r18, r24
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	89 5d       	subi	r24, 0xD9	; 217
     aec:	9d 4f       	sbci	r25, 0xFD	; 253
     aee:	fc 01       	movw	r30, r24
     af0:	31 83       	std	Z+1, r19	; 0x01
     af2:	20 83       	st	Z, r18
     af4:	cd c0       	rjmp	.+410    	; 0xc90 <sboxnet_intr_usart_rx+0x25e>
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	88 23       	and	r24, r24
     afa:	09 f4       	brne	.+2      	; 0xafe <sboxnet_intr_usart_rx+0xcc>
     afc:	58 c0       	rjmp	.+176    	; 0xbae <sboxnet_intr_usart_rx+0x17c>
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	09 96       	adiw	r24, 0x09	; 9
     b04:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <sboxnet_rb_write_count>
     b08:	88 23       	and	r24, r24
     b0a:	c1 f0       	breq	.+48     	; 0xb3c <sboxnet_intr_usart_rx+0x10a>
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	85 5d       	subi	r24, 0xD5	; 213
     b12:	9d 4f       	sbci	r25, 0xFD	; 253
     b14:	fc 01       	movw	r30, r24
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	9c 01       	movw	r18, r24
     b1c:	2f 5f       	subi	r18, 0xFF	; 255
     b1e:	3f 4f       	sbci	r19, 0xFF	; 255
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	85 5d       	subi	r24, 0xD5	; 213
     b26:	9d 4f       	sbci	r25, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	31 83       	std	Z+1, r19	; 0x01
     b2c:	20 83       	st	Z, r18
     b2e:	0e 94 3b 01 	call	0x276	; 0x276 <sboxnet_debug_inc_recverrors>
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	09 96       	adiw	r24, 0x09	; 9
     b38:	0e 94 43 02 	call	0x486	; 0x486 <sboxnet_rb_write_rollback>
     b3c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_sboxnet_addr>
     b40:	9d 81       	ldd	r25, Y+5	; 0x05
     b42:	98 17       	cp	r25, r24
     b44:	79 f0       	breq	.+30     	; 0xb64 <sboxnet_intr_usart_rx+0x132>
     b46:	8d 81       	ldd	r24, Y+5	; 0x05
     b48:	8f 3f       	cpi	r24, 0xFF	; 255
     b4a:	61 f0       	breq	.+24     	; 0xb64 <sboxnet_intr_usart_rx+0x132>
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	81 70       	andi	r24, 0x01	; 1
     b5c:	99 27       	eor	r25, r25
     b5e:	89 2b       	or	r24, r25
     b60:	09 f4       	brne	.+2      	; 0xb64 <sboxnet_intr_usart_rx+0x132>
     b62:	97 c0       	rjmp	.+302    	; 0xc92 <sboxnet_intr_usart_rx+0x260>
     b64:	88 ec       	ldi	r24, 0xC8	; 200
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	28 ec       	ldi	r18, 0xC8	; 200
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	2e 7f       	andi	r18, 0xFE	; 254
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	09 96       	adiw	r24, 0x09	; 9
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
     b82:	88 23       	and	r24, r24
     b84:	81 f0       	breq	.+32     	; 0xba6 <sboxnet_intr_usart_rx+0x174>
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	09 96       	adiw	r24, 0x09	; 9
     b8c:	6d 81       	ldd	r22, Y+5	; 0x05
     b8e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
     b92:	88 23       	and	r24, r24
     b94:	49 f0       	breq	.+18     	; 0xba8 <sboxnet_intr_usart_rx+0x176>
     b96:	0e 94 5d 01 	call	0x2ba	; 0x2ba <sboxnet_debug_inc_recv_byte>
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	26 e0       	ldi	r18, 0x06	; 6
     ba0:	fc 01       	movw	r30, r24
     ba2:	27 83       	std	Z+7, r18	; 0x07
     ba4:	89 c0       	rjmp	.+274    	; 0xcb8 <sboxnet_intr_usart_rx+0x286>
     ba6:	00 00       	nop
     ba8:	0e 94 4c 01 	call	0x298	; 0x298 <sboxnet_debug_inc_recverr_dor>
     bac:	6e c0       	rjmp	.+220    	; 0xc8a <sboxnet_intr_usart_rx+0x258>
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	09 96       	adiw	r24, 0x09	; 9
     bb4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <sboxnet_rb_write_count>
     bb8:	8e 83       	std	Y+6, r24	; 0x06
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	fc 01       	movw	r30, r24
     bc0:	97 81       	ldd	r25, Z+7	; 0x07
     bc2:	8e 81       	ldd	r24, Y+6	; 0x06
     bc4:	98 17       	cp	r25, r24
     bc6:	90 f4       	brcc	.+36     	; 0xbec <sboxnet_intr_usart_rx+0x1ba>
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	83 5d       	subi	r24, 0xD3	; 211
     bce:	9d 4f       	sbci	r25, 0xFD	; 253
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	9c 01       	movw	r18, r24
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	83 5d       	subi	r24, 0xD3	; 211
     be2:	9d 4f       	sbci	r25, 0xFD	; 253
     be4:	fc 01       	movw	r30, r24
     be6:	31 83       	std	Z+1, r19	; 0x01
     be8:	20 83       	st	Z, r18
     bea:	4f c0       	rjmp	.+158    	; 0xc8a <sboxnet_intr_usart_rx+0x258>
     bec:	8e 81       	ldd	r24, Y+6	; 0x06
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	41 f4       	brne	.+16     	; 0xc02 <sboxnet_intr_usart_rx+0x1d0>
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	8f 73       	andi	r24, 0x3F	; 63
     bf6:	26 e0       	ldi	r18, 0x06	; 6
     bf8:	28 0f       	add	r18, r24
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	fc 01       	movw	r30, r24
     c00:	27 83       	std	Z+7, r18	; 0x07
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	09 96       	adiw	r24, 0x09	; 9
     c08:	6d 81       	ldd	r22, Y+5	; 0x05
     c0a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
     c0e:	88 23       	and	r24, r24
     c10:	19 f4       	brne	.+6      	; 0xc18 <sboxnet_intr_usart_rx+0x1e6>
     c12:	0e 94 4c 01 	call	0x298	; 0x298 <sboxnet_debug_inc_recverr_dor>
     c16:	39 c0       	rjmp	.+114    	; 0xc8a <sboxnet_intr_usart_rx+0x258>
     c18:	0e 94 5d 01 	call	0x2ba	; 0x2ba <sboxnet_debug_inc_recv_byte>
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	09 96       	adiw	r24, 0x09	; 9
     c22:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <sboxnet_rb_write_count>
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	fc 01       	movw	r30, r24
     c30:	87 81       	ldd	r24, Z+7	; 0x07
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	e9 f5       	brne	.+122    	; 0xcb8 <sboxnet_intr_usart_rx+0x286>
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	fc 01       	movw	r30, r24
     c44:	27 81       	ldd	r18, Z+7	; 0x07
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	09 96       	adiw	r24, 0x09	; 9
     c4c:	62 2f       	mov	r22, r18
     c4e:	0e 94 b6 02 	call	0x56c	; 0x56c <sboxnet_rb_put_first>
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	fc 01       	movw	r30, r24
     c58:	17 82       	std	Z+7, r1	; 0x07
     c5a:	88 ec       	ldi	r24, 0xC8	; 200
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	28 ec       	ldi	r18, 0xC8	; 200
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	21 60       	ori	r18, 0x01	; 1
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	09 96       	adiw	r24, 0x09	; 9
     c72:	0e 94 01 02 	call	0x402	; 0x402 <sboxnet_rb_write_commit>
     c76:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <g_sboxnet+0x20f>
     c7a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <g_sboxnet+0x210>
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <g_sboxnet+0x210>
     c84:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <g_sboxnet+0x20f>
     c88:	17 c0       	rjmp	.+46     	; 0xcb8 <sboxnet_intr_usart_rx+0x286>
     c8a:	0e 94 3b 01 	call	0x276	; 0x276 <sboxnet_debug_inc_recverrors>
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <sboxnet_intr_usart_rx+0x260>
     c90:	00 00       	nop
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	17 82       	std	Z+7, r1	; 0x07
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	28 ec       	ldi	r18, 0xC8	; 200
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	20 81       	ld	r18, Z
     ca6:	21 60       	ori	r18, 0x01	; 1
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	09 96       	adiw	r24, 0x09	; 9
     cb2:	0e 94 43 02 	call	0x486	; 0x486 <sboxnet_rb_write_rollback>
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <sboxnet_intr_usart_rx+0x288>
     cb8:	00 00       	nop
     cba:	26 96       	adiw	r28, 0x06	; 6
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <sboxnet_check_try_transmit>:
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <sboxnet_check_try_transmit+0x6>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <sboxnet_check_try_transmit+0x8>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	fc 01       	movw	r30, r24
     cee:	84 81       	ldd	r24, Z+4	; 0x04
     cf0:	88 23       	and	r24, r24
     cf2:	b9 f4       	brne	.+46     	; 0xd22 <sboxnet_check_try_transmit+0x56>
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	85 5f       	subi	r24, 0xF5	; 245
     cfa:	9e 4f       	sbci	r25, 0xFE	; 254
     cfc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sboxnet_rb_getcount>
     d00:	87 30       	cpi	r24, 0x07	; 7
     d02:	78 f0       	brcs	.+30     	; 0xd22 <sboxnet_check_try_transmit+0x56>
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	fc 01       	movw	r30, r24
     d0a:	13 82       	std	Z+3, r1	; 0x03
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	85 5f       	subi	r24, 0xF5	; 245
     d12:	9e 4f       	sbci	r25, 0xFE	; 254
     d14:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
     d18:	28 2f       	mov	r18, r24
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	fc 01       	movw	r30, r24
     d20:	24 83       	std	Z+4, r18	; 0x04
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	84 81       	ldd	r24, Z+4	; 0x04
     d2a:	88 23       	and	r24, r24
     d2c:	21 f1       	breq	.+72     	; 0xd76 <sboxnet_check_try_transmit+0xaa>
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	88 23       	and	r24, r24
     d38:	f1 f4       	brne	.+60     	; 0xd76 <sboxnet_check_try_transmit+0xaa>
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	fc 01       	movw	r30, r24
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	c1 f4       	brne	.+48     	; 0xd76 <sboxnet_check_try_transmit+0xaa>
     d46:	0e 94 95 01 	call	0x32a	; 0x32a <sboxnet_prandom>
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	8f 73       	andi	r24, 0x3F	; 63
     d50:	99 27       	eor	r25, r25
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	fc 01       	movw	r30, r24
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	08 96       	adiw	r24, 0x08	; 8
     d64:	9c 01       	movw	r18, r24
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	0e 94 01 05 	call	0xa02	; 0xa02 <sboxnet_set_backoff_with_offset>
     d76:	00 00       	nop
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <sboxnet_intr_usart_tx>:
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	27 97       	sbiw	r28, 0x07	; 7
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	88 e0       	ldi	r24, 0x08	; 8
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	88 ec       	ldi	r24, 0xC8	; 200
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	fc 01       	movw	r30, r24
     db0:	80 81       	ld	r24, Z
     db2:	8b 83       	std	Y+3, r24	; 0x03
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	80 95       	com	r24
     db8:	88 1f       	adc	r24, r24
     dba:	88 27       	eor	r24, r24
     dbc:	88 1f       	adc	r24, r24
     dbe:	8c 83       	std	Y+4, r24	; 0x04
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	84 71       	andi	r24, 0x14	; 20
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	8e ec       	ldi	r24, 0xCE	; 206
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	20 81       	ld	r18, Z
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	fc 01       	movw	r30, r24
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	29 17       	cp	r18, r25
     dda:	09 f4       	brne	.+2      	; 0xdde <sboxnet_intr_usart_tx+0x58>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	8e 83       	std	Y+6, r24	; 0x06
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	88 23       	and	r24, r24
     de4:	39 f4       	brne	.+14     	; 0xdf4 <sboxnet_intr_usart_tx+0x6e>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	88 23       	and	r24, r24
     dea:	21 f4       	brne	.+8      	; 0xdf4 <sboxnet_intr_usart_tx+0x6e>
     dec:	8e 81       	ldd	r24, Y+6	; 0x06
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <sboxnet_intr_usart_tx+0x6e>
     df2:	df c0       	rjmp	.+446    	; 0xfb2 <sboxnet_intr_usart_tx+0x22c>
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	88 23       	and	r24, r24
     df8:	89 f0       	breq	.+34     	; 0xe1c <sboxnet_intr_usart_tx+0x96>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	85 5e       	subi	r24, 0xE5	; 229
     e00:	9d 4f       	sbci	r25, 0xFD	; 253
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	9c 01       	movw	r18, r24
     e0a:	2f 5f       	subi	r18, 0xFF	; 255
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	85 5e       	subi	r24, 0xE5	; 229
     e14:	9d 4f       	sbci	r25, 0xFD	; 253
     e16:	fc 01       	movw	r30, r24
     e18:	31 83       	std	Z+1, r19	; 0x01
     e1a:	20 83       	st	Z, r18
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	88 23       	and	r24, r24
     e20:	89 f0       	breq	.+34     	; 0xe44 <sboxnet_intr_usart_tx+0xbe>
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	83 5e       	subi	r24, 0xE3	; 227
     e28:	9d 4f       	sbci	r25, 0xFD	; 253
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	9c 01       	movw	r18, r24
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	83 5e       	subi	r24, 0xE3	; 227
     e3c:	9d 4f       	sbci	r25, 0xFD	; 253
     e3e:	fc 01       	movw	r30, r24
     e40:	31 83       	std	Z+1, r19	; 0x01
     e42:	20 83       	st	Z, r18
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	88 23       	and	r24, r24
     e48:	89 f0       	breq	.+34     	; 0xe6c <sboxnet_intr_usart_tx+0xe6>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	81 5e       	subi	r24, 0xE1	; 225
     e50:	9d 4f       	sbci	r25, 0xFD	; 253
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	9c 01       	movw	r18, r24
     e5a:	2f 5f       	subi	r18, 0xFF	; 255
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	81 5e       	subi	r24, 0xE1	; 225
     e64:	9d 4f       	sbci	r25, 0xFD	; 253
     e66:	fc 01       	movw	r30, r24
     e68:	31 83       	std	Z+1, r19	; 0x01
     e6a:	20 83       	st	Z, r18
     e6c:	8b e2       	ldi	r24, 0x2B	; 43
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	2b e2       	ldi	r18, 0x2B	; 43
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	f9 01       	movw	r30, r18
     e76:	20 81       	ld	r18, Z
     e78:	27 7f       	andi	r18, 0xF7	; 247
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
     e7e:	89 ec       	ldi	r24, 0xC9	; 201
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	29 ec       	ldi	r18, 0xC9	; 201
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	f9 01       	movw	r30, r18
     e88:	20 81       	ld	r18, Z
     e8a:	27 7a       	andi	r18, 0xA7	; 167
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	22 e0       	ldi	r18, 0x02	; 2
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	87 5e       	subi	r24, 0xE7	; 231
     ea0:	9d 4f       	sbci	r25, 0xFD	; 253
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	9c 01       	movw	r18, r24
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	87 5e       	subi	r24, 0xE7	; 231
     eb4:	9d 4f       	sbci	r25, 0xFD	; 253
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 83       	std	Z+1, r19	; 0x01
     eba:	20 83       	st	Z, r18
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	fc 01       	movw	r30, r24
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	88 23       	and	r24, r24
     ec6:	91 f1       	breq	.+100    	; 0xf2c <sboxnet_intr_usart_tx+0x1a6>
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	fc 01       	movw	r30, r24
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	2f ef       	ldi	r18, 0xFF	; 255
     ed2:	28 0f       	add	r18, r24
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	fc 01       	movw	r30, r24
     eda:	22 83       	std	Z+2, r18	; 0x02
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	85 5f       	subi	r24, 0xF5	; 245
     ee2:	9e 4f       	sbci	r25, 0xFE	; 254
     ee4:	0e 94 19 03 	call	0x632	; 0x632 <sboxnet_rb_read_rollback>
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	8f 5d       	subi	r24, 0xDF	; 223
     eee:	9d 4f       	sbci	r25, 0xFD	; 253
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	9c 01       	movw	r18, r24
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	8f 5d       	subi	r24, 0xDF	; 223
     f02:	9d 4f       	sbci	r25, 0xFD	; 253
     f04:	fc 01       	movw	r30, r24
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	20 83       	st	Z, r18
     f0a:	42 c0       	rjmp	.+132    	; 0xf90 <sboxnet_intr_usart_tx+0x20a>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	85 5f       	subi	r24, 0xF5	; 245
     f12:	9e 4f       	sbci	r25, 0xFE	; 254
     f14:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	fc 01       	movw	r30, r24
     f1e:	83 81       	ldd	r24, Z+3	; 0x03
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	28 0f       	add	r18, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	fc 01       	movw	r30, r24
     f2a:	23 83       	std	Z+3, r18	; 0x03
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	fc 01       	movw	r30, r24
     f32:	23 81       	ldd	r18, Z+3	; 0x03
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	fc 01       	movw	r30, r24
     f3a:	84 81       	ldd	r24, Z+4	; 0x04
     f3c:	28 17       	cp	r18, r24
     f3e:	30 f3       	brcs	.-52     	; 0xf0c <sboxnet_intr_usart_tx+0x186>
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	fc 01       	movw	r30, r24
     f46:	14 82       	std	Z+4, r1	; 0x04
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	fc 01       	movw	r30, r24
     f4e:	24 81       	ldd	r18, Z+4	; 0x04
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	23 83       	std	Z+3, r18	; 0x03
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	29 e1       	ldi	r18, 0x19	; 25
     f5e:	fc 01       	movw	r30, r24
     f60:	22 83       	std	Z+2, r18	; 0x02
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	85 5f       	subi	r24, 0xF5	; 245
     f68:	9e 4f       	sbci	r25, 0xFE	; 254
     f6a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <sboxnet_rb_read_commit>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	8f 5c       	subi	r24, 0xCF	; 207
     f74:	9d 4f       	sbci	r25, 0xFD	; 253
     f76:	fc 01       	movw	r30, r24
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	9c 01       	movw	r18, r24
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	8f 5c       	subi	r24, 0xCF	; 207
     f88:	9d 4f       	sbci	r25, 0xFD	; 253
     f8a:	fc 01       	movw	r30, r24
     f8c:	31 83       	std	Z+1, r19	; 0x01
     f8e:	20 83       	st	Z, r18
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	fc 01       	movw	r30, r24
     f96:	14 82       	std	Z+4, r1	; 0x04
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	fc 01       	movw	r30, r24
     f9e:	24 81       	ldd	r18, Z+4	; 0x04
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	23 83       	std	Z+3, r18	; 0x03
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 bb 04 	call	0x976	; 0x976 <sboxnet_set_timer>
     fb0:	85 c0       	rjmp	.+266    	; 0x10bc <sboxnet_intr_usart_tx+0x336>
     fb2:	89 ec       	ldi	r24, 0xC9	; 201
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	29 ec       	ldi	r18, 0xC9	; 201
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	2f 76       	andi	r18, 0x6F	; 111
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
     fc4:	89 ec       	ldi	r24, 0xC9	; 201
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	29 ec       	ldi	r18, 0xC9	; 201
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	f9 01       	movw	r30, r18
     fce:	20 81       	ld	r18, Z
     fd0:	20 61       	ori	r18, 0x10	; 16
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	fc 01       	movw	r30, r24
     fdc:	23 81       	ldd	r18, Z+3	; 0x03
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	fc 01       	movw	r30, r24
     fe4:	84 81       	ldd	r24, Z+4	; 0x04
     fe6:	28 17       	cp	r18, r24
     fe8:	28 f5       	brcc	.+74     	; 0x1034 <sboxnet_intr_usart_tx+0x2ae>
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	85 5f       	subi	r24, 0xF5	; 245
     ff0:	9e 4f       	sbci	r25, 0xFE	; 254
     ff2:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	fc 01       	movw	r30, r24
     ffe:	83 81       	ldd	r24, Z+3	; 0x03
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	28 0f       	add	r18, r24
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	fc 01       	movw	r30, r24
    100a:	23 83       	std	Z+3, r18	; 0x03
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	2f 81       	ldd	r18, Y+7	; 0x07
    1012:	fc 01       	movw	r30, r24
    1014:	25 83       	std	Z+5, r18	; 0x05
    1016:	89 ec       	ldi	r24, 0xC9	; 201
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	29 ec       	ldi	r18, 0xC9	; 201
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	2e 7f       	andi	r18, 0xFE	; 254
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
    1028:	8e ec       	ldi	r24, 0xCE	; 206
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	2f 81       	ldd	r18, Y+7	; 0x07
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
    1032:	33 c0       	rjmp	.+102    	; 0x109a <sboxnet_intr_usart_tx+0x314>
    1034:	89 ec       	ldi	r24, 0xC9	; 201
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	29 ec       	ldi	r18, 0xC9	; 201
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2f 7b       	andi	r18, 0xBF	; 191
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	fc 01       	movw	r30, r24
    104c:	14 82       	std	Z+4, r1	; 0x04
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	fc 01       	movw	r30, r24
    1054:	13 82       	std	Z+3, r1	; 0x03
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	85 5f       	subi	r24, 0xF5	; 245
    105c:	9e 4f       	sbci	r25, 0xFE	; 254
    105e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <sboxnet_rb_read_commit>
    1062:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_sboxnet+0x217>
    1066:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_sboxnet+0x218>
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <g_sboxnet+0x218>
    1070:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <g_sboxnet+0x217>
    1074:	0e 94 c7 03 	call	0x78e	; 0x78e <sboxnet_receiver_enable>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	21 f4       	brne	.+8      	; 0x108c <sboxnet_intr_usart_tx+0x306>
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	fc 01       	movw	r30, r24
    108a:	10 82       	st	Z, r1
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	29 e1       	ldi	r18, 0x19	; 25
    1092:	fc 01       	movw	r30, r24
    1094:	22 83       	std	Z+2, r18	; 0x02
    1096:	0e 94 66 06 	call	0xccc	; 0xccc <sboxnet_check_try_transmit>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	8d 5e       	subi	r24, 0xED	; 237
    10a0:	9d 4f       	sbci	r25, 0xFD	; 253
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	9c 01       	movw	r18, r24
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	8d 5e       	subi	r24, 0xED	; 237
    10b4:	9d 4f       	sbci	r25, 0xFD	; 253
    10b6:	fc 01       	movw	r30, r24
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18
    10bc:	27 96       	adiw	r28, 0x07	; 7
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <__vector_23>:
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	0e 94 19 05 	call	0xa32	; 0xa32 <sboxnet_intr_usart_rx>
    10fe:	00 00       	nop
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	bf 91       	pop	r27
    110a:	af 91       	pop	r26
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	7f 91       	pop	r23
    1112:	6f 91       	pop	r22
    1114:	5f 91       	pop	r21
    1116:	4f 91       	pop	r20
    1118:	3f 91       	pop	r19
    111a:	2f 91       	pop	r18
    111c:	0f 90       	pop	r0
    111e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_25>:
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	0e 94 c3 06 	call	0xd86	; 0xd86 <sboxnet_intr_usart_tx>
    1158:	00 00       	nop
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <sboxnet_timer_bit>:
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	00 d0       	rcall	.+0      	; 0x1188 <sboxnet_timer_bit+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <sboxnet_timer_bit+0x8>
    118a:	1f 92       	push	r1
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	88 e0       	ldi	r24, 0x08	; 8
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	8f e6       	ldi	r24, 0x6F	; 111
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	2f e6       	ldi	r18, 0x6F	; 111
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	2b 7f       	andi	r18, 0xFB	; 251
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <sboxnet_timer_bit+0x36>
    11b6:	8f c0       	rjmp	.+286    	; 0x12d6 <sboxnet_timer_bit+0x154>
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	fc 01       	movw	r30, r24
    11be:	84 81       	ldd	r24, Z+4	; 0x04
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <sboxnet_timer_bit+0x44>
    11c4:	82 c0       	rjmp	.+260    	; 0x12ca <sboxnet_timer_bit+0x148>
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	fc 01       	movw	r30, r24
    11cc:	83 81       	ldd	r24, Z+3	; 0x03
    11ce:	88 23       	and	r24, r24
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <sboxnet_timer_bit+0x52>
    11d2:	7b c0       	rjmp	.+246    	; 0x12ca <sboxnet_timer_bit+0x148>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	85 5f       	subi	r24, 0xF5	; 245
    11da:	9e 4f       	sbci	r25, 0xFE	; 254
    11dc:	0e 94 82 03 	call	0x704	; 0x704 <sboxnet_rb_read_getone>
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b e2       	ldi	r24, 0x2B	; 43
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	2b e2       	ldi	r18, 0x2B	; 43
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	28 60       	ori	r18, 0x08	; 8
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
    11f4:	89 ec       	ldi	r24, 0xC9	; 201
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	29 ec       	ldi	r18, 0xC9	; 201
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f9 01       	movw	r30, r18
    11fe:	20 81       	ld	r18, Z
    1200:	29 60       	ori	r18, 0x09	; 9
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sboxnet_line_sensor_changed>
    120a:	88 23       	and	r24, r24
    120c:	51 f4       	brne	.+20     	; 0x1222 <sboxnet_timer_bit+0xa0>
    120e:	89 e2       	ldi	r24, 0x29	; 41
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	fc 01       	movw	r30, r24
    1214:	80 81       	ld	r24, Z
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	84 70       	andi	r24, 0x04	; 4
    121c:	99 27       	eor	r25, r25
    121e:	89 2b       	or	r24, r25
    1220:	c9 f4       	brne	.+50     	; 0x1254 <sboxnet_timer_bit+0xd2>
    1222:	0e 94 95 01 	call	0x32a	; 0x32a <sboxnet_prandom>
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	8f 73       	andi	r24, 0x3F	; 63
    122c:	99 27       	eor	r25, r25
    122e:	9d 83       	std	Y+5, r25	; 0x05
    1230:	8c 83       	std	Y+4, r24	; 0x04
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	fc 01       	movw	r30, r24
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 01       	movw	r18, r24
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	0e 94 01 05 	call	0xa02	; 0xa02 <sboxnet_set_backoff_with_offset>
    1250:	00 00       	nop
    1252:	40 c0       	rjmp	.+128    	; 0x12d4 <sboxnet_timer_bit+0x152>
    1254:	89 ec       	ldi	r24, 0xC9	; 201
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	29 ec       	ldi	r18, 0xC9	; 201
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	f9 01       	movw	r30, r18
    125e:	20 81       	ld	r18, Z
    1260:	2f 76       	andi	r18, 0x6F	; 111
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
    1266:	89 ec       	ldi	r24, 0xC9	; 201
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	29 ec       	ldi	r18, 0xC9	; 201
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	f9 01       	movw	r30, r18
    1270:	20 81       	ld	r18, Z
    1272:	20 65       	ori	r18, 0x50	; 80
    1274:	fc 01       	movw	r30, r24
    1276:	20 83       	st	Z, r18
    1278:	8e ec       	ldi	r24, 0xCE	; 206
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
    1282:	88 ec       	ldi	r24, 0xC8	; 200
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	28 ec       	ldi	r18, 0xC8	; 200
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	2e 7f       	andi	r18, 0xFE	; 254
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	85 5f       	subi	r24, 0xF5	; 245
    129a:	9e 4f       	sbci	r25, 0xFE	; 254
    129c:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	fc 01       	movw	r30, r24
    12a8:	25 83       	std	Z+5, r18	; 0x05
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	fc 01       	movw	r30, r24
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	28 0f       	add	r18, r24
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	fc 01       	movw	r30, r24
    12bc:	23 83       	std	Z+3, r18	; 0x03
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	23 e0       	ldi	r18, 0x03	; 3
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <sboxnet_timer_bit+0x152>
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	fc 01       	movw	r30, r24
    12d0:	10 82       	st	Z, r1
    12d2:	40 c0       	rjmp	.+128    	; 0x1354 <sboxnet_timer_bit+0x1d2>
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <sboxnet_timer_bit+0x1d2>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	a9 f4       	brne	.+42     	; 0x130c <sboxnet_timer_bit+0x18a>
    12e2:	8b e2       	ldi	r24, 0x2B	; 43
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	2b e2       	ldi	r18, 0x2B	; 43
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	28 60       	ori	r18, 0x08	; 8
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	24 e0       	ldi	r18, 0x04	; 4
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 bb 04 	call	0x976	; 0x976 <sboxnet_set_timer>
    1306:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sboxnet_clear_line_sensor>
    130a:	24 c0       	rjmp	.+72     	; 0x1354 <sboxnet_timer_bit+0x1d2>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	fc 01       	movw	r30, r24
    1312:	80 81       	ld	r24, Z
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	f1 f4       	brne	.+60     	; 0x1354 <sboxnet_timer_bit+0x1d2>
    1318:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sboxnet_line_sensor_changed>
    131c:	88 23       	and	r24, r24
    131e:	99 f4       	brne	.+38     	; 0x1346 <sboxnet_timer_bit+0x1c4>
    1320:	89 e2       	ldi	r24, 0x29	; 41
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	80 81       	ld	r24, Z
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	84 70       	andi	r24, 0x04	; 4
    132e:	99 27       	eor	r25, r25
    1330:	89 2b       	or	r24, r25
    1332:	49 f0       	breq	.+18     	; 0x1346 <sboxnet_timer_bit+0x1c4>
    1334:	0e 94 c7 03 	call	0x78e	; 0x78e <sboxnet_receiver_enable>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	fc 01       	movw	r30, r24
    133e:	10 82       	st	Z, r1
    1340:	0e 94 66 06 	call	0xccc	; 0xccc <sboxnet_check_try_transmit>
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <sboxnet_timer_bit+0x1d0>
    1346:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <sboxnet_clear_line_sensor>
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 bb 04 	call	0x976	; 0x976 <sboxnet_set_timer>
    1352:	00 00       	nop
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <sboxnet_receive_msg>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	65 97       	sbiw	r28, 0x15	; 21
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	6d 8b       	std	Y+21, r22	; 0x15
    137e:	8d 89       	ldd	r24, Y+21	; 0x15
    1380:	86 30       	cpi	r24, 0x06	; 6
    1382:	10 f4       	brcc	.+4      	; 0x1388 <sboxnet_receive_msg+0x24>
    1384:	8d ef       	ldi	r24, 0xFD	; 253
    1386:	cc c0       	rjmp	.+408    	; 0x1520 <sboxnet_receive_msg+0x1bc>
    1388:	88 e0       	ldi	r24, 0x08	; 8
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	9e 87       	std	Y+14, r25	; 0x0e
    138e:	8d 87       	std	Y+13, r24	; 0x0d
    1390:	19 82       	std	Y+1, r1	; 0x01
    1392:	86 e0       	ldi	r24, 0x06	; 6
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	8f e5       	ldi	r24, 0x5F	; 95
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
    139e:	8f 87       	std	Y+15, r24	; 0x0f
    13a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	10 c0       	rjmp	.+32     	; 0x13c8 <sboxnet_receive_msg+0x64>
    13a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ac:	09 96       	adiw	r24, 0x09	; 9
    13ae:	0e 94 b0 03 	call	0x760	; 0x760 <sboxnet_rb_can_read_bytes>
    13b2:	8b 83       	std	Y+3, r24	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	87 30       	cpi	r24, 0x07	; 7
    13b8:	30 f0       	brcs	.+12     	; 0x13c6 <sboxnet_receive_msg+0x62>
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	09 96       	adiw	r24, 0x09	; 9
    13c0:	0e 94 82 03 	call	0x704	; 0x704 <sboxnet_rb_read_getone>
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	1c 82       	std	Y+4, r1	; 0x04
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	88 23       	and	r24, r24
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <sboxnet_receive_msg+0x44>
    13ce:	ce 01       	movw	r24, r28
    13d0:	0f 96       	adiw	r24, 0x0f	; 15
    13d2:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    13d6:	99 81       	ldd	r25, Y+1	; 0x01
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	98 17       	cp	r25, r24
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <sboxnet_receive_msg+0x7e>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	9f c0       	rjmp	.+318    	; 0x1520 <sboxnet_receive_msg+0x1bc>
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9c 01       	movw	r18, r24
    13ea:	2f 5f       	subi	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	82 17       	cp	r24, r18
    13f6:	93 07       	cpc	r25, r19
    13f8:	14 f4       	brge	.+4      	; 0x13fe <sboxnet_receive_msg+0x9a>
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	91 c0       	rjmp	.+290    	; 0x1520 <sboxnet_receive_msg+0x1bc>
    13fe:	99 81       	ldd	r25, Y+1	; 0x01
    1400:	8d 89       	ldd	r24, Y+21	; 0x15
    1402:	89 17       	cp	r24, r25
    1404:	10 f4       	brcc	.+4      	; 0x140a <sboxnet_receive_msg+0xa6>
    1406:	8d ef       	ldi	r24, 0xFD	; 253
    1408:	8b c0       	rjmp	.+278    	; 0x1520 <sboxnet_receive_msg+0x1bc>
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	86 34       	cpi	r24, 0x46	; 70
    140e:	10 f0       	brcs	.+4      	; 0x1414 <sboxnet_receive_msg+0xb0>
    1410:	8c ef       	ldi	r24, 0xFC	; 252
    1412:	86 c0       	rjmp	.+268    	; 0x1520 <sboxnet_receive_msg+0x1bc>
    1414:	8f e5       	ldi	r24, 0x5F	; 95
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	fc 01       	movw	r30, r24
    141a:	80 81       	ld	r24, Z
    141c:	88 8b       	std	Y+16, r24	; 0x10
    141e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <sboxnet_receive_msg+0xce>
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	09 96       	adiw	r24, 0x09	; 9
    142c:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
    1430:	1d 82       	std	Y+5, r1	; 0x05
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	88 23       	and	r24, r24
    1436:	b9 f7       	brne	.-18     	; 0x1426 <sboxnet_receive_msg+0xc2>
    1438:	ce 01       	movw	r24, r28
    143a:	40 96       	adiw	r24, 0x10	; 16
    143c:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	9f 83       	std	Y+7, r25	; 0x07
    1446:	8e 83       	std	Y+6, r24	; 0x06
    1448:	0e 94 6e 01 	call	0x2dc	; 0x2dc <sboxnet_crc8_init>
    144c:	88 87       	std	Y+8, r24	; 0x08
    144e:	19 86       	std	Y+9, r1	; 0x09
    1450:	31 c0       	rjmp	.+98     	; 0x14b4 <sboxnet_receive_msg+0x150>
    1452:	8f e5       	ldi	r24, 0x5F	; 95
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	fc 01       	movw	r30, r24
    1458:	80 81       	ld	r24, Z
    145a:	89 8b       	std	Y+17, r24	; 0x11
    145c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    1460:	8b 87       	std	Y+11, r24	; 0x0b
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <sboxnet_receive_msg+0x10e>
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	09 96       	adiw	r24, 0x09	; 9
    146a:	0e 94 32 03 	call	0x664	; 0x664 <sboxnet_rb_read>
    146e:	8a 87       	std	Y+10, r24	; 0x0a
    1470:	1b 86       	std	Y+11, r1	; 0x0b
    1472:	8b 85       	ldd	r24, Y+11	; 0x0b
    1474:	88 23       	and	r24, r24
    1476:	b1 f7       	brne	.-20     	; 0x1464 <sboxnet_receive_msg+0x100>
    1478:	ce 01       	movw	r24, r28
    147a:	41 96       	adiw	r24, 0x11	; 17
    147c:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	29 f4       	brne	.+10     	; 0x1490 <sboxnet_receive_msg+0x12c>
    1486:	8a 85       	ldd	r24, Y+10	; 0x0a
    1488:	8f 73       	andi	r24, 0x3F	; 63
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	89 0f       	add	r24, r25
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	6a 85       	ldd	r22, Y+10	; 0x0a
    1492:	88 85       	ldd	r24, Y+8	; 0x08
    1494:	0e 94 76 01 	call	0x2ec	; 0x2ec <sboxnet_crc8_add>
    1498:	88 87       	std	Y+8, r24	; 0x08
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	9c 01       	movw	r18, r24
    14a0:	2f 5f       	subi	r18, 0xFF	; 255
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	3f 83       	std	Y+7, r19	; 0x07
    14a6:	2e 83       	std	Y+6, r18	; 0x06
    14a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	89 87       	std	Y+9, r24	; 0x09
    14b4:	99 85       	ldd	r25, Y+9	; 0x09
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	98 17       	cp	r25, r24
    14ba:	58 f2       	brcs	.-106    	; 0x1452 <sboxnet_receive_msg+0xee>
    14bc:	8f e5       	ldi	r24, 0x5F	; 95
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	8a 8b       	std	Y+18, r24	; 0x12
    14c6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    14ca:	8c 87       	std	Y+12, r24	; 0x0c
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <sboxnet_receive_msg+0x176>
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	09 96       	adiw	r24, 0x09	; 9
    14d4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <sboxnet_rb_read_commit>
    14d8:	1c 86       	std	Y+12, r1	; 0x0c
    14da:	8c 85       	ldd	r24, Y+12	; 0x0c
    14dc:	88 23       	and	r24, r24
    14de:	b9 f7       	brne	.-18     	; 0x14ce <sboxnet_receive_msg+0x16a>
    14e0:	ce 01       	movw	r24, r28
    14e2:	42 96       	adiw	r24, 0x12	; 18
    14e4:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    14e8:	88 85       	ldd	r24, Y+8	; 0x08
    14ea:	0e 94 86 01 	call	0x30c	; 0x30c <sboxnet_crc8_ok>
    14ee:	88 23       	and	r24, r24
    14f0:	69 f4       	brne	.+26     	; 0x150c <sboxnet_receive_msg+0x1a8>
    14f2:	0e 94 3b 01 	call	0x276	; 0x276 <sboxnet_debug_inc_recverrors>
    14f6:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <g_sboxnet+0x22f>
    14fa:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <g_sboxnet+0x230>
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <g_sboxnet+0x230>
    1504:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <g_sboxnet+0x22f>
    1508:	8e ef       	ldi	r24, 0xFE	; 254
    150a:	0a c0       	rjmp	.+20     	; 0x1520 <sboxnet_receive_msg+0x1bc>
    150c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_sboxnet+0x211>
    1510:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <g_sboxnet+0x212>
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <g_sboxnet+0x212>
    151a:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <g_sboxnet+0x211>
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	65 96       	adiw	r28, 0x15	; 21
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <sboxnet_send_msg>:
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	66 97       	sbiw	r28, 0x16	; 22
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	9e 8b       	std	Y+22, r25	; 0x16
    1548:	8d 8b       	std	Y+21, r24	; 0x15
    154a:	88 e0       	ldi	r24, 0x08	; 8
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9d 87       	std	Y+13, r25	; 0x0d
    1550:	8c 87       	std	Y+12, r24	; 0x0c
    1552:	8d 89       	ldd	r24, Y+21	; 0x15
    1554:	9e 89       	ldd	r25, Y+22	; 0x16
    1556:	fc 01       	movw	r30, r24
    1558:	83 81       	ldd	r24, Z+3	; 0x03
    155a:	8f 73       	andi	r24, 0x3F	; 63
    155c:	8a 5f       	subi	r24, 0xFA	; 250
    155e:	8e 87       	std	Y+14, r24	; 0x0e
    1560:	8f e5       	ldi	r24, 0x5F	; 95
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	8f 87       	std	Y+15, r24	; 0x0f
    156a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <sboxnet_send_msg+0x50>
    1572:	8c 85       	ldd	r24, Y+12	; 0x0c
    1574:	9d 85       	ldd	r25, Y+13	; 0x0d
    1576:	85 5f       	subi	r24, 0xF5	; 245
    1578:	9e 4f       	sbci	r25, 0xFE	; 254
    157a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sboxnet_rb_getfree>
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	1a 82       	std	Y+2, r1	; 0x02
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 23       	and	r24, r24
    1586:	a9 f7       	brne	.-22     	; 0x1572 <sboxnet_send_msg+0x40>
    1588:	ce 01       	movw	r24, r28
    158a:	0f 96       	adiw	r24, 0x0f	; 15
    158c:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1590:	99 81       	ldd	r25, Y+1	; 0x01
    1592:	8e 85       	ldd	r24, Y+14	; 0x0e
    1594:	89 17       	cp	r24, r25
    1596:	10 f0       	brcs	.+4      	; 0x159c <sboxnet_send_msg+0x6a>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	bd c0       	rjmp	.+378    	; 0x1716 <sboxnet_send_msg+0x1e4>
    159c:	8f e5       	ldi	r24, 0x5F	; 95
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	fc 01       	movw	r30, r24
    15a2:	80 81       	ld	r24, Z
    15a4:	88 8b       	std	Y+16, r24	; 0x10
    15a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    15aa:	8c 83       	std	Y+4, r24	; 0x04
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <sboxnet_send_msg+0x8e>
    15ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b2:	85 5f       	subi	r24, 0xF5	; 245
    15b4:	9e 4f       	sbci	r25, 0xFE	; 254
    15b6:	6e 85       	ldd	r22, Y+14	; 0x0e
    15b8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	1c 82       	std	Y+4, r1	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	88 23       	and	r24, r24
    15c4:	a1 f7       	brne	.-24     	; 0x15ae <sboxnet_send_msg+0x7c>
    15c6:	ce 01       	movw	r24, r28
    15c8:	40 96       	adiw	r24, 0x10	; 16
    15ca:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <sboxnet_send_msg+0xa4>
    15d4:	61 c0       	rjmp	.+194    	; 0x1698 <sboxnet_send_msg+0x166>
    15d6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <sboxnet_crc8_init>
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	1e 82       	std	Y+6, r1	; 0x06
    15de:	35 c0       	rjmp	.+106    	; 0x164a <sboxnet_send_msg+0x118>
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	21 f4       	brne	.+8      	; 0x15ee <sboxnet_send_msg+0xbc>
    15e6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_sboxnet_addr>
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	0a c0       	rjmp	.+20     	; 0x1602 <sboxnet_send_msg+0xd0>
    15ee:	8e 81       	ldd	r24, Y+6	; 0x06
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	2d 89       	ldd	r18, Y+21	; 0x15
    15f6:	3e 89       	ldd	r19, Y+22	; 0x16
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	8f 83       	std	Y+7, r24	; 0x07
    1602:	6f 81       	ldd	r22, Y+7	; 0x07
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	0e 94 76 01 	call	0x2ec	; 0x2ec <sboxnet_crc8_add>
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	8f e5       	ldi	r24, 0x5F	; 95
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	fc 01       	movw	r30, r24
    1612:	80 81       	ld	r24, Z
    1614:	89 8b       	std	Y+17, r24	; 0x11
    1616:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    161a:	88 87       	std	Y+8, r24	; 0x08
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <sboxnet_send_msg+0xfe>
    161e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1620:	9d 85       	ldd	r25, Y+13	; 0x0d
    1622:	85 5f       	subi	r24, 0xF5	; 245
    1624:	9e 4f       	sbci	r25, 0xFE	; 254
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	18 86       	std	Y+8, r1	; 0x08
    1630:	88 85       	ldd	r24, Y+8	; 0x08
    1632:	88 23       	and	r24, r24
    1634:	a1 f7       	brne	.-24     	; 0x161e <sboxnet_send_msg+0xec>
    1636:	ce 01       	movw	r24, r28
    1638:	41 96       	adiw	r24, 0x11	; 17
    163a:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 23       	and	r24, r24
    1642:	61 f1       	breq	.+88     	; 0x169c <sboxnet_send_msg+0x16a>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	8e 83       	std	Y+6, r24	; 0x06
    164a:	8e 81       	ldd	r24, Y+6	; 0x06
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8e 85       	ldd	r24, Y+14	; 0x0e
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	0c f2       	brlt	.-126    	; 0x15e0 <sboxnet_send_msg+0xae>
    165e:	8f e5       	ldi	r24, 0x5F	; 95
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	fc 01       	movw	r30, r24
    1664:	80 81       	ld	r24, Z
    1666:	8a 8b       	std	Y+18, r24	; 0x12
    1668:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    166c:	89 87       	std	Y+9, r24	; 0x09
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <sboxnet_send_msg+0x150>
    1670:	8c 85       	ldd	r24, Y+12	; 0x0c
    1672:	9d 85       	ldd	r25, Y+13	; 0x0d
    1674:	85 5f       	subi	r24, 0xF5	; 245
    1676:	9e 4f       	sbci	r25, 0xFE	; 254
    1678:	6d 81       	ldd	r22, Y+5	; 0x05
    167a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sboxnet_rb_write>
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	19 86       	std	Y+9, r1	; 0x09
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	88 23       	and	r24, r24
    1686:	a1 f7       	brne	.-24     	; 0x1670 <sboxnet_send_msg+0x13e>
    1688:	ce 01       	movw	r24, r28
    168a:	42 96       	adiw	r24, 0x12	; 18
    168c:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 23       	and	r24, r24
    1694:	e9 f4       	brne	.+58     	; 0x16d0 <sboxnet_send_msg+0x19e>
    1696:	03 c0       	rjmp	.+6      	; 0x169e <sboxnet_send_msg+0x16c>
    1698:	00 00       	nop
    169a:	01 c0       	rjmp	.+2      	; 0x169e <sboxnet_send_msg+0x16c>
    169c:	00 00       	nop
    169e:	8f e5       	ldi	r24, 0x5F	; 95
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    16ac:	8a 87       	std	Y+10, r24	; 0x0a
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <sboxnet_send_msg+0x18c>
    16b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b4:	85 5f       	subi	r24, 0xF5	; 245
    16b6:	9e 4f       	sbci	r25, 0xFE	; 254
    16b8:	0e 94 43 02 	call	0x486	; 0x486 <sboxnet_rb_write_rollback>
    16bc:	1a 86       	std	Y+10, r1	; 0x0a
    16be:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c0:	88 23       	and	r24, r24
    16c2:	b1 f7       	brne	.-20     	; 0x16b0 <sboxnet_send_msg+0x17e>
    16c4:	ce 01       	movw	r24, r28
    16c6:	43 96       	adiw	r24, 0x13	; 19
    16c8:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	23 c0       	rjmp	.+70     	; 0x1716 <sboxnet_send_msg+0x1e4>
    16d0:	8f e5       	ldi	r24, 0x5F	; 95
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	fc 01       	movw	r30, r24
    16d6:	80 81       	ld	r24, Z
    16d8:	8c 8b       	std	Y+20, r24	; 0x14
    16da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    16de:	8b 87       	std	Y+11, r24	; 0x0b
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <sboxnet_send_msg+0x1c2>
    16e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16e6:	85 5f       	subi	r24, 0xF5	; 245
    16e8:	9e 4f       	sbci	r25, 0xFE	; 254
    16ea:	0e 94 01 02 	call	0x402	; 0x402 <sboxnet_rb_write_commit>
    16ee:	0e 94 66 06 	call	0xccc	; 0xccc <sboxnet_check_try_transmit>
    16f2:	1b 86       	std	Y+11, r1	; 0x0b
    16f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f6:	88 23       	and	r24, r24
    16f8:	a1 f7       	brne	.-24     	; 0x16e2 <sboxnet_send_msg+0x1b0>
    16fa:	ce 01       	movw	r24, r28
    16fc:	44 96       	adiw	r24, 0x14	; 20
    16fe:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1702:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <g_sboxnet+0x215>
    1706:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <g_sboxnet+0x216>
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <g_sboxnet+0x216>
    1710:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <g_sboxnet+0x215>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	66 96       	adiw	r28, 0x16	; 22
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <sboxnet_can_send_msg>:
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <sboxnet_can_send_msg+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <sboxnet_can_send_msg+0x8>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <sboxnet_can_send_msg+0xa>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	fc 01       	movw	r30, r24
    1740:	83 81       	ldd	r24, Z+3	; 0x03
    1742:	8f 73       	andi	r24, 0x3F	; 63
    1744:	8a 5f       	subi	r24, 0xFA	; 250
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	8f e5       	ldi	r24, 0x5F	; 95
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	8c 83       	std	Y+4, r24	; 0x04
    1752:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <sboxnet_can_send_msg+0x3e>
    175a:	83 e1       	ldi	r24, 0x13	; 19
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sboxnet_rb_getfree>
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	1a 82       	std	Y+2, r1	; 0x02
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	88 23       	and	r24, r24
    176a:	b9 f7       	brne	.-18     	; 0x175a <sboxnet_can_send_msg+0x32>
    176c:	ce 01       	movw	r24, r28
    176e:	04 96       	adiw	r24, 0x04	; 4
    1770:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	29 81       	ldd	r18, Y+1	; 0x01
    1778:	9b 81       	ldd	r25, Y+3	; 0x03
    177a:	92 17       	cp	r25, r18
    177c:	08 f0       	brcs	.+2      	; 0x1780 <sboxnet_can_send_msg+0x58>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	26 96       	adiw	r28, 0x06	; 6
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <sboxnet_can_read>:
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	00 d0       	rcall	.+0      	; 0x1798 <sboxnet_can_read+0x6>
    1798:	1f 92       	push	r1
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8f e5       	ldi	r24, 0x5F	; 95
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	fc 01       	movw	r30, r24
    17a4:	80 81       	ld	r24, Z
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <sboxnet_can_read+0x2a>
    17b0:	81 e1       	ldi	r24, 0x11	; 17
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	0e 94 b0 03 	call	0x760	; 0x760 <sboxnet_rb_can_read_bytes>
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	1a 82       	std	Y+2, r1	; 0x02
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	88 23       	and	r24, r24
    17c0:	b9 f7       	brne	.-18     	; 0x17b0 <sboxnet_can_read+0x1e>
    17c2:	ce 01       	movw	r24, r28
    17c4:	03 96       	adiw	r24, 0x03	; 3
    17c6:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	99 81       	ldd	r25, Y+1	; 0x01
    17ce:	96 30       	cpi	r25, 0x06	; 6
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <sboxnet_can_read+0x42>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <sboxnet_can_send>:
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <sboxnet_can_send+0x6>
    17e6:	1f 92       	push	r1
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	8f e5       	ldi	r24, 0x5F	; 95
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	8b 83       	std	Y+3, r24	; 0x03
    17f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <sboxnet_can_send+0x2a>
    17fe:	83 e1       	ldi	r24, 0x13	; 19
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	0e 94 e5 01 	call	0x3ca	; 0x3ca <sboxnet_rb_getfree>
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	1a 82       	std	Y+2, r1	; 0x02
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 23       	and	r24, r24
    180e:	b9 f7       	brne	.-18     	; 0x17fe <sboxnet_can_send+0x1e>
    1810:	ce 01       	movw	r24, r28
    1812:	03 96       	adiw	r24, 0x03	; 3
    1814:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	97 30       	cpi	r25, 0x07	; 7
    181e:	08 f4       	brcc	.+2      	; 0x1822 <sboxnet_can_send+0x42>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <sboxnet_set_sniffer_mode>:
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	1f 92       	push	r1
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	88 23       	and	r24, r24
    183e:	31 f0       	breq	.+12     	; 0x184c <sboxnet_set_sniffer_mode+0x1e>
    1840:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <sboxnet_set_sniffer_mode+0x28>
    184c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_sboxnet+0x1>
    1850:	8e 7f       	andi	r24, 0xFE	; 254
    1852:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_sboxnet+0x1>
    1856:	00 00       	nop
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <__vector_16>:
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    1868:	0f 92       	push	r0
    186a:	11 24       	eor	r1, r1
    186c:	2f 93       	push	r18
    186e:	3f 93       	push	r19
    1870:	4f 93       	push	r20
    1872:	5f 93       	push	r21
    1874:	6f 93       	push	r22
    1876:	7f 93       	push	r23
    1878:	8f 93       	push	r24
    187a:	9f 93       	push	r25
    187c:	af 93       	push	r26
    187e:	bf 93       	push	r27
    1880:	ef 93       	push	r30
    1882:	ff 93       	push	r31
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	0e 94 c1 08 	call	0x1182	; 0x1182 <sboxnet_timer_bit>
    1890:	00 00       	nop
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <trigger_led_msg_read>:
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <trigger_led_msg_read+0x6>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8f e5       	ldi	r24, 0x5F	; 95
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	fc 01       	movw	r30, r24
    18ca:	80 81       	ld	r24, Z
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	0d c0       	rjmp	.+26     	; 0x18f0 <trigger_led_msg_read+0x36>
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_timer_led_msg_read>
    18dc:	85 e2       	ldi	r24, 0x25	; 37
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	25 e2       	ldi	r18, 0x25	; 37
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	20 81       	ld	r18, Z
    18e8:	20 64       	ori	r18, 0x40	; 64
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	88 23       	and	r24, r24
    18f4:	81 f7       	brne	.-32     	; 0x18d6 <trigger_led_msg_read+0x1c>
    18f6:	ce 01       	movw	r24, r28
    18f8:	02 96       	adiw	r24, 0x02	; 2
    18fa:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    18fe:	00 00       	nop
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <trigger_led_msg_write>:
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	00 d0       	rcall	.+0      	; 0x1910 <trigger_led_msg_write+0x6>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	8f e5       	ldi	r24, 0x5F	; 95
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	80 81       	ld	r24, Z
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <trigger_led_msg_write+0x36>
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_timer_led_msg_write>
    192c:	85 e2       	ldi	r24, 0x25	; 37
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	25 e2       	ldi	r18, 0x25	; 37
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	f9 01       	movw	r30, r18
    1936:	20 81       	ld	r18, Z
    1938:	20 68       	ori	r18, 0x80	; 128
    193a:	fc 01       	movw	r30, r24
    193c:	20 83       	st	Z, r18
    193e:	19 82       	std	Y+1, r1	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 23       	and	r24, r24
    1944:	81 f7       	brne	.-32     	; 0x1926 <trigger_led_msg_write+0x1c>
    1946:	ce 01       	movw	r24, r28
    1948:	02 96       	adiw	r24, 0x02	; 2
    194a:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
    194e:	00 00       	nop
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <stack_free>:
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 d0       	rcall	.+0      	; 0x1960 <stack_free+0x6>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	88 e4       	ldi	r24, 0x48	; 72
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	0b c0       	rjmp	.+22     	; 0x1984 <stack_free+0x2a>
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	85 3a       	cpi	r24, 0xA5	; 165
    1978:	59 f4       	brne	.+22     	; 0x1990 <stack_free+0x36>
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	94 40       	sbci	r25, 0x04	; 4
    198c:	80 f3       	brcs	.-32     	; 0x196e <stack_free+0x14>
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <stack_free+0x38>
    1990:	00 00       	nop
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	3a 81       	ldd	r19, Y+2	; 0x02
    1996:	88 e4       	ldi	r24, 0x48	; 72
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	a9 01       	movw	r20, r18
    199c:	48 1b       	sub	r20, r24
    199e:	59 0b       	sbc	r21, r25
    19a0:	ca 01       	movw	r24, r20
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <stack_size>:
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	34 e0       	ldi	r19, 0x04	; 4
    19b8:	88 e4       	ldi	r24, 0x48	; 72
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	a9 01       	movw	r20, r18
    19be:	48 1b       	sub	r20, r24
    19c0:	59 0b       	sbc	r21, r25
    19c2:	ca 01       	movw	r24, r20
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <usb_ep_isSETUP>:
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	88 ee       	ldi	r24, 0xE8	; 232
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	80 81       	ld	r24, Z
    19da:	88 70       	andi	r24, 0x08	; 8
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <usb_ep_clearSETUP>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	88 ee       	ldi	r24, 0xE8	; 232
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	28 ee       	ldi	r18, 0xE8	; 232
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	20 81       	ld	r18, Z
    19f6:	27 7f       	andi	r18, 0xF7	; 247
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18
    19fc:	00 00       	nop
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <usb_ep_isIN>:
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	88 ee       	ldi	r24, 0xE8	; 232
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <usb_ep_clearIN>:
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	88 ee       	ldi	r24, 0xE8	; 232
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	28 ee       	ldi	r18, 0xE8	; 232
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	20 81       	ld	r18, Z
    1a30:	2e 7f       	andi	r18, 0xFE	; 254
    1a32:	fc 01       	movw	r30, r24
    1a34:	20 83       	st	Z, r18
    1a36:	00 00       	nop
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <usb_ep_isOUT>:
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	88 ee       	ldi	r24, 0xE8	; 232
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	80 81       	ld	r24, Z
    1a4e:	84 70       	andi	r24, 0x04	; 4
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <usb_ep_clearOUT>:
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	88 ee       	ldi	r24, 0xE8	; 232
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	28 ee       	ldi	r18, 0xE8	; 232
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	f9 01       	movw	r30, r18
    1a68:	20 81       	ld	r18, Z
    1a6a:	2b 7f       	andi	r18, 0xFB	; 251
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
    1a70:	00 00       	nop
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <usb_ep_set_stall>:
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	8b ee       	ldi	r24, 0xEB	; 235
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	2b ee       	ldi	r18, 0xEB	; 235
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	f9 01       	movw	r30, r18
    1a8a:	20 81       	ld	r18, Z
    1a8c:	20 62       	ori	r18, 0x20	; 32
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
    1a92:	00 00       	nop
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <__vector_11>:
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    1aa2:	0f 92       	push	r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	2f 93       	push	r18
    1aa8:	3f 93       	push	r19
    1aaa:	4f 93       	push	r20
    1aac:	5f 93       	push	r21
    1aae:	6f 93       	push	r22
    1ab0:	7f 93       	push	r23
    1ab2:	8f 93       	push	r24
    1ab4:	9f 93       	push	r25
    1ab6:	af 93       	push	r26
    1ab8:	bf 93       	push	r27
    1aba:	ef 93       	push	r30
    1abc:	ff 93       	push	r31
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <__vector_11+0x2a>
    1ac4:	1f 92       	push	r1
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	81 ee       	ldi	r24, 0xE1	; 225
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	fc 01       	movw	r30, r24
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	82 ee       	ldi	r24, 0xE2	; 226
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	fc 01       	movw	r30, r24
    1ada:	80 81       	ld	r24, Z
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	89 ee       	ldi	r24, 0xE9	; 233
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	80 81       	ld	r24, Z
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	ce 01       	movw	r24, r28
    1aea:	02 96       	adiw	r24, 0x02	; 2
    1aec:	fc 01       	movw	r30, r24
    1aee:	80 81       	ld	r24, Z
    1af0:	ce 01       	movw	r24, r28
    1af2:	02 96       	adiw	r24, 0x02	; 2
    1af4:	fc 01       	movw	r30, r24
    1af6:	80 81       	ld	r24, Z
    1af8:	ce 01       	movw	r24, r28
    1afa:	02 96       	adiw	r24, 0x02	; 2
    1afc:	fc 01       	movw	r30, r24
    1afe:	80 81       	ld	r24, Z
    1b00:	ce 01       	movw	r24, r28
    1b02:	02 96       	adiw	r24, 0x02	; 2
    1b04:	fc 01       	movw	r30, r24
    1b06:	80 81       	ld	r24, Z
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	88 70       	andi	r24, 0x08	; 8
    1b0e:	99 27       	eor	r25, r25
    1b10:	89 2b       	or	r24, r25
    1b12:	a9 f0       	breq	.+42     	; 0x1b3e <__vector_11+0xa4>
    1b14:	ce 01       	movw	r24, r28
    1b16:	03 96       	adiw	r24, 0x03	; 3
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 70       	andi	r24, 0x08	; 8
    1b22:	99 27       	eor	r25, r25
    1b24:	89 2b       	or	r24, r25
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <__vector_11+0x92>
    1b28:	0e 94 ca 12 	call	0x2594	; 0x2594 <usb_intr_endofreset>
    1b2c:	81 ee       	ldi	r24, 0xE1	; 225
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	21 ee       	ldi	r18, 0xE1	; 225
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	27 7f       	andi	r18, 0xF7	; 247
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
    1b3e:	ce 01       	movw	r24, r28
    1b40:	02 96       	adiw	r24, 0x02	; 2
    1b42:	fc 01       	movw	r30, r24
    1b44:	80 81       	ld	r24, Z
    1b46:	ce 01       	movw	r24, r28
    1b48:	02 96       	adiw	r24, 0x02	; 2
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	80 81       	ld	r24, Z
    1b4e:	81 ee       	ldi	r24, 0xE1	; 225
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	fc 01       	movw	r30, r24
    1b54:	10 82       	st	Z, r1
    1b56:	89 ee       	ldi	r24, 0xE9	; 233
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	29 81       	ldd	r18, Y+1	; 0x01
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	20 83       	st	Z, r18
    1b60:	00 00       	nop
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    1b8a:	0f 90       	pop	r0
    1b8c:	1f 90       	pop	r1
    1b8e:	18 95       	reti

00001b90 <usb_ep_read_data>:
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <usb_ep_read_data+0x6>
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	6b 83       	std	Y+3, r22	; 0x03
    1ba2:	10 c0       	rjmp	.+32     	; 0x1bc4 <usb_ep_read_data+0x34>
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	9c 01       	movw	r18, r24
    1baa:	2f 5f       	subi	r18, 0xFF	; 255
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	3a 83       	std	Y+2, r19	; 0x02
    1bb0:	29 83       	std	Y+1, r18	; 0x01
    1bb2:	21 ef       	ldi	r18, 0xF1	; 241
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	f9 01       	movw	r30, r18
    1bb8:	20 81       	ld	r18, Z
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 83       	st	Z, r18
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	81 50       	subi	r24, 0x01	; 1
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 23       	and	r24, r24
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <usb_ep_read_data+0x14>
    1bca:	00 00       	nop
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <usb_ep_waitIN>:
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	0a c0       	rjmp	.+20     	; 0x1bf6 <usb_ep_waitIN+0x1e>
    1be2:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	8c 71       	andi	r24, 0x1C	; 28
    1bec:	99 27       	eor	r25, r25
    1bee:	89 2b       	or	r24, r25
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <usb_ep_waitIN+0x1e>
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <usb_ep_waitIN+0x28>
    1bf6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <usb_ep_isIN>
    1bfa:	88 23       	and	r24, r24
    1bfc:	91 f3       	breq	.-28     	; 0x1be2 <usb_ep_waitIN+0xa>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <usb_ep_send_zlp>:
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	1f 92       	push	r1
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <usb_ep_waitIN>
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	88 23       	and	r24, r24
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <usb_ep_send_zlp+0x20>
    1c1c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <usb_ep_clearIN>
    1c20:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <usb_ep_waitIN>
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	0f 90       	pop	r0
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <usb_mem_read_byte>:
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <usb_mem_read_byte+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <usb_mem_read_byte+0x8>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <usb_mem_read_byte+0xa>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9d 83       	std	Y+5, r25	; 0x05
    1c40:	8c 83       	std	Y+4, r24	; 0x04
    1c42:	6e 83       	std	Y+6, r22	; 0x06
    1c44:	8e 81       	ldd	r24, Y+6	; 0x06
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <usb_mem_read_byte+0x26>
    1c50:	02 97       	sbiw	r24, 0x02	; 2
    1c52:	61 f0       	breq	.+24     	; 0x1c6c <usb_mem_read_byte+0x3c>
    1c54:	10 c0       	rjmp	.+32     	; 0x1c76 <usb_mem_read_byte+0x46>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	fc 01       	movw	r30, r24
    1c64:	84 91       	lpm	r24, Z
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	09 c0       	rjmp	.+18     	; 0x1c7e <usb_mem_read_byte+0x4e>
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <eeprom_read_byte>
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <usb_mem_read_byte+0x4e>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	26 96       	adiw	r28, 0x06	; 6
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <usb_ep_getbufsize>:
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <usb_ep_getbufsize+0x6>
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	8d ee       	ldi	r24, 0xED	; 237
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
    1ca4:	82 95       	swap	r24
    1ca6:	8f 70       	andi	r24, 0x0F	; 15
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	83 70       	andi	r24, 0x03	; 3
    1cae:	99 27       	eor	r25, r25
    1cb0:	80 5a       	subi	r24, 0xA0	; 160
    1cb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	84 91       	lpm	r24, Z
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <usb_ep_send_control_data_chunk>:

//------------------------------------------------------------

uint8_t usb_ep_send_control_data_chunk(const void* psrc, uint16_t size, uint8_t srctype) {
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	27 97       	sbiw	r28, 0x07	; 7
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	7e 83       	std	Y+6, r23	; 0x06
    1cee:	6d 83       	std	Y+5, r22	; 0x05
    1cf0:	4f 83       	std	Y+7, r20	; 0x07
    uint8_t epsize = usb_ep_getbufsize();
    1cf2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <usb_ep_getbufsize>
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    DPSTR(":");
    DHEXB(size);
    DPSTR(":");

    for (;;) {
        if (!(g_usb_dev.state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED|USB_DEVICE_STATE_DEFAULT))) {
    1cf8:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	8c 71       	andi	r24, 0x1C	; 28
    1d02:	99 27       	eor	r25, r25
    1d04:	89 2b       	or	r24, r25
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <usb_ep_send_control_data_chunk+0x3c>
            return USB_RC_STATE_ABORT;
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	45 c0       	rjmp	.+138    	; 0x1d96 <usb_ep_send_control_data_chunk+0xc6>
        } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
    1d0c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <usb_ep_isSETUP>
    1d10:	88 23       	and	r24, r24
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <usb_ep_send_control_data_chunk+0x48>
            DPSTR("AS");
            return USB_RC_NEW_SETUP;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <usb_ep_send_control_data_chunk+0xc6>
        } else if (usb_ep_isOUT()) { // out packet received -> abort
    1d18:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <usb_ep_isOUT>
    1d1c:	88 23       	and	r24, r24
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <usb_ep_send_control_data_chunk+0x58>
            usb_ep_clearOUT();
    1d20:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <usb_ep_clearOUT>
            DPSTR("AO");
            return USB_RC_NEW_OUT;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	37 c0       	rjmp	.+110    	; 0x1d96 <usb_ep_send_control_data_chunk+0xc6>
        } else if (!usb_ep_isIN()) { // transmitter not ready -> retry
    1d28:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <usb_ep_isIN>
    1d2c:	88 23       	and	r24, r24
    1d2e:	79 f1       	breq	.+94     	; 0x1d8e <usb_ep_send_control_data_chunk+0xbe>
            DCHECK();
            continue;
        }

        uint8_t written = UEBCLX; // num of bytes in fifo
    1d30:	82 ef       	ldi	r24, 0xF2	; 242
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	fc 01       	movw	r30, r24
    1d36:	80 81       	ld	r24, Z
    1d38:	89 83       	std	Y+1, r24	; 0x01
        while (size && written < epsize) {
    1d3a:	16 c0       	rjmp	.+44     	; 0x1d68 <usb_ep_send_control_data_chunk+0x98>
            UEDATX = usb_mem_read_byte(psrc++, srctype);
    1d3c:	01 ef       	ldi	r16, 0xF1	; 241
    1d3e:	10 e0       	ldi	r17, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	9c 01       	movw	r18, r24
    1d46:	2f 5f       	subi	r18, 0xFF	; 255
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	3c 83       	std	Y+4, r19	; 0x04
    1d4c:	2b 83       	std	Y+3, r18	; 0x03
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <usb_mem_read_byte>
    1d54:	f8 01       	movw	r30, r16
    1d56:	80 83       	st	Z, r24
            size--;
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
            written++;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	89 83       	std	Y+1, r24	; 0x01
            DCHECK();
            continue;
        }

        uint8_t written = UEBCLX; // num of bytes in fifo
        while (size && written < epsize) {
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	89 2b       	or	r24, r25
    1d6e:	21 f0       	breq	.+8      	; 0x1d78 <usb_ep_send_control_data_chunk+0xa8>
    1d70:	99 81       	ldd	r25, Y+1	; 0x01
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	98 17       	cp	r25, r24
    1d76:	10 f3       	brcs	.-60     	; 0x1d3c <usb_ep_send_control_data_chunk+0x6c>
            UEDATX = usb_mem_read_byte(psrc++, srctype);
            size--;
            written++;
        }
        if (written == epsize) {  // send it
    1d78:	99 81       	ldd	r25, Y+1	; 0x01
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	98 17       	cp	r25, r24
    1d7e:	11 f4       	brne	.+4      	; 0x1d84 <usb_ep_send_control_data_chunk+0xb4>
            DPSTR("CI");
            usb_ep_clearIN();
    1d80:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <usb_ep_clearIN>
        }
        if (size == 0) {
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	89 2b       	or	r24, r25
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <usb_ep_send_control_data_chunk+0xc2>
    1d8c:	b5 cf       	rjmp	.-150    	; 0x1cf8 <usb_ep_send_control_data_chunk+0x28>
            usb_ep_clearOUT();
            DPSTR("AO");
            return USB_RC_NEW_OUT;
        } else if (!usb_ep_isIN()) { // transmitter not ready -> retry
            DCHECK();
            continue;
    1d8e:	00 00       	nop
            usb_ep_clearIN();
        }
        if (size == 0) {
            break;
        }
    }
    1d90:	b3 cf       	rjmp	.-154    	; 0x1cf8 <usb_ep_send_control_data_chunk+0x28>
        if (written == epsize) {  // send it
            DPSTR("CI");
            usb_ep_clearIN();
        }
        if (size == 0) {
            break;
    1d92:	00 00       	nop
        }
    }
    return USB_RC_OK;
    1d94:	80 e0       	ldi	r24, 0x00	; 0
}
    1d96:	27 96       	adiw	r28, 0x07	; 7
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	08 95       	ret

00001dac <usb_ep_send_control_data_finish>:

uint8_t usb_ep_send_control_data_finish(void) {
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    for (;;) {
        if (!(g_usb_dev.state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED|USB_DEVICE_STATE_DEFAULT))) {
    1db4:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	8c 71       	andi	r24, 0x1C	; 28
    1dbe:	99 27       	eor	r25, r25
    1dc0:	89 2b       	or	r24, r25
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <usb_ep_send_control_data_finish+0x1c>
            return USB_RC_STATE_ABORT;
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	2e c0       	rjmp	.+92     	; 0x1e24 <usb_ep_send_control_data_finish+0x78>
        } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
    1dc8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <usb_ep_isSETUP>
    1dcc:	88 23       	and	r24, r24
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <usb_ep_send_control_data_finish+0x28>
            DPSTR("AS");
            return USB_RC_NEW_SETUP;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	28 c0       	rjmp	.+80     	; 0x1e24 <usb_ep_send_control_data_finish+0x78>
        } else if (usb_ep_isOUT()) { // out packet received -> abort
    1dd4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <usb_ep_isOUT>
    1dd8:	88 23       	and	r24, r24
    1dda:	21 f0       	breq	.+8      	; 0x1de4 <usb_ep_send_control_data_finish+0x38>
            usb_ep_clearOUT();
    1ddc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <usb_ep_clearOUT>
            DPSTR("AO");
            return USB_RC_NEW_OUT;
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	20 c0       	rjmp	.+64     	; 0x1e24 <usb_ep_send_control_data_finish+0x78>
        } else if (!usb_ep_isIN()) { // transmitter not ready -> retry
    1de4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <usb_ep_isIN>
    1de8:	88 23       	and	r24, r24
    1dea:	09 f4       	brne	.+2      	; 0x1dee <usb_ep_send_control_data_finish+0x42>
            continue;
        }
        DPSTR("CI");
        usb_ep_clearIN();
        break;
    }
    1dec:	e3 cf       	rjmp	.-58     	; 0x1db4 <usb_ep_send_control_data_finish+0x8>
        } else if (!usb_ep_isIN()) { // transmitter not ready -> retry
            DCHECK();
            continue;
        }
        DPSTR("CI");
        usb_ep_clearIN();
    1dee:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <usb_ep_clearIN>
        break;
    1df2:	00 00       	nop
    }
    DPSTR("WO");
    while (!usb_ep_isOUT()) { // STATUS stage: wait till OUT package received
    1df4:	10 c0       	rjmp	.+32     	; 0x1e16 <usb_ep_send_control_data_finish+0x6a>
        if (!(g_usb_dev.state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED|USB_DEVICE_STATE_DEFAULT))) {
    1df6:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	8c 71       	andi	r24, 0x1C	; 28
    1e00:	99 27       	eor	r25, r25
    1e02:	89 2b       	or	r24, r25
    1e04:	11 f4       	brne	.+4      	; 0x1e0a <usb_ep_send_control_data_finish+0x5e>
            return USB_RC_STATE_ABORT;
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	0d c0       	rjmp	.+26     	; 0x1e24 <usb_ep_send_control_data_finish+0x78>
        } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
    1e0a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <usb_ep_isSETUP>
    1e0e:	88 23       	and	r24, r24
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <usb_ep_send_control_data_finish+0x6a>
            DPSTR("AS");
            return USB_RC_NEW_SETUP;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <usb_ep_send_control_data_finish+0x78>
        DPSTR("CI");
        usb_ep_clearIN();
        break;
    }
    DPSTR("WO");
    while (!usb_ep_isOUT()) { // STATUS stage: wait till OUT package received
    1e16:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <usb_ep_isOUT>
    1e1a:	88 23       	and	r24, r24
    1e1c:	61 f3       	breq	.-40     	; 0x1df6 <usb_ep_send_control_data_finish+0x4a>
        } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
            DPSTR("AS");
            return USB_RC_NEW_SETUP;
        }
    }
    usb_ep_clearOUT();
    1e1e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <usb_ep_clearOUT>
    DPSTR("SE\n");
    return USB_RC_OK;
    1e22:	80 e0       	ldi	r24, 0x00	; 0
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <usb_ep_send_control_data>:

uint8_t usb_ep_send_control_data(const void* psrc, uint16_t size, uint8_t srctype, uint16_t reqsize) {
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	28 97       	sbiw	r28, 0x08	; 8
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	9b 83       	std	Y+3, r25	; 0x03
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	7d 83       	std	Y+5, r23	; 0x05
    1e44:	6c 83       	std	Y+4, r22	; 0x04
    1e46:	4e 83       	std	Y+6, r20	; 0x06
    1e48:	38 87       	std	Y+8, r19	; 0x08
    1e4a:	2f 83       	std	Y+7, r18	; 0x07
    uint8_t r = usb_ep_send_control_data_chunk(psrc, minvalof(size, reqsize), srctype);
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	8f 81       	ldd	r24, Y+7	; 0x07
    1e52:	98 85       	ldd	r25, Y+8	; 0x08
    1e54:	28 17       	cp	r18, r24
    1e56:	39 07       	cpc	r19, r25
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <usb_ep_send_control_data+0x32>
    1e5a:	c9 01       	movw	r24, r18
    1e5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e60:	4e 81       	ldd	r20, Y+6	; 0x06
    1e62:	bc 01       	movw	r22, r24
    1e64:	c9 01       	movw	r24, r18
    1e66:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <usb_ep_send_control_data_chunk>
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    if (r == USB_RC_OK) {
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	88 23       	and	r24, r24
    1e70:	19 f4       	brne	.+6      	; 0x1e78 <usb_ep_send_control_data+0x4e>
        r = usb_ep_send_control_data_finish();
    1e72:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <usb_ep_send_control_data_finish>
    1e76:	89 83       	std	Y+1, r24	; 0x01
    }
    return r;
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e7a:	28 96       	adiw	r28, 0x08	; 8
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <usb_ep_recv_control_data_chunk>:

//------------------------------------------------------------

uint8_t usb_ep_recv_control_data_chunk(void* psrc, uint16_t* psize, uint16_t size) {
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	28 97       	sbiw	r28, 0x08	; 8
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	7e 83       	std	Y+6, r23	; 0x06
    1ea6:	6d 83       	std	Y+5, r22	; 0x05
    1ea8:	58 87       	std	Y+8, r21	; 0x08
    1eaa:	4f 83       	std	Y+7, r20	; 0x07
    uint16_t readb = 0;
    1eac:	1a 82       	std	Y+2, r1	; 0x02
    1eae:	19 82       	std	Y+1, r1	; 0x01
    *psize = 0;
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	11 82       	std	Z+1, r1	; 0x01
    1eb8:	10 82       	st	Z, r1
    if (size) {
    1eba:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebc:	98 85       	ldd	r25, Y+8	; 0x08
    1ebe:	89 2b       	or	r24, r25
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <usb_ep_recv_control_data_chunk+0x38>
    1ec2:	4e c0       	rjmp	.+156    	; 0x1f60 <usb_ep_recv_control_data_chunk+0xd4>
        for (;;) {
            if (!(g_usb_dev.state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED|USB_DEVICE_STATE_DEFAULT))) {
    1ec4:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	8c 71       	andi	r24, 0x1C	; 28
    1ece:	99 27       	eor	r25, r25
    1ed0:	89 2b       	or	r24, r25
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <usb_ep_recv_control_data_chunk+0x4c>
                return USB_RC_STATE_ABORT;
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	45 c0       	rjmp	.+138    	; 0x1f62 <usb_ep_recv_control_data_chunk+0xd6>
            } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
    1ed8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <usb_ep_isSETUP>
    1edc:	88 23       	and	r24, r24
    1ede:	11 f0       	breq	.+4      	; 0x1ee4 <usb_ep_recv_control_data_chunk+0x58>
                return USB_RC_NEW_SETUP;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <usb_ep_recv_control_data_chunk+0xd6>
            } else if (!usb_ep_isOUT()) {
    1ee4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <usb_ep_isOUT>
    1ee8:	88 23       	and	r24, r24
    1eea:	c1 f1       	breq	.+112    	; 0x1f5c <usb_ep_recv_control_data_chunk+0xd0>
                continue;
            }
        
            while (UEBCLX && readb < size) {
    1eec:	12 c0       	rjmp	.+36     	; 0x1f12 <usb_ep_recv_control_data_chunk+0x86>
                *(uint8_t*)psrc++ = UEDATX;
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	9c 01       	movw	r18, r24
    1ef4:	2f 5f       	subi	r18, 0xFF	; 255
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	3c 83       	std	Y+4, r19	; 0x04
    1efa:	2b 83       	std	Y+3, r18	; 0x03
    1efc:	21 ef       	ldi	r18, 0xF1	; 241
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	f9 01       	movw	r30, r18
    1f02:	20 81       	ld	r18, Z
    1f04:	fc 01       	movw	r30, r24
    1f06:	20 83       	st	Z, r18
                readb++;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
                return USB_RC_NEW_SETUP;
            } else if (!usb_ep_isOUT()) {
                continue;
            }
        
            while (UEBCLX && readb < size) {
    1f12:	82 ef       	ldi	r24, 0xF2	; 242
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 23       	and	r24, r24
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <usb_ep_recv_control_data_chunk+0xa0>
    1f1e:	29 81       	ldd	r18, Y+1	; 0x01
    1f20:	3a 81       	ldd	r19, Y+2	; 0x02
    1f22:	8f 81       	ldd	r24, Y+7	; 0x07
    1f24:	98 85       	ldd	r25, Y+8	; 0x08
    1f26:	28 17       	cp	r18, r24
    1f28:	39 07       	cpc	r19, r25
    1f2a:	08 f3       	brcs	.-62     	; 0x1eee <usb_ep_recv_control_data_chunk+0x62>
                *(uint8_t*)psrc++ = UEDATX;
                readb++;
            }
            if (UEBCLX == 0) {
    1f2c:	82 ef       	ldi	r24, 0xF2	; 242
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	fc 01       	movw	r30, r24
    1f32:	80 81       	ld	r24, Z
    1f34:	88 23       	and	r24, r24
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <usb_ep_recv_control_data_chunk+0xb0>
                usb_ep_clearOUT();
    1f38:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <usb_ep_clearOUT>
            }
            if (readb >= size) {
    1f3c:	29 81       	ldd	r18, Y+1	; 0x01
    1f3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f40:	8f 81       	ldd	r24, Y+7	; 0x07
    1f42:	98 85       	ldd	r25, Y+8	; 0x08
    1f44:	28 17       	cp	r18, r24
    1f46:	39 07       	cpc	r19, r25
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <usb_ep_recv_control_data_chunk+0xc0>
    1f4a:	bc cf       	rjmp	.-136    	; 0x1ec4 <usb_ep_recv_control_data_chunk+0x38>
                *psize = readb;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	29 81       	ldd	r18, Y+1	; 0x01
    1f52:	3a 81       	ldd	r19, Y+2	; 0x02
    1f54:	fc 01       	movw	r30, r24
    1f56:	31 83       	std	Z+1, r19	; 0x01
    1f58:	20 83       	st	Z, r18
                break;
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <usb_ep_recv_control_data_chunk+0xd4>
            if (!(g_usb_dev.state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED|USB_DEVICE_STATE_DEFAULT))) {
                return USB_RC_STATE_ABORT;
            } else if (usb_ep_isSETUP()) { // new setup packet received -> abort
                return USB_RC_NEW_SETUP;
            } else if (!usb_ep_isOUT()) {
                continue;
    1f5c:	00 00       	nop
            }
            if (readb >= size) {
                *psize = readb;
                break;
            }
        }
    1f5e:	b2 cf       	rjmp	.-156    	; 0x1ec4 <usb_ep_recv_control_data_chunk+0x38>
    }
    return USB_RC_OK;
    1f60:	80 e0       	ldi	r24, 0x00	; 0
}
    1f62:	28 96       	adiw	r28, 0x08	; 8
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	08 95       	ret

00001f74 <usb_ep_recv_control_data_finish>:

uint8_t usb_ep_recv_control_data_finish(void) {
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    usb_ep_clearOUT();
    1f7c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <usb_ep_clearOUT>
    return usb_ep_send_zlp();
    1f80:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <usb_ep_send_zlp>
}
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <usb_ep_recv_control_data>:

uint8_t usb_ep_recv_control_data(void* psrc, uint16_t* psize, uint16_t reqsize) {    
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	27 97       	sbiw	r28, 0x07	; 7
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	9b 83       	std	Y+3, r25	; 0x03
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	7d 83       	std	Y+5, r23	; 0x05
    1fa4:	6c 83       	std	Y+4, r22	; 0x04
    1fa6:	5f 83       	std	Y+7, r21	; 0x07
    1fa8:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t r = usb_ep_recv_control_data_chunk(psrc, psize, reqsize);
    1faa:	4e 81       	ldd	r20, Y+6	; 0x06
    1fac:	5f 81       	ldd	r21, Y+7	; 0x07
    1fae:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	b9 01       	movw	r22, r18
    1fb8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <usb_ep_recv_control_data_chunk>
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    if (r == USB_RC_OK) {
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	88 23       	and	r24, r24
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <usb_ep_recv_control_data+0x40>
        r = usb_ep_recv_control_data_finish();
    1fc4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <usb_ep_recv_control_data_finish>
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    }
    return r;
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fcc:	27 96       	adiw	r28, 0x07	; 7
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <usb_ep0_get_configuration>:

//------------------------------------------------------------

static uint8_t usb_ep0_get_configuration(void) {
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <usb_ep0_get_configuration+0x6>
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    struct usb_dev* dev = &g_usb_dev;
    1fe8:	8b e3       	ldi	r24, 0x3B	; 59
    1fea:	93 e0       	ldi	r25, 0x03	; 3
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    if (dev->state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED)) {
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	88 71       	andi	r24, 0x18	; 24
    1ffe:	99 27       	eor	r25, r25
    2000:	89 2b       	or	r24, r25
    2002:	71 f0       	breq	.+28     	; 0x2020 <usb_ep0_get_configuration+0x42>
        usb_ep_clearSETUP();
    2004:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
        usb_ep_send_control_data(&dev->cur_config, 1, USB_MEM_SRC_RAM, 1);
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
        return 0;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <usb_ep0_get_configuration+0x44>
    }
    return 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <usb_ep0_get_descriptor>:

static uint8_t usb_ep0_get_descriptor(struct usb_device_request* req) {
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	2c 97       	sbiw	r28, 0x0c	; 12
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	9c 87       	std	Y+12, r25	; 0x0c
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    struct usb_dev* dev = &g_usb_dev;
    204a:	8b e3       	ldi	r24, 0x3B	; 59
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    switch (highbyte(req->wValue)) {
    2052:	8b 85       	ldd	r24, Y+11	; 0x0b
    2054:	9c 85       	ldd	r25, Y+12	; 0x0c
    2056:	fc 01       	movw	r30, r24
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	89 2f       	mov	r24, r25
    205e:	99 27       	eor	r25, r25
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	91 05       	cpc	r25, r1
    2064:	e1 f0       	breq	.+56     	; 0x209e <usb_ep0_get_descriptor+0x72>
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	91 05       	cpc	r25, r1
    206a:	e9 f1       	breq	.+122    	; 0x20e6 <usb_ep0_get_descriptor+0xba>
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	09 f0       	breq	.+2      	; 0x2072 <usb_ep0_get_descriptor+0x46>
            }
            break;
        }
        
        default:
            break;
    2070:	ce c0       	rjmp	.+412    	; 0x220e <usb_ep0_get_descriptor+0x1e2>
static uint8_t usb_ep0_get_descriptor(struct usb_device_request* req) {
    struct usb_dev* dev = &g_usb_dev;
    switch (highbyte(req->wValue)) {
        case USB_DESC_DEVICE:
        {
            usb_ep_clearSETUP();
    2072:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_send_control_data(dev->pdesc_dev, sizeof(struct usb_device_desc), dev->desc_dtype, req->wLength);
    2076:	8b 85       	ldd	r24, Y+11	; 0x0b
    2078:	9c 85       	ldd	r25, Y+12	; 0x0c
    207a:	fc 01       	movw	r30, r24
    207c:	26 81       	ldd	r18, Z+6	; 0x06
    207e:	37 81       	ldd	r19, Z+7	; 0x07
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	44 85       	ldd	r20, Z+12	; 0x0c
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	fc 01       	movw	r30, r24
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	62 e1       	ldi	r22, 0x12	; 18
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	b9 c0       	rjmp	.+370    	; 0x2210 <usb_ep0_get_descriptor+0x1e4>
        }
        
        case USB_DESC_CONFIGURATION:
        {
            uint8_t idx = lowbyte(req->wValue);
    209e:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a2:	fc 01       	movw	r30, r24
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	8d 83       	std	Y+5, r24	; 0x05
            if (idx == 0) {
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <usb_ep0_get_descriptor+0x86>
    20b0:	ab c0       	rjmp	.+342    	; 0x2208 <usb_ep0_get_descriptor+0x1dc>
                usb_ep_clearSETUP();
    20b2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
                usb_ep_send_control_data(dev->pdesc_config, dev->desc_config_size, dev->desc_dtype, req->wLength);
    20b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ba:	fc 01       	movw	r30, r24
    20bc:	26 81       	ldd	r18, Z+6	; 0x06
    20be:	37 81       	ldd	r19, Z+7	; 0x07
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	44 85       	ldd	r20, Z+12	; 0x0c
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	fc 01       	movw	r30, r24
    20ce:	86 81       	ldd	r24, Z+6	; 0x06
    20d0:	68 2f       	mov	r22, r24
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	84 81       	ldd	r24, Z+4	; 0x04
    20dc:	95 81       	ldd	r25, Z+5	; 0x05
    20de:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
                return 0;
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	95 c0       	rjmp	.+298    	; 0x2210 <usb_ep0_get_descriptor+0x1e4>
            break;
        }
            
        case USB_DESC_STRING:
        {   // ignore language
            uint8_t idx = lowbyte(req->wValue);
    20e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ea:	fc 01       	movw	r30, r24
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	8e 83       	std	Y+6, r24	; 0x06
            if (dev->get_string_func != NULL && (*dev->get_string_func)(req, idx) == 0) {
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	82 85       	ldd	r24, Z+10	; 0x0a
    20fa:	93 85       	ldd	r25, Z+11	; 0x0b
    20fc:	89 2b       	or	r24, r25
    20fe:	71 f0       	breq	.+28     	; 0x211c <usb_ep0_get_descriptor+0xf0>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	fc 01       	movw	r30, r24
    2106:	22 85       	ldd	r18, Z+10	; 0x0a
    2108:	33 85       	ldd	r19, Z+11	; 0x0b
    210a:	8b 85       	ldd	r24, Y+11	; 0x0b
    210c:	9c 85       	ldd	r25, Y+12	; 0x0c
    210e:	6e 81       	ldd	r22, Y+6	; 0x06
    2110:	f9 01       	movw	r30, r18
    2112:	09 95       	icall
    2114:	88 23       	and	r24, r24
    2116:	11 f4       	brne	.+4      	; 0x211c <usb_ep0_get_descriptor+0xf0>
                return 0;
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	7a c0       	rjmp	.+244    	; 0x2210 <usb_ep0_get_descriptor+0x1e4>
            }
            if (idx < dev->desc_string_num) {
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	91 85       	ldd	r25, Z+9	; 0x09
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	89 17       	cp	r24, r25
    2128:	08 f0       	brcs	.+2      	; 0x212c <usb_ep0_get_descriptor+0x100>
    212a:	70 c0       	rjmp	.+224    	; 0x220c <usb_ep0_get_descriptor+0x1e0>
                const struct usb_string_desc* paddr;
                
                switch (dev->desc_dtype) {
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	fc 01       	movw	r30, r24
    2132:	84 85       	ldd	r24, Z+12	; 0x0c
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	91 05       	cpc	r25, r1
    213c:	19 f0       	breq	.+6      	; 0x2144 <usb_ep0_get_descriptor+0x118>
    213e:	02 97       	sbiw	r24, 0x02	; 2
    2140:	f1 f0       	breq	.+60     	; 0x217e <usb_ep0_get_descriptor+0x152>
    2142:	2e c0       	rjmp	.+92     	; 0x21a0 <usb_ep0_get_descriptor+0x174>
                    case USB_MEM_SRC_PROGMEM:
                        paddr = (const struct usb_string_desc*)pgm_read_word(dev->pdesc_string + idx);
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	fc 01       	movw	r30, r24
    214a:	27 81       	ldd	r18, Z+7	; 0x07
    214c:	30 85       	ldd	r19, Z+8	; 0x08
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	82 0f       	add	r24, r18
    215a:	93 1f       	adc	r25, r19
    215c:	98 87       	std	Y+8, r25	; 0x08
    215e:	8f 83       	std	Y+7, r24	; 0x07
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	fc 01       	movw	r30, r24
    2166:	25 91       	lpm	r18, Z+
    2168:	34 91       	lpm	r19, Z
    216a:	cf 01       	movw	r24, r30
    216c:	3a 87       	std	Y+10, r19	; 0x0a
    216e:	29 87       	std	Y+9, r18	; 0x09
    2170:	98 87       	std	Y+8, r25	; 0x08
    2172:	8f 83       	std	Y+7, r24	; 0x07
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
                        break;
    217c:	23 c0       	rjmp	.+70     	; 0x21c4 <usb_ep0_get_descriptor+0x198>
                
                    case USB_MEM_SRC_EEPROM:
                        paddr = (const struct usb_string_desc*)eeprom_read_word((const uint16_t*)dev->pdesc_string + idx);
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	fc 01       	movw	r30, r24
    2184:	27 81       	ldd	r18, Z+7	; 0x07
    2186:	30 85       	ldd	r19, Z+8	; 0x08
    2188:	8e 81       	ldd	r24, Y+6	; 0x06
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	82 0f       	add	r24, r18
    2194:	93 1f       	adc	r25, r19
    2196:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <eeprom_read_word>
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
                        break;
    219e:	12 c0       	rjmp	.+36     	; 0x21c4 <usb_ep0_get_descriptor+0x198>
                        
                    default:
                        paddr = (const struct usb_string_desc*)dev->pdesc_string[idx];
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	fc 01       	movw	r30, r24
    21a6:	27 81       	ldd	r18, Z+7	; 0x07
    21a8:	30 85       	ldd	r19, Z+8	; 0x08
    21aa:	8e 81       	ldd	r24, Y+6	; 0x06
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	fc 01       	movw	r30, r24
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
                        break;
    21c2:	00 00       	nop
                }
                if (paddr != NULL) {
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	89 2b       	or	r24, r25
    21ca:	01 f1       	breq	.+64     	; 0x220c <usb_ep0_get_descriptor+0x1e0>
                    usb_ep_clearSETUP();
    21cc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
                    usb_ep_send_control_data(paddr, usb_mem_read_byte(paddr, dev->desc_dtype), dev->desc_dtype, req->wLength);
    21d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21d4:	fc 01       	movw	r30, r24
    21d6:	06 81       	ldd	r16, Z+6	; 0x06
    21d8:	17 81       	ldd	r17, Z+7	; 0x07
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	fc 01       	movw	r30, r24
    21e0:	f4 84       	ldd	r15, Z+12	; 0x0c
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	fc 01       	movw	r30, r24
    21e8:	24 85       	ldd	r18, Z+12	; 0x0c
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	62 2f       	mov	r22, r18
    21f0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <usb_mem_read_byte>
    21f4:	68 2f       	mov	r22, r24
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	98 01       	movw	r18, r16
    21fe:	4f 2d       	mov	r20, r15
    2200:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
                    return 0;
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <usb_ep0_get_descriptor+0x1e4>
            if (idx == 0) {
                usb_ep_clearSETUP();
                usb_ep_send_control_data(dev->pdesc_config, dev->desc_config_size, dev->desc_dtype, req->wLength);
                return 0;
            }
            break;
    2208:	00 00       	nop
    220a:	01 c0       	rjmp	.+2      	; 0x220e <usb_ep0_get_descriptor+0x1e2>
                    usb_ep_clearSETUP();
                    usb_ep_send_control_data(paddr, usb_mem_read_byte(paddr, dev->desc_dtype), dev->desc_dtype, req->wLength);
                    return 0;
                }
            }
            break;
    220c:	00 00       	nop
        }
        
        default:
            break;
    }
    return 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
}
    2210:	2c 96       	adiw	r28, 0x0c	; 12
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	08 95       	ret

00002228 <usb_ep0_set_address>:

static uint8_t usb_ep0_set_address(struct usb_device_request* req) {
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	00 d0       	rcall	.+0      	; 0x222e <usb_ep0_set_address+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <usb_ep0_set_address+0x8>
    2230:	1f 92       	push	r1
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9d 83       	std	Y+5, r25	; 0x05
    2238:	8c 83       	std	Y+4, r24	; 0x04
    struct usb_dev* dev = &g_usb_dev;
    223a:	8b e3       	ldi	r24, 0x3B	; 59
    223c:	93 e0       	ldi	r25, 0x03	; 3
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
    
    if (dev->state & (USB_DEVICE_STATE_DEFAULT|USB_DEVICE_STATE_ADDRESS)) {
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	fc 01       	movw	r30, r24
    2248:	80 81       	ld	r24, Z
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	8c 70       	andi	r24, 0x0C	; 12
    2250:	99 27       	eor	r25, r25
    2252:	89 2b       	or	r24, r25
    2254:	49 f1       	breq	.+82     	; 0x22a8 <usb_ep0_set_address+0x80>
        uint8_t addr = req->wValue & 0x007f;
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9d 81       	ldd	r25, Y+5	; 0x05
    225a:	fc 01       	movw	r30, r24
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	8f 77       	andi	r24, 0x7F	; 127
    2262:	8b 83       	std	Y+3, r24	; 0x03
        usb_ep_clearSETUP();
    2264:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
        UDADDR = addr;
    2268:	83 ee       	ldi	r24, 0xE3	; 227
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	fc 01       	movw	r30, r24
    2270:	20 83       	st	Z, r18
        usb_ep_send_zlp();
    2272:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <usb_ep_send_zlp>
        setbit(UDADDR, ADDEN);
    2276:	83 ee       	ldi	r24, 0xE3	; 227
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	23 ee       	ldi	r18, 0xE3	; 227
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	f9 01       	movw	r30, r18
    2280:	20 81       	ld	r18, Z
    2282:	20 68       	ori	r18, 0x80	; 128
    2284:	fc 01       	movw	r30, r24
    2286:	20 83       	st	Z, r18
        if (addr) {
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	88 23       	and	r24, r24
    228c:	31 f0       	breq	.+12     	; 0x229a <usb_ep0_set_address+0x72>
            dev->state = USB_DEVICE_STATE_ADDRESS;
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	28 e0       	ldi	r18, 0x08	; 8
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <usb_ep0_set_address+0x7c>
        } else {
            dev->state = USB_DEVICE_STATE_DEFAULT;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	24 e0       	ldi	r18, 0x04	; 4
    22a0:	fc 01       	movw	r30, r24
    22a2:	20 83       	st	Z, r18
        }
        return 0;
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <usb_ep0_set_address+0x82>
    }
    return 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <usb_ep0_set_configuration>:

static uint8_t usb_ep0_set_configuration(struct usb_device_request* req) {
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <usb_ep0_set_configuration+0x6>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <usb_ep0_set_configuration+0x8>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <usb_ep0_set_configuration+0xa>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    struct usb_dev* dev = &g_usb_dev;
    22cc:	8b e3       	ldi	r24, 0x3B	; 59
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
    if (dev->state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED)) {
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	fc 01       	movw	r30, r24
    22da:	80 81       	ld	r24, Z
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	88 71       	andi	r24, 0x18	; 24
    22e2:	99 27       	eor	r25, r25
    22e4:	89 2b       	or	r24, r25
    22e6:	09 f4       	brne	.+2      	; 0x22ea <usb_ep0_set_configuration+0x30>
    22e8:	3e c0       	rjmp	.+124    	; 0x2366 <usb_ep0_set_configuration+0xac>
        uint8_t confnr = lowbyte(req->wValue);
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	fc 01       	movw	r30, r24
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	8b 83       	std	Y+3, r24	; 0x03
        if (confnr == 0) {
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	88 23       	and	r24, r24
    22fa:	51 f4       	brne	.+20     	; 0x2310 <usb_ep0_set_configuration+0x56>
            dev->state = USB_DEVICE_STATE_ADDRESS;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	28 e0       	ldi	r18, 0x08	; 8
    2302:	fc 01       	movw	r30, r24
    2304:	20 83       	st	Z, r18
            dev->cur_config = 0;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	fc 01       	movw	r30, r24
    230c:	11 82       	std	Z+1, r1	; 0x01
    230e:	25 c0       	rjmp	.+74     	; 0x235a <usb_ep0_set_configuration+0xa0>
            
        } else {
            uint8_t cnr = usb_mem_read_byte(&((struct usb_configuration_desc*)dev->pdesc_config)->bConfigurationValue, dev->desc_dtype);
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	fc 01       	movw	r30, r24
    2316:	24 85       	ldd	r18, Z+12	; 0x0c
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	fc 01       	movw	r30, r24
    231e:	84 81       	ldd	r24, Z+4	; 0x04
    2320:	95 81       	ldd	r25, Z+5	; 0x05
    2322:	05 96       	adiw	r24, 0x05	; 5
    2324:	62 2f       	mov	r22, r18
    2326:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <usb_mem_read_byte>
    232a:	8c 83       	std	Y+4, r24	; 0x04
            if (confnr == cnr) {
    232c:	9b 81       	ldd	r25, Y+3	; 0x03
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	98 17       	cp	r25, r24
    2332:	89 f4       	brne	.+34     	; 0x2356 <usb_ep0_set_configuration+0x9c>
                dev->state = USB_DEVICE_STATE_CONFIGURED;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18
                dev->cur_config = confnr;
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	2b 81       	ldd	r18, Y+3	; 0x03
    2344:	fc 01       	movw	r30, r24
    2346:	21 83       	std	Z+1, r18	; 0x01

                usb_event_set_configuration();
    2348:	0e 94 ab 13 	call	0x2756	; 0x2756 <usb_event_set_configuration>
                
                UENUM = 0; // switch back to ep0 !
    234c:	89 ee       	ldi	r24, 0xE9	; 233
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	fc 01       	movw	r30, r24
    2352:	10 82       	st	Z, r1
    2354:	02 c0       	rjmp	.+4      	; 0x235a <usb_ep0_set_configuration+0xa0>

            } else {
                return 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <usb_ep0_set_configuration+0xae>
            }
        }
        usb_ep_clearSETUP();
    235a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
        usb_ep_send_zlp();
    235e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <usb_ep_send_zlp>
        return 0;
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <usb_ep0_set_configuration+0xae>
    }
    return 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
}
    2368:	26 96       	adiw	r28, 0x06	; 6
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <usb_ep0_task>:


void usb_ep0_task(void) {
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	29 97       	sbiw	r28, 0x09	; 9
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    struct usb_device_request req;
    
    UENUM = 0;
    238e:	89 ee       	ldi	r24, 0xE9	; 233
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	fc 01       	movw	r30, r24
    2394:	10 82       	st	Z, r1
    if (usb_ep_isSETUP()) { // setup packet received
    2396:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <usb_ep_isSETUP>
    239a:	88 23       	and	r24, r24
    239c:	09 f4       	brne	.+2      	; 0x23a0 <usb_ep0_task+0x26>
    239e:	62 c0       	rjmp	.+196    	; 0x2464 <usb_ep0_task+0xea>
        // read packet
        usb_ep_read_data(&req, sizeof(req));
    23a0:	ce 01       	movw	r24, r28
    23a2:	02 96       	adiw	r24, 0x02	; 2
    23a4:	68 e0       	ldi	r22, 0x08	; 8
    23a6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <usb_ep_read_data>
        
        uint8_t rc = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 83       	std	Y+1, r24	; 0x01
        DHEXB(req.bmRequestType);
        DHEXB(req.bRequest);
        DPSTR(",V"); DHEXW(req.wValue);
        DPSTR(",I"); DHEXW(req.wIndex);
        DPSTR(",L"); DHEXW(req.wLength);
        if ((req.bmRequestType & USB_REQTYPE_TYP_mask) == USB_REQTYPE_TYP_STANDARD) {
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	80 76       	andi	r24, 0x60	; 96
    23b6:	99 27       	eor	r25, r25
    23b8:	89 2b       	or	r24, r25
    23ba:	09 f0       	breq	.+2      	; 0x23be <usb_ep0_task+0x44>
    23bc:	40 c0       	rjmp	.+128    	; 0x243e <usb_ep0_task+0xc4>
            switch(req.bRequest) {
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	09 2e       	mov	r0, r25
    23c6:	00 0c       	add	r0, r0
    23c8:	aa 0b       	sbc	r26, r26
    23ca:	bb 0b       	sbc	r27, r27
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	2c e0       	ldi	r18, 0x0C	; 12
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	84 1b       	sub	r24, r20
    23d6:	95 0b       	sbc	r25, r21
    23d8:	28 17       	cp	r18, r24
    23da:	39 07       	cpc	r19, r25
    23dc:	38 f1       	brcs	.+78     	; 0x242c <usb_ep0_task+0xb2>
    23de:	86 5c       	subi	r24, 0xC6	; 198
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	fc 01       	movw	r30, r24
    23e4:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__tablejump2__>
                case USB_REQUEST_CLEAR_FEATURE:
                    // not supported
                    break;
                    
                case USB_REQUEST_GET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	80 38       	cpi	r24, 0x80	; 128
    23ec:	09 f5       	brne	.+66     	; 0x2430 <usb_ep0_task+0xb6>
                        rc = usb_ep0_get_configuration();
    23ee:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <usb_ep0_get_configuration>
    23f2:	89 83       	std	Y+1, r24	; 0x01
                    }
                    break;
    23f4:	1d c0       	rjmp	.+58     	; 0x2430 <usb_ep0_task+0xb6>
                
                case USB_REQUEST_GET_DESCRIPTOR:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	80 38       	cpi	r24, 0x80	; 128
    23fa:	e1 f4       	brne	.+56     	; 0x2434 <usb_ep0_task+0xba>
                        rc = usb_ep0_get_descriptor(&req);
    23fc:	ce 01       	movw	r24, r28
    23fe:	02 96       	adiw	r24, 0x02	; 2
    2400:	0e 94 16 10 	call	0x202c	; 0x202c <usb_ep0_get_descriptor>
    2404:	89 83       	std	Y+1, r24	; 0x01
                    }
                    break;
    2406:	16 c0       	rjmp	.+44     	; 0x2434 <usb_ep0_task+0xba>
                case USB_REQUEST_GET_STATUS:
                    // not supported
                    break;
                    
                case USB_REQUEST_SET_ADDRESS:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	88 23       	and	r24, r24
    240c:	a9 f4       	brne	.+42     	; 0x2438 <usb_ep0_task+0xbe>
                        rc = usb_ep0_set_address(&req);
    240e:	ce 01       	movw	r24, r28
    2410:	02 96       	adiw	r24, 0x02	; 2
    2412:	0e 94 14 11 	call	0x2228	; 0x2228 <usb_ep0_set_address>
    2416:	89 83       	std	Y+1, r24	; 0x01
                    }
                    break;
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <usb_ep0_task+0xbe>
                
                case USB_REQUEST_SET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	88 23       	and	r24, r24
    241e:	71 f4       	brne	.+28     	; 0x243c <usb_ep0_task+0xc2>
                        rc = usb_ep0_set_configuration(&req);
    2420:	ce 01       	movw	r24, r28
    2422:	02 96       	adiw	r24, 0x02	; 2
    2424:	0e 94 5d 11 	call	0x22ba	; 0x22ba <usb_ep0_set_configuration>
    2428:	89 83       	std	Y+1, r24	; 0x01
                    }
                    break;
    242a:	08 c0       	rjmp	.+16     	; 0x243c <usb_ep0_task+0xc2>
                case USB_REQUEST_SYNCH_FRAME:
                    // not supported yet. only needed in isochronous transfer mode
                    break;
                    
                default:
                    break;
    242c:	00 00       	nop
    242e:	07 c0       	rjmp	.+14     	; 0x243e <usb_ep0_task+0xc4>
                    
                case USB_REQUEST_GET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
                        rc = usb_ep0_get_configuration();
                    }
                    break;
    2430:	00 00       	nop
    2432:	05 c0       	rjmp	.+10     	; 0x243e <usb_ep0_task+0xc4>
                
                case USB_REQUEST_GET_DESCRIPTOR:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
                        rc = usb_ep0_get_descriptor(&req);
                    }
                    break;
    2434:	00 00       	nop
    2436:	03 c0       	rjmp	.+6      	; 0x243e <usb_ep0_task+0xc4>
                    
                case USB_REQUEST_SET_ADDRESS:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
                        rc = usb_ep0_set_address(&req);
                    }
                    break;
    2438:	00 00       	nop
    243a:	01 c0       	rjmp	.+2      	; 0x243e <usb_ep0_task+0xc4>
                
                case USB_REQUEST_SET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
                        rc = usb_ep0_set_configuration(&req);
                    }
                    break;
    243c:	00 00       	nop
                    
                default:
                    break;
            }
        }
        if (rc != 0) {
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	88 23       	and	r24, r24
    2442:	29 f0       	breq	.+10     	; 0x244e <usb_ep0_task+0xd4>
            rc = usb_event_ep0_request(&req);
    2444:	ce 01       	movw	r24, r28
    2446:	02 96       	adiw	r24, 0x02	; 2
    2448:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <usb_event_ep0_request>
    244c:	89 83       	std	Y+1, r24	; 0x01
        }
        
        UENUM = 0;
    244e:	89 ee       	ldi	r24, 0xE9	; 233
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	fc 01       	movw	r30, r24
    2454:	10 82       	st	Z, r1
        
        if (rc != 0) { // if SETUP packet was not processed, enter STALL
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	88 23       	and	r24, r24
    245a:	21 f0       	breq	.+8      	; 0x2464 <usb_ep0_task+0xea>
            usb_ep_clearSETUP();
    245c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_set_stall();
    2460:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <usb_ep_set_stall>
            DPSTR("np");
        }
        DPSTR("\n");
    }
}
    2464:	00 00       	nop
    2466:	29 96       	adiw	r28, 0x09	; 9
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <usb_ep_setup>:


void usb_ep_setup(uint8_t epaddr, uint8_t epattr, uint8_t epsize, uint8_t epbanks) {
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	00 d0       	rcall	.+0      	; 0x247e <usb_ep_setup+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <usb_ep_setup+0x8>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <usb_ep_setup+0xa>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	8b 83       	std	Y+3, r24	; 0x03
    2488:	6c 83       	std	Y+4, r22	; 0x04
    248a:	4d 83       	std	Y+5, r20	; 0x05
    248c:	2e 83       	std	Y+6, r18	; 0x06
    // epaddr, epattr, epsize same as in endpoint descriptor
    uint8_t sz;
    uint8_t type;
    switch (epsize) {
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	80 31       	cpi	r24, 0x10	; 16
    2496:	91 05       	cpc	r25, r1
    2498:	41 f0       	breq	.+16     	; 0x24aa <usb_ep_setup+0x32>
    249a:	80 32       	cpi	r24, 0x20	; 32
    249c:	91 05       	cpc	r25, r1
    249e:	41 f0       	breq	.+16     	; 0x24b0 <usb_ep_setup+0x38>
    24a0:	08 97       	sbiw	r24, 0x08	; 8
    24a2:	49 f4       	brne	.+18     	; 0x24b6 <usb_ep_setup+0x3e>
        case 8:  sz = (USB_EP_SIZE_8 << 4)|Bsv(ALLOC,1); break;
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <usb_ep_setup+0x44>
        case 16: sz = (USB_EP_SIZE_16 << 4)|Bsv(ALLOC,1); break;
    24aa:	82 e1       	ldi	r24, 0x12	; 18
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	06 c0       	rjmp	.+12     	; 0x24bc <usb_ep_setup+0x44>
        case 32: sz = (USB_EP_SIZE_32 << 4)|Bsv(ALLOC,1); break;
    24b0:	82 e2       	ldi	r24, 0x22	; 34
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <usb_ep_setup+0x44>
        default: sz = (USB_EP_SIZE_64 << 4)|Bsv(ALLOC,1); break;
    24b6:	82 e3       	ldi	r24, 0x32	; 50
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	00 00       	nop
    }
    type = (epattr & 0x03);
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	83 70       	andi	r24, 0x03	; 3
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    
    UENUM = epaddr & 0x07;
    24c2:	89 ee       	ldi	r24, 0xE9	; 233
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	2b 81       	ldd	r18, Y+3	; 0x03
    24c8:	27 70       	andi	r18, 0x07	; 7
    24ca:	fc 01       	movw	r30, r24
    24cc:	20 83       	st	Z, r18
    setbit(UECONX, EPEN);
    24ce:	8b ee       	ldi	r24, 0xEB	; 235
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	2b ee       	ldi	r18, 0xEB	; 235
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	f9 01       	movw	r30, r18
    24d8:	20 81       	ld	r18, Z
    24da:	21 60       	ori	r18, 0x01	; 1
    24dc:	fc 01       	movw	r30, r24
    24de:	20 83       	st	Z, r18
    UECFG0X = (type << 6)|(((epaddr & 0x80) == USB_ENDPOINT_ADDR_IN) ? Bit(EPDIR) : 0);
    24e0:	8c ee       	ldi	r24, 0xEC	; 236
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	2a 81       	ldd	r18, Y+2	; 0x02
    24e6:	22 2f       	mov	r18, r18
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	00 24       	eor	r0, r0
    24ec:	36 95       	lsr	r19
    24ee:	27 95       	ror	r18
    24f0:	07 94       	ror	r0
    24f2:	36 95       	lsr	r19
    24f4:	27 95       	ror	r18
    24f6:	07 94       	ror	r0
    24f8:	32 2f       	mov	r19, r18
    24fa:	20 2d       	mov	r18, r0
    24fc:	32 2f       	mov	r19, r18
    24fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2500:	22 1f       	adc	r18, r18
    2502:	22 27       	eor	r18, r18
    2504:	22 1f       	adc	r18, r18
    2506:	23 2b       	or	r18, r19
    2508:	fc 01       	movw	r30, r24
    250a:	20 83       	st	Z, r18
    UECFG1X = sz | ((epbanks & 0x01) << 2);
    250c:	8d ee       	ldi	r24, 0xED	; 237
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	2e 81       	ldd	r18, Y+6	; 0x06
    2512:	22 2f       	mov	r18, r18
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	21 70       	andi	r18, 0x01	; 1
    2518:	33 27       	eor	r19, r19
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	32 2f       	mov	r19, r18
    2524:	29 81       	ldd	r18, Y+1	; 0x01
    2526:	23 2b       	or	r18, r19
    2528:	fc 01       	movw	r30, r24
    252a:	20 83       	st	Z, r18
                    UEIENX = Bsv(RXOUTE,1);
                }
                break;
*/                
        default:
                UEIENX = 0;
    252c:	80 ef       	ldi	r24, 0xF0	; 240
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	fc 01       	movw	r30, r24
    2532:	10 82       	st	Z, r1
                break;
    2534:	00 00       	nop
    }

    DPSTR("EP"); DHEXB(UENUM); DPSTR(":"); DHEXB((UESTA0X & Bit(CFGOK)));
}
    2536:	00 00       	nop
    2538:	26 96       	adiw	r28, 0x06	; 6
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <usb_ep_setup_control>:

void usb_ep_setup_control(void) {
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	00 d0       	rcall	.+0      	; 0x2550 <usb_ep_setup_control+0x6>
    2550:	1f 92       	push	r1
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    struct usb_dev* dev = &g_usb_dev;
    2556:	8b e3       	ldi	r24, 0x3B	; 59
    2558:	93 e0       	ldi	r25, 0x03	; 3
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
    uint8_t size = usb_mem_read_byte(&dev->pdesc_dev->bMaxPacketSize0, dev->desc_dtype);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	fc 01       	movw	r30, r24
    2564:	24 85       	ldd	r18, Z+12	; 0x0c
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	fc 01       	movw	r30, r24
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	07 96       	adiw	r24, 0x07	; 7
    2572:	62 2f       	mov	r22, r18
    2574:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <usb_mem_read_byte>
    2578:	8b 83       	std	Y+3, r24	; 0x03
    usb_ep_setup(USB_ENDPOINT_ADDR_OUT|0, USB_ENDPOINT_TYPE_CONTROL, size, USB_EP_BANKS_1);
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	4b 81       	ldd	r20, Y+3	; 0x03
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	0e 94 3c 12 	call	0x2478	; 0x2478 <usb_ep_setup>
}
    2586:	00 00       	nop
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

00002594 <usb_intr_endofreset>:

void usb_intr_endofreset(void) {
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    usb_ep_setup_control();
    259c:	0e 94 a5 12 	call	0x254a	; 0x254a <usb_ep_setup_control>

    g_usb_dev.state = USB_DEVICE_STATE_DEFAULT;
    25a0:	84 e0       	ldi	r24, 0x04	; 4
    25a2:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <g_usb_dev>
    g_usb_dev.cur_config = 0;
    25a6:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <g_usb_dev+0x1>
}
    25aa:	00 00       	nop
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <usb_init>:

void usb_init(const struct usb_device_desc* pdevdesc,
              const void* pconfig, uint8_t configsize,
              const void* const* pstrings, uint8_t numstrings,
              get_string_func_t getstringfunc,
              uint8_t desc_dtype) {
    25b2:	cf 92       	push	r12
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	2d 97       	sbiw	r28, 0x0d	; 13
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    25d2:	7e 83       	std	Y+6, r23	; 0x06
    25d4:	6d 83       	std	Y+5, r22	; 0x05
    25d6:	4f 83       	std	Y+7, r20	; 0x07
    25d8:	39 87       	std	Y+9, r19	; 0x09
    25da:	28 87       	std	Y+8, r18	; 0x08
    25dc:	0a 87       	std	Y+10, r16	; 0x0a
    25de:	fc 86       	std	Y+12, r15	; 0x0c
    25e0:	eb 86       	std	Y+11, r14	; 0x0b
    25e2:	cd 86       	std	Y+13, r12	; 0x0d
    DPSTR("USB init\n");
    
    struct usb_dev* dev = &g_usb_dev;
    25e4:	8b e3       	ldi	r24, 0x3B	; 59
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
    memset(dev, 0, sizeof(struct usb_dev));
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	4d e0       	ldi	r20, 0x0D	; 13
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <memset>
    dev->state = USB_DEVICE_STATE_NONE;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	10 82       	st	Z, r1
    dev->cur_config = 0;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	fc 01       	movw	r30, r24
    260a:	11 82       	std	Z+1, r1	; 0x01
    dev->pdesc_dev = pdevdesc;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	2b 81       	ldd	r18, Y+3	; 0x03
    2612:	3c 81       	ldd	r19, Y+4	; 0x04
    2614:	fc 01       	movw	r30, r24
    2616:	33 83       	std	Z+3, r19	; 0x03
    2618:	22 83       	std	Z+2, r18	; 0x02
    dev->pdesc_config = pconfig;
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	2d 81       	ldd	r18, Y+5	; 0x05
    2620:	3e 81       	ldd	r19, Y+6	; 0x06
    2622:	fc 01       	movw	r30, r24
    2624:	35 83       	std	Z+5, r19	; 0x05
    2626:	24 83       	std	Z+4, r18	; 0x04
    dev->desc_config_size = configsize;
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	2f 81       	ldd	r18, Y+7	; 0x07
    262e:	fc 01       	movw	r30, r24
    2630:	26 83       	std	Z+6, r18	; 0x06
    dev->pdesc_string = pstrings;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	28 85       	ldd	r18, Y+8	; 0x08
    2638:	39 85       	ldd	r19, Y+9	; 0x09
    263a:	fc 01       	movw	r30, r24
    263c:	30 87       	std	Z+8, r19	; 0x08
    263e:	27 83       	std	Z+7, r18	; 0x07
    dev->desc_string_num = numstrings;
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	2a 85       	ldd	r18, Y+10	; 0x0a
    2646:	fc 01       	movw	r30, r24
    2648:	21 87       	std	Z+9, r18	; 0x09
    dev->get_string_func = getstringfunc;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2650:	3c 85       	ldd	r19, Y+12	; 0x0c
    2652:	fc 01       	movw	r30, r24
    2654:	33 87       	std	Z+11, r19	; 0x0b
    2656:	22 87       	std	Z+10, r18	; 0x0a
    dev->desc_dtype = desc_dtype;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	2d 85       	ldd	r18, Y+13	; 0x0d
    265e:	fc 01       	movw	r30, r24
    2660:	24 87       	std	Z+12, r18	; 0x0c
    
    USBCON = Bsv(USBE,0)|Bsv(FRZCLK,1); // make sure USB device is disabled
    2662:	88 ed       	ldi	r24, 0xD8	; 216
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	20 e2       	ldi	r18, 0x20	; 32
    2668:	fc 01       	movw	r30, r24
    266a:	20 83       	st	Z, r18
    UPOE = 0; // disable direct drive of USB/PS2 pads
    266c:	8b ef       	ldi	r24, 0xFB	; 251
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	fc 01       	movw	r30, r24
    2672:	10 82       	st	Z, r1
    
    // startup PLL
    PLLCSR = (USB_PLL_CLK_DIV<<2);
    2674:	89 e4       	ldi	r24, 0x49	; 73
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	24 e0       	ldi	r18, 0x04	; 4
    267a:	fc 01       	movw	r30, r24
    267c:	20 83       	st	Z, r18
    PLLCSR = (USB_PLL_CLK_DIV<<2)|Bsv(PLLE,1); // set PLL clock division and enable PLL
    267e:	89 e4       	ldi	r24, 0x49	; 73
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	26 e0       	ldi	r18, 0x06	; 6
    2684:	fc 01       	movw	r30, r24
    2686:	20 83       	st	Z, r18
    // wait till PLL is locked
    while (bit_is_clear(PLLCSR, PLOCK));
    2688:	00 00       	nop
    268a:	89 e4       	ldi	r24, 0x49	; 73
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	fc 01       	movw	r30, r24
    2690:	80 81       	ld	r24, Z
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	81 70       	andi	r24, 0x01	; 1
    2698:	99 27       	eor	r25, r25
    269a:	89 2b       	or	r24, r25
    269c:	b1 f3       	breq	.-20     	; 0x268a <usb_init+0xd8>
    // PLL locked

    // enable USB device.
    USBCON = Bsv(USBE,1)|Bsv(FRZCLK,1); // first enable device
    269e:	88 ed       	ldi	r24, 0xD8	; 216
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	20 ea       	ldi	r18, 0xA0	; 160
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 83       	st	Z, r18
    USBCON = Bsv(USBE,1)|Bsv(FRZCLK,0); // then unfreeze clock !
    26a8:	88 ed       	ldi	r24, 0xD8	; 216
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	20 e8       	ldi	r18, 0x80	; 128
    26ae:	fc 01       	movw	r30, r24
    26b0:	20 83       	st	Z, r18
    

    UDIEN = 0; // disable all usb device interrupts
    26b2:	82 ee       	ldi	r24, 0xE2	; 226
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	10 82       	st	Z, r1
    UDINT = 0; // clear usb device interrupt flags (should be already cleared)
    26ba:	81 ee       	ldi	r24, 0xE1	; 225
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	fc 01       	movw	r30, r24
    26c0:	10 82       	st	Z, r1
    
#if USE_LOGGER_USART == 1
    UDIEN = Bsv(UPRSME,1)|Bsv(EORSME,1)|Bsv(WAKEUPE,0)|Bsv(EORSTE,1)|Bsv(SOFE,0)|Bsv(SUSPE,1); // enable some usb generic interrupts
#else
    UDIEN = Bsv(UPRSME,0)|Bsv(EORSME,0)|Bsv(WAKEUPE,0)|Bsv(EORSTE,1)|Bsv(SOFE,0)|Bsv(SUSPE,1); // enable some usb generic interrupts
    26c2:	82 ee       	ldi	r24, 0xE2	; 226
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	29 e0       	ldi	r18, 0x09	; 9
    26c8:	fc 01       	movw	r30, r24
    26ca:	20 83       	st	Z, r18
#endif
    UDCON = Bsv(RSTCPU,0)|Bsv(RMWKUP,0)|Bsv(DETACH,0); // attach usb device, no cpu reset and no remote wakeup
    26cc:	80 ee       	ldi	r24, 0xE0	; 224
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	fc 01       	movw	r30, r24
    26d2:	10 82       	st	Z, r1
    
    dev->state = USB_DEVICE_STATE_DEFAULT;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	24 e0       	ldi	r18, 0x04	; 4
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
    
    DPSTR("USB init done\n");
#if USE_LOGGER_USART == 1
    usb_dump_dev_registers();
#endif
}
    26de:	00 00       	nop
    26e0:	2d 96       	adiw	r28, 0x0d	; 13
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	cf 90       	pop	r12
    26f8:	08 95       	ret

000026fa <get_string>:
    &g_string0_P,
    &g_string1_P,
    &g_string2_P,
};

uint8_t get_string(struct usb_device_request* req, uint8_t idx) {
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	00 d0       	rcall	.+0      	; 0x2704 <get_string+0xa>
    2704:	1f 92       	push	r1
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6b 83       	std	Y+3, r22	; 0x03
    if (idx == 3) {
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	b9 f4       	brne	.+46     	; 0x2744 <get_string+0x4a>
        usb_ep_clearSETUP();
    2716:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
        usb_ep_send_control_data(&eeprom.serialnumber.desc, usb_mem_read_byte(&eeprom.serialnumber.desc.bLength, USB_MEM_SRC_EEPROM),
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	fc 01       	movw	r30, r24
    2720:	06 81       	ldd	r16, Z+6	; 0x06
    2722:	17 81       	ldd	r17, Z+7	; 0x07
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <usb_mem_read_byte>
    272e:	88 2f       	mov	r24, r24
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	98 01       	movw	r18, r16
    2734:	42 e0       	ldi	r20, 0x02	; 2
    2736:	bc 01       	movw	r22, r24
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
                                 USB_MEM_SRC_EEPROM, req->wLength);
        return 0;
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <get_string+0x4c>
    }
    return 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <usb_event_set_configuration>:

void usb_event_set_configuration(void) {
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
}
    275e:	00 00       	nop
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <get_status>:

static uint8_t get_status(void) {
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	00 d0       	rcall	.+0      	; 0x276c <get_status+0x6>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    uint16_t st = g_sboxnet_status;
    2770:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_sboxnet_status>
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01
    g_sboxnet_status = 0;
    277c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <g_sboxnet_status>
    if (sboxnet_can_read()) {
    2780:	0e 94 c9 0b 	call	0x1792	; 0x1792 <sboxnet_can_read>
    2784:	88 23       	and	r24, r24
    2786:	29 f0       	breq	.+10     	; 0x2792 <get_status+0x2c>
        st |= SBOXNET_STATUS_RX_CANREAD;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	82 60       	ori	r24, 0x02	; 2
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
    }
    if (sboxnet_can_send()) {
    2792:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <sboxnet_can_send>
    2796:	88 23       	and	r24, r24
    2798:	29 f0       	breq	.+10     	; 0x27a4 <get_status+0x3e>
        st |= SBOXNET_STATUS_TX_CANSEND;
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	80 61       	ori	r24, 0x10	; 16
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    }
    return st;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	08 95       	ret

000027b0 <usb_event_ep0_request>:

uint8_t usb_event_ep0_request(struct usb_device_request* req) {
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	c8 55       	subi	r28, 0x58	; 88
    27ba:	d1 09       	sbc	r29, r1
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	9e 01       	movw	r18, r28
    27c8:	29 5a       	subi	r18, 0xA9	; 169
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	f9 01       	movw	r30, r18
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    if ( (req->bmRequestType & 0x7f) != (USB_REQTYPE_TYP_VENDOR|USB_REQTYPE_REC_INTERFACE) )
    27d2:	ce 01       	movw	r24, r28
    27d4:	89 5a       	subi	r24, 0xA9	; 169
    27d6:	9f 4f       	sbci	r25, 0xFF	; 255
    27d8:	fc 01       	movw	r30, r24
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	fc 01       	movw	r30, r24
    27e0:	80 81       	ld	r24, Z
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	8f 77       	andi	r24, 0x7F	; 127
    27e8:	99 27       	eor	r25, r25
    27ea:	81 34       	cpi	r24, 0x41	; 65
    27ec:	91 05       	cpc	r25, r1
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <usb_event_ep0_request+0x44>
        return 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	01 c2       	rjmp	.+1026   	; 0x2bf6 <usb_event_ep0_request+0x446>

    switch(req->bRequest) {        
    27f4:	ce 01       	movw	r24, r28
    27f6:	89 5a       	subi	r24, 0xA9	; 169
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	fc 01       	movw	r30, r24
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	fc 01       	movw	r30, r24
    2802:	81 81       	ldd	r24, Z+1	; 0x01
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	09 2e       	mov	r0, r25
    280a:	00 0c       	add	r0, r0
    280c:	aa 0b       	sbc	r26, r26
    280e:	bb 0b       	sbc	r27, r27
    2810:	40 e3       	ldi	r20, 0x30	; 48
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	21 e2       	ldi	r18, 0x21	; 33
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	84 1b       	sub	r24, r20
    281a:	95 0b       	sbc	r25, r21
    281c:	28 17       	cp	r18, r24
    281e:	39 07       	cpc	r19, r25
    2820:	08 f4       	brcc	.+2      	; 0x2824 <usb_event_ep0_request+0x74>
    2822:	e7 c1       	rjmp	.+974    	; 0x2bf2 <usb_event_ep0_request+0x442>
    2824:	89 5b       	subi	r24, 0xB9	; 185
    2826:	9f 4f       	sbci	r25, 0xFF	; 255
    2828:	fc 01       	movw	r30, r24
    282a:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__tablejump2__>
        case CMD_SBOXNET_SET_MODE: {
            usb_ep_clearSETUP();
    282e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2832:	8f e5       	ldi	r24, 0x5F	; 95
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	fc 01       	movw	r30, r24
    2838:	80 81       	ld	r24, Z
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__iCliRetVal>
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	5d c0       	rjmp	.+186    	; 0x28fe <usb_event_ep0_request+0x14e>
                if (req->wValue & SBOXNET_FLG_BOOTLOADER) {
    2844:	ce 01       	movw	r24, r28
    2846:	89 5a       	subi	r24, 0xA9	; 169
    2848:	9f 4f       	sbci	r25, 0xFF	; 255
    284a:	fc 01       	movw	r30, r24
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	fc 01       	movw	r30, r24
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	80 78       	andi	r24, 0x80	; 128
    2858:	99 27       	eor	r25, r25
    285a:	89 2b       	or	r24, r25
    285c:	61 f0       	breq	.+24     	; 0x2876 <usb_event_ep0_request+0xc6>
                    wdt_reset();
    285e:	a8 95       	wdr
                    // first, enable watchdog. the watchdog timeout makes a reset of the device.
                    // then after the reset, in init_system() MCUSR is checked if the cause of the reset was a timeout.
                    // if yes, jump to bootloader.
                    WDTCSR = Bit(WDCE)|Bit(WDE);
    2860:	80 e6       	ldi	r24, 0x60	; 96
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	28 e1       	ldi	r18, 0x18	; 24
    2866:	fc 01       	movw	r30, r24
    2868:	20 83       	st	Z, r18
                    WDTCSR = Bit(WDP2)|Bit(WDE);  // 0.5s timeout
    286a:	80 e6       	ldi	r24, 0x60	; 96
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	2c e0       	ldi	r18, 0x0C	; 12
    2870:	fc 01       	movw	r30, r24
    2872:	20 83       	st	Z, r18
    2874:	43 c0       	rjmp	.+134    	; 0x28fc <usb_event_ep0_request+0x14c>

                } else if (req->wValue & SBOXNET_FLG_ENABLED) {
    2876:	ce 01       	movw	r24, r28
    2878:	89 5a       	subi	r24, 0xA9	; 169
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	fc 01       	movw	r30, r24
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	fc 01       	movw	r30, r24
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	81 70       	andi	r24, 0x01	; 1
    288a:	99 27       	eor	r25, r25
    288c:	89 2b       	or	r24, r25
    288e:	39 f1       	breq	.+78     	; 0x28de <usb_event_ep0_request+0x12e>
                    g_sboxnet_addr = req->wIndex;
    2890:	ce 01       	movw	r24, r28
    2892:	89 5a       	subi	r24, 0xA9	; 169
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	fc 01       	movw	r30, r24
    2898:	80 81       	ld	r24, Z
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	fc 01       	movw	r30, r24
    289e:	84 81       	ldd	r24, Z+4	; 0x04
    28a0:	95 81       	ldd	r25, Z+5	; 0x05
    28a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_sboxnet_addr>
                    if (!(g_sboxnet_flags & SBOXNET_FLG_ENABLED)) {
    28a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	81 70       	andi	r24, 0x01	; 1
    28b0:	99 27       	eor	r25, r25
    28b2:	89 2b       	or	r24, r25
    28b4:	39 f4       	brne	.+14     	; 0x28c4 <usb_event_ep0_request+0x114>
                        sboxnet_init();
    28b6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <sboxnet_init>
                        g_sboxnet_flags |= SBOXNET_FLG_ENABLED;
    28ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    28be:	81 60       	ori	r24, 0x01	; 1
    28c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
                    }
                    sboxnet_set_sniffer_mode(req->wValue & SBOXNET_FLG_SNIFFER);
    28c4:	ce 01       	movw	r24, r28
    28c6:	89 5a       	subi	r24, 0xA9	; 169
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	fc 01       	movw	r30, r24
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	fc 01       	movw	r30, r24
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	82 70       	andi	r24, 0x02	; 2
    28d8:	0e 94 17 0c 	call	0x182e	; 0x182e <sboxnet_set_sniffer_mode>
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <usb_event_ep0_request+0x14c>
                } else {
                    if (g_sboxnet_flags & SBOXNET_FLG_ENABLED) {
    28de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	81 70       	andi	r24, 0x01	; 1
    28e8:	99 27       	eor	r25, r25
    28ea:	89 2b       	or	r24, r25
    28ec:	39 f0       	breq	.+14     	; 0x28fc <usb_event_ep0_request+0x14c>
                        sboxnet_deinit();
    28ee:	0e 94 74 04 	call	0x8e8	; 0x8e8 <sboxnet_deinit>
                        g_sboxnet_flags &= ~SBOXNET_FLG_ENABLED;
    28f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    28f6:	8e 7f       	andi	r24, 0xFE	; 254
    28f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
        return 1;

    switch(req->bRequest) {        
        case CMD_SBOXNET_SET_MODE: {
            usb_ep_clearSETUP();
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	88 23       	and	r24, r24
    2902:	09 f0       	breq	.+2      	; 0x2906 <usb_event_ep0_request+0x156>
    2904:	9f cf       	rjmp	.-194    	; 0x2844 <usb_event_ep0_request+0x94>
    2906:	ce 01       	movw	r24, r28
    2908:	06 96       	adiw	r24, 0x06	; 6
    290a:	0e 94 06 01 	call	0x20c	; 0x20c <__iRestore>
                        sboxnet_deinit();
                        g_sboxnet_flags &= ~SBOXNET_FLG_ENABLED;
                    }
                }
            }
            usb_ep_send_zlp();
    290e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <usb_ep_send_zlp>
            return 0;
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	70 c1       	rjmp	.+736    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SBOXNET_GET_STATUS: {            
            usb_ep_clearSETUP();
    2916:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            uint8_t st = get_status();
    291a:	0e 94 b3 13 	call	0x2766	; 0x2766 <get_status>
    291e:	8f 83       	std	Y+7, r24	; 0x07
            usb_ep_send_control_data(&st, 1, USB_MEM_SRC_RAM, req->wLength);
    2920:	ce 01       	movw	r24, r28
    2922:	89 5a       	subi	r24, 0xA9	; 169
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	fc 01       	movw	r30, r24
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	fc 01       	movw	r30, r24
    292e:	26 81       	ldd	r18, Z+6	; 0x06
    2930:	37 81       	ldd	r19, Z+7	; 0x07
    2932:	ce 01       	movw	r24, r28
    2934:	07 96       	adiw	r24, 0x07	; 7
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	59 c1       	rjmp	.+690    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SBOXNET_RECEIVE: {
            usb_ep_clearSETUP();
    2944:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
 
            uint16_t wlen = req->wLength;
    2948:	ce 01       	movw	r24, r28
    294a:	89 5a       	subi	r24, 0xA9	; 169
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	fc 01       	movw	r30, r24
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	fc 01       	movw	r30, r24
    2956:	86 81       	ldd	r24, Z+6	; 0x06
    2958:	97 81       	ldd	r25, Z+7	; 0x07
    295a:	9b 83       	std	Y+3, r25	; 0x03
    295c:	8a 83       	std	Y+2, r24	; 0x02
            uint8_t usbrc = 0;
    295e:	1c 82       	std	Y+4, r1	; 0x04
            struct {
                uint8_t status;
            } buf;
            if (wlen >= sizeof(buf)) {
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	89 2b       	or	r24, r25
    2966:	81 f0       	breq	.+32     	; 0x2988 <usb_event_ep0_request+0x1d8>
                wlen -= sizeof(buf);
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9b 83       	std	Y+3, r25	; 0x03
    2970:	8a 83       	std	Y+2, r24	; 0x02
                buf.status = get_status();
    2972:	0e 94 b3 13 	call	0x2766	; 0x2766 <get_status>
    2976:	88 87       	std	Y+8, r24	; 0x08
                usbrc = usb_ep_send_control_data_chunk(&buf, sizeof(buf), USB_MEM_SRC_RAM);
    2978:	ce 01       	movw	r24, r28
    297a:	08 96       	adiw	r24, 0x08	; 8
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <usb_ep_send_control_data_chunk>
    2986:	8c 83       	std	Y+4, r24	; 0x04
            }
            
            if (usbrc == USB_RC_OK) {
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	88 23       	and	r24, r24
    298c:	09 f0       	breq	.+2      	; 0x2990 <usb_event_ep0_request+0x1e0>
    298e:	43 c0       	rjmp	.+134    	; 0x2a16 <usb_event_ep0_request+0x266>
                while (wlen > 1) {
    2990:	3d c0       	rjmp	.+122    	; 0x2a0c <usb_event_ep0_request+0x25c>
                    struct {
                        int8_t msglen;
                        struct sboxnet_msg_max msg;
                    } buf;
                    uint8_t maxs = sizeof(buf.msg);
    2992:	85 e4       	ldi	r24, 0x45	; 69
    2994:	8d 83       	std	Y+5, r24	; 0x05
                    if (wlen < 257) {
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	91 40       	sbci	r25, 0x01	; 1
    299e:	18 f4       	brcc	.+6      	; 0x29a6 <usb_event_ep0_request+0x1f6>
                        maxs = (uint8_t)(wlen - 1);
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	81 50       	subi	r24, 0x01	; 1
    29a4:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    buf.msglen = sboxnet_receive_msg(&buf.msg.msgh, maxs);
    29a6:	ce 01       	movw	r24, r28
    29a8:	41 96       	adiw	r24, 0x11	; 17
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	6d 81       	ldd	r22, Y+5	; 0x05
    29ae:	0e 94 b2 09 	call	0x1364	; 0x1364 <sboxnet_receive_msg>
    29b2:	89 8b       	std	Y+17, r24	; 0x11
                    if (buf.msglen > 0) {
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	18 16       	cp	r1, r24
    29b8:	04 f5       	brge	.+64     	; 0x29fa <usb_event_ep0_request+0x24a>
                        wlen -= (buf.msglen + 1);
    29ba:	89 89       	ldd	r24, Y+17	; 0x11
    29bc:	08 2e       	mov	r0, r24
    29be:	00 0c       	add	r0, r0
    29c0:	99 0b       	sbc	r25, r25
    29c2:	2a 81       	ldd	r18, Y+2	; 0x02
    29c4:	3b 81       	ldd	r19, Y+3	; 0x03
    29c6:	a9 01       	movw	r20, r18
    29c8:	48 1b       	sub	r20, r24
    29ca:	59 0b       	sbc	r21, r25
    29cc:	ca 01       	movw	r24, r20
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9b 83       	std	Y+3, r25	; 0x03
    29d2:	8a 83       	std	Y+2, r24	; 0x02
                        trigger_led_msg_read();
    29d4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <trigger_led_msg_read>
                        usbrc = usb_ep_send_control_data_chunk(&buf, buf.msglen + 1, USB_MEM_SRC_RAM);
    29d8:	89 89       	ldd	r24, Y+17	; 0x11
    29da:	08 2e       	mov	r0, r24
    29dc:	00 0c       	add	r0, r0
    29de:	99 0b       	sbc	r25, r25
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	9c 01       	movw	r18, r24
    29e4:	ce 01       	movw	r24, r28
    29e6:	41 96       	adiw	r24, 0x11	; 17
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <usb_ep_send_control_data_chunk>
    29f0:	8c 83       	std	Y+4, r24	; 0x04
                    } else {
                        usbrc = usb_ep_send_control_data_chunk(&buf.msglen, 1, USB_MEM_SRC_RAM);
                        break;
                    }
                    if (usbrc != USB_RC_OK) {
    29f2:	8c 81       	ldd	r24, Y+4	; 0x04
    29f4:	88 23       	and	r24, r24
    29f6:	51 f0       	breq	.+20     	; 0x2a0c <usb_event_ep0_request+0x25c>
                        break;
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <usb_event_ep0_request+0x266>
                    if (buf.msglen > 0) {
                        wlen -= (buf.msglen + 1);
                        trigger_led_msg_read();
                        usbrc = usb_ep_send_control_data_chunk(&buf, buf.msglen + 1, USB_MEM_SRC_RAM);
                    } else {
                        usbrc = usb_ep_send_control_data_chunk(&buf.msglen, 1, USB_MEM_SRC_RAM);
    29fa:	ce 01       	movw	r24, r28
    29fc:	41 96       	adiw	r24, 0x11	; 17
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	61 e0       	ldi	r22, 0x01	; 1
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <usb_ep_send_control_data_chunk>
    2a08:	8c 83       	std	Y+4, r24	; 0x04
                        break;
    2a0a:	05 c0       	rjmp	.+10     	; 0x2a16 <usb_event_ep0_request+0x266>
                buf.status = get_status();
                usbrc = usb_ep_send_control_data_chunk(&buf, sizeof(buf), USB_MEM_SRC_RAM);
            }
            
            if (usbrc == USB_RC_OK) {
                while (wlen > 1) {
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	02 97       	sbiw	r24, 0x02	; 2
    2a12:	08 f0       	brcs	.+2      	; 0x2a16 <usb_event_ep0_request+0x266>
    2a14:	be cf       	rjmp	.-132    	; 0x2992 <usb_event_ep0_request+0x1e2>
                    if (usbrc != USB_RC_OK) {
                        break;
                    }
                }
            }
            if (usbrc == USB_RC_OK) {
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	88 23       	and	r24, r24
    2a1a:	11 f4       	brne	.+4      	; 0x2a20 <usb_event_ep0_request+0x270>
                usb_ep_send_control_data_finish();
    2a1c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <usb_ep_send_control_data_finish>
            }
            return 0;
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	e9 c0       	rjmp	.+466    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SBOXNET_TRANSMIT: {            
            usb_ep_clearSETUP();
    2a24:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            struct sboxnet_msg_max msg;
            uint16_t readb;
            usb_ep_recv_control_data(&msg, &readb, minvalof(req->wLength,sizeof(msg)));
    2a28:	ce 01       	movw	r24, r28
    2a2a:	89 5a       	subi	r24, 0xA9	; 169
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	fc 01       	movw	r30, r24
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	fc 01       	movw	r30, r24
    2a36:	86 81       	ldd	r24, Z+6	; 0x06
    2a38:	97 81       	ldd	r25, Z+7	; 0x07
    2a3a:	86 34       	cpi	r24, 0x46	; 70
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	10 f0       	brcs	.+4      	; 0x2a44 <usb_event_ep0_request+0x294>
    2a40:	85 e4       	ldi	r24, 0x45	; 69
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	be 01       	movw	r22, r28
    2a46:	67 5f       	subi	r22, 0xF7	; 247
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	9e 01       	movw	r18, r28
    2a4c:	2f 5e       	subi	r18, 0xEF	; 239
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	ac 01       	movw	r20, r24
    2a52:	c9 01       	movw	r24, r18
    2a54:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <usb_ep_recv_control_data>
            if (readb >= SBOXNET_MSG_HEADER_LEN) {
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	05 97       	sbiw	r24, 0x05	; 5
    2a5e:	d0 f0       	brcs	.+52     	; 0x2a94 <usb_event_ep0_request+0x2e4>
                if (sboxnet_can_send_msg(&msg.msgh)) {
    2a60:	ce 01       	movw	r24, r28
    2a62:	41 96       	adiw	r24, 0x11	; 17
    2a64:	0e 94 94 0b 	call	0x1728	; 0x1728 <sboxnet_can_send_msg>
    2a68:	88 23       	and	r24, r24
    2a6a:	71 f0       	breq	.+28     	; 0x2a88 <usb_event_ep0_request+0x2d8>
                    trigger_led_msg_write();
    2a6c:	0e 94 85 0c 	call	0x190a	; 0x190a <trigger_led_msg_write>
                    if (sboxnet_send_msg(&msg.msgh) != 0)
    2a70:	ce 01       	movw	r24, r28
    2a72:	41 96       	adiw	r24, 0x11	; 17
    2a74:	0e 94 99 0a 	call	0x1532	; 0x1532 <sboxnet_send_msg>
    2a78:	88 23       	and	r24, r24
    2a7a:	89 f0       	breq	.+34     	; 0x2a9e <usb_event_ep0_request+0x2ee>
                        g_sboxnet_status |= SBOXNET_STATUS_TX_XERR;
    2a7c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_sboxnet_status>
    2a80:	80 68       	ori	r24, 0x80	; 128
    2a82:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_sboxnet_status>
    2a86:	0b c0       	rjmp	.+22     	; 0x2a9e <usb_event_ep0_request+0x2ee>
                } else {
                    g_sboxnet_status |= SBOXNET_STATUS_TX_OVF;
    2a88:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_sboxnet_status>
    2a8c:	80 64       	ori	r24, 0x40	; 64
    2a8e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_sboxnet_status>
    2a92:	05 c0       	rjmp	.+10     	; 0x2a9e <usb_event_ep0_request+0x2ee>
                }
            } else {
                g_sboxnet_status |= SBOXNET_STATUS_TX_ERR;
    2a94:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_sboxnet_status>
    2a98:	80 62       	ori	r24, 0x20	; 32
    2a9a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_sboxnet_status>
            }
            return 0;
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	aa c0       	rjmp	.+340    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SBOXNET_GET_DBGINFO: {
            usb_ep_clearSETUP();
    2aa2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_send_control_data(&g_sboxnet.debug, sizeof(struct sboxnet_debug_info), USB_MEM_SRC_RAM, req->wLength);
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	89 5a       	subi	r24, 0xA9	; 169
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	86 81       	ldd	r24, Z+6	; 0x06
    2ab6:	97 81       	ldd	r25, Z+7	; 0x07
    2ab8:	9c 01       	movw	r18, r24
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	66 e2       	ldi	r22, 0x26	; 38
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	85 e1       	ldi	r24, 0x15	; 21
    2ac2:	93 e0       	ldi	r25, 0x03	; 3
    2ac4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	95 c0       	rjmp	.+298    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }

        case CMD_SBOXNET_GET_DBGSTATE: {
            usb_ep_clearSETUP();
    2acc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_send_control_data(&g_sboxnet, 9, USB_MEM_SRC_RAM, req->wLength);
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	89 5a       	subi	r24, 0xA9	; 169
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	fc 01       	movw	r30, r24
    2ade:	86 81       	ldd	r24, Z+6	; 0x06
    2ae0:	97 81       	ldd	r25, Z+7	; 0x07
    2ae2:	9c 01       	movw	r18, r24
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	69 e0       	ldi	r22, 0x09	; 9
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	88 e0       	ldi	r24, 0x08	; 8
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	80 c0       	rjmp	.+256    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SBOXNET_GET_DBGRECVBUF: {
            usb_ep_clearSETUP();
    2af6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_send_control_data(&g_sboxnet.recv_buf, sizeof(g_sboxnet.recv_buf), USB_MEM_SRC_RAM, req->wLength);
    2afa:	ce 01       	movw	r24, r28
    2afc:	89 5a       	subi	r24, 0xA9	; 169
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	fc 01       	movw	r30, r24
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	fc 01       	movw	r30, r24
    2b08:	86 81       	ldd	r24, Z+6	; 0x06
    2b0a:	97 81       	ldd	r25, Z+7	; 0x07
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	62 e0       	ldi	r22, 0x02	; 2
    2b12:	71 e0       	ldi	r23, 0x01	; 1
    2b14:	81 e1       	ldi	r24, 0x11	; 17
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	6b c0       	rjmp	.+214    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        case CMD_SBOXNET_GET_DBGTMITBUF: {
            usb_ep_clearSETUP();
    2b20:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            usb_ep_send_control_data(&g_sboxnet.tmit_buf, sizeof(g_sboxnet.tmit_buf), USB_MEM_SRC_RAM, req->wLength);
    2b24:	ce 01       	movw	r24, r28
    2b26:	89 5a       	subi	r24, 0xA9	; 169
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	fc 01       	movw	r30, r24
    2b32:	86 81       	ldd	r24, Z+6	; 0x06
    2b34:	97 81       	ldd	r25, Z+7	; 0x07
    2b36:	9c 01       	movw	r18, r24
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	62 e0       	ldi	r22, 0x02	; 2
    2b3c:	71 e0       	ldi	r23, 0x01	; 1
    2b3e:	83 e1       	ldi	r24, 0x13	; 19
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	56 c0       	rjmp	.+172    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_DBG_STACK: {
            usb_ep_clearSETUP();
    2b4a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            struct {
                uint16_t size;
                uint16_t free;
            } buf;
            buf.size = stack_size();
    2b4e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <stack_size>
    2b52:	9c 87       	std	Y+12, r25	; 0x0c
    2b54:	8b 87       	std	Y+11, r24	; 0x0b
            buf.free = stack_free();
    2b56:	0e 94 ad 0c 	call	0x195a	; 0x195a <stack_free>
    2b5a:	9e 87       	std	Y+14, r25	; 0x0e
    2b5c:	8d 87       	std	Y+13, r24	; 0x0d
            usb_ep_send_control_data(&buf, sizeof(buf), USB_MEM_SRC_RAM, req->wLength);
    2b5e:	ce 01       	movw	r24, r28
    2b60:	89 5a       	subi	r24, 0xA9	; 169
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	fc 01       	movw	r30, r24
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	26 81       	ldd	r18, Z+6	; 0x06
    2b6e:	37 81       	ldd	r19, Z+7	; 0x07
    2b70:	ce 01       	movw	r24, r28
    2b72:	0b 96       	adiw	r24, 0x0b	; 11
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	64 e0       	ldi	r22, 0x04	; 4
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <usb_ep_send_control_data>
            return 0;   
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	3a c0       	rjmp	.+116    	; 0x2bf6 <usb_event_ep0_request+0x446>
        }
        
        case CMD_SET_SERIALNUMBER: {
            usb_ep_clearSETUP();
    2b82:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <usb_ep_clearSETUP>
            struct {
                struct usb_string_desc desc;
                wchar_t str[SERIALNUMBER_SIZE];
            } buf;
            memset(&buf, 0xff, sizeof(buf));
    2b86:	ce 01       	movw	r24, r28
    2b88:	41 96       	adiw	r24, 0x11	; 17
    2b8a:	42 e4       	ldi	r20, 0x42	; 66
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	6f ef       	ldi	r22, 0xFF	; 255
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	0e 94 93 17 	call	0x2f26	; 0x2f26 <memset>
            uint16_t readb;
            usb_ep_recv_control_data(&buf.str, &readb, minvalof(req->wLength,sizeof(buf.str)));
    2b96:	ce 01       	movw	r24, r28
    2b98:	89 5a       	subi	r24, 0xA9	; 169
    2b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	86 81       	ldd	r24, Z+6	; 0x06
    2ba6:	97 81       	ldd	r25, Z+7	; 0x07
    2ba8:	81 34       	cpi	r24, 0x41	; 65
    2baa:	91 05       	cpc	r25, r1
    2bac:	10 f0       	brcs	.+4      	; 0x2bb2 <usb_event_ep0_request+0x402>
    2bae:	80 e4       	ldi	r24, 0x40	; 64
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	be 01       	movw	r22, r28
    2bb4:	61 5f       	subi	r22, 0xF1	; 241
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	9e 01       	movw	r18, r28
    2bba:	2f 5e       	subi	r18, 0xEF	; 239
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	2e 5f       	subi	r18, 0xFE	; 254
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <usb_ep_recv_control_data>
            buf.desc.bLength = sizeof(struct usb_string_desc)+(uint8_t)readb;
    2bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bcc:	98 89       	ldd	r25, Y+16	; 0x10
    2bce:	8e 5f       	subi	r24, 0xFE	; 254
    2bd0:	89 8b       	std	Y+17, r24	; 0x11
            buf.desc.bDescriptorType = USB_DESC_STRING;
    2bd2:	83 e0       	ldi	r24, 0x03	; 3
    2bd4:	8a 8b       	std	Y+18, r24	; 0x12
            eeprom_update_block(&buf, &eeprom.serialnumber, sizeof(struct usb_string_desc)+readb);
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	98 89       	ldd	r25, Y+16	; 0x10
    2bda:	9c 01       	movw	r18, r24
    2bdc:	2e 5f       	subi	r18, 0xFE	; 254
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	ce 01       	movw	r24, r28
    2be2:	41 96       	adiw	r24, 0x11	; 17
    2be4:	a9 01       	movw	r20, r18
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <eeprom_update_block>
            return 0;
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <usb_event_ep0_request+0x446>
            usb_ep_send_control_data((const void *)((uint16_t)FLASHEND+1 - 4096), 4096, USB_MEM_SRC_PROGMEM, req->wLength);      
            return 0;
        }
#endif
        
        default: break;
    2bf2:	00 00       	nop
    }
    return 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
}
    2bf6:	c8 5a       	subi	r28, 0xA8	; 168
    2bf8:	df 4f       	sbci	r29, 0xFF	; 255
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <__vector_18>:

uint8_t t1 = 0;
uint8_t t2 = 0;
ISR(TIMER1_OVF_vect) { // every 32.77ms
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    2c12:	0f 92       	push	r0
    2c14:	11 24       	eor	r1, r1
    2c16:	2f 93       	push	r18
    2c18:	3f 93       	push	r19
    2c1a:	8f 93       	push	r24
    2c1c:	9f 93       	push	r25
    2c1e:	ef 93       	push	r30
    2c20:	ff 93       	push	r31
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    
    g_timer++;
    2c2a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_timer>
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_timer>
	// startup test: blink leds
	static uint8_t rb = 1;
	switch (g_timer & 0xf) {// every 0.5s
    2c34:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_timer>
    2c38:	88 2f       	mov	r24, r24
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	8f 70       	andi	r24, 0x0F	; 15
    2c3e:	99 27       	eor	r25, r25
    2c40:	89 2b       	or	r24, r25
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <__vector_18+0x3c>
    2c44:	7d c0       	rjmp	.+250    	; 0x2d40 <__vector_18+0x136>
		case 0: // every 0.5s
		{	
			rb <<= 1;
    2c46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			switch(rb) {
    2c50:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	88 30       	cpi	r24, 0x08	; 8
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <__vector_18+0x56>
    2c5e:	40 c0       	rjmp	.+128    	; 0x2ce0 <__vector_18+0xd6>
    2c60:	89 30       	cpi	r24, 0x09	; 9
    2c62:	91 05       	cpc	r25, r1
    2c64:	4c f4       	brge	.+18     	; 0x2c78 <__vector_18+0x6e>
    2c66:	82 30       	cpi	r24, 0x02	; 2
    2c68:	91 05       	cpc	r25, r1
    2c6a:	21 f1       	breq	.+72     	; 0x2cb4 <__vector_18+0xaa>
    2c6c:	84 30       	cpi	r24, 0x04	; 4
    2c6e:	91 05       	cpc	r25, r1
    2c70:	61 f1       	breq	.+88     	; 0x2cca <__vector_18+0xc0>
    2c72:	89 2b       	or	r24, r25
    2c74:	a1 f0       	breq	.+40     	; 0x2c9e <__vector_18+0x94>
			}
			// blink ACTIVE LED
			//PORTB ^= Bit(LED_ACTIVE);
		//PORTB ^= Bit(LED_MSG_READ);
		//PORTB ^= Bit(LED_MSG_WRITE);
			break;
    2c76:	63 c0       	rjmp	.+198    	; 0x2d3e <__vector_18+0x134>
	static uint8_t rb = 1;
	switch (g_timer & 0xf) {// every 0.5s
		case 0: // every 0.5s
		{	
			rb <<= 1;
			switch(rb) {
    2c78:	80 32       	cpi	r24, 0x20	; 32
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <__vector_18+0x76>
    2c7e:	46 c0       	rjmp	.+140    	; 0x2d0c <__vector_18+0x102>
    2c80:	81 32       	cpi	r24, 0x21	; 33
    2c82:	91 05       	cpc	r25, r1
    2c84:	1c f4       	brge	.+6      	; 0x2c8c <__vector_18+0x82>
    2c86:	40 97       	sbiw	r24, 0x10	; 16
    2c88:	b1 f1       	breq	.+108    	; 0x2cf6 <__vector_18+0xec>
			}
			// blink ACTIVE LED
			//PORTB ^= Bit(LED_ACTIVE);
		//PORTB ^= Bit(LED_MSG_READ);
		//PORTB ^= Bit(LED_MSG_WRITE);
			break;
    2c8a:	59 c0       	rjmp	.+178    	; 0x2d3e <__vector_18+0x134>
	static uint8_t rb = 1;
	switch (g_timer & 0xf) {// every 0.5s
		case 0: // every 0.5s
		{	
			rb <<= 1;
			switch(rb) {
    2c8c:	80 34       	cpi	r24, 0x40	; 64
    2c8e:	91 05       	cpc	r25, r1
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <__vector_18+0x8a>
    2c92:	47 c0       	rjmp	.+142    	; 0x2d22 <__vector_18+0x118>
    2c94:	80 38       	cpi	r24, 0x80	; 128
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <__vector_18+0x92>
    2c9a:	4e c0       	rjmp	.+156    	; 0x2d38 <__vector_18+0x12e>
			}
			// blink ACTIVE LED
			//PORTB ^= Bit(LED_ACTIVE);
		//PORTB ^= Bit(LED_MSG_READ);
		//PORTB ^= Bit(LED_MSG_WRITE);
			break;
    2c9c:	50 c0       	rjmp	.+160    	; 0x2d3e <__vector_18+0x134>
		{	
			rb <<= 1;
			switch(rb) {
				case 0:
				{
					PORTB ^= Bit(LED_ACTIVE);
    2c9e:	85 e2       	ldi	r24, 0x25	; 37
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	25 e2       	ldi	r18, 0x25	; 37
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	f9 01       	movw	r30, r18
    2ca8:	30 81       	ld	r19, Z
    2caa:	20 e2       	ldi	r18, 0x20	; 32
    2cac:	23 27       	eor	r18, r19
    2cae:	fc 01       	movw	r30, r24
    2cb0:	20 83       	st	Z, r18
					break;
    2cb2:	45 c0       	rjmp	.+138    	; 0x2d3e <__vector_18+0x134>
				}
				case 0x02:
				{
					PORTB ^= Bit(LED_ACTIVE);
    2cb4:	85 e2       	ldi	r24, 0x25	; 37
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	25 e2       	ldi	r18, 0x25	; 37
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	f9 01       	movw	r30, r18
    2cbe:	30 81       	ld	r19, Z
    2cc0:	20 e2       	ldi	r18, 0x20	; 32
    2cc2:	23 27       	eor	r18, r19
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	20 83       	st	Z, r18
					break;
    2cc8:	3a c0       	rjmp	.+116    	; 0x2d3e <__vector_18+0x134>
				}
				case 0x04:
				{
					PORTB ^= Bit(LED_MSG_READ);
    2cca:	85 e2       	ldi	r24, 0x25	; 37
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	25 e2       	ldi	r18, 0x25	; 37
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	f9 01       	movw	r30, r18
    2cd4:	30 81       	ld	r19, Z
    2cd6:	20 e4       	ldi	r18, 0x40	; 64
    2cd8:	23 27       	eor	r18, r19
    2cda:	fc 01       	movw	r30, r24
    2cdc:	20 83       	st	Z, r18
					break;
    2cde:	2f c0       	rjmp	.+94     	; 0x2d3e <__vector_18+0x134>
				}
				case 0x08:
				{
					PORTB ^= Bit(LED_MSG_WRITE);
    2ce0:	85 e2       	ldi	r24, 0x25	; 37
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	25 e2       	ldi	r18, 0x25	; 37
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	f9 01       	movw	r30, r18
    2cea:	30 81       	ld	r19, Z
    2cec:	20 e8       	ldi	r18, 0x80	; 128
    2cee:	23 27       	eor	r18, r19
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	20 83       	st	Z, r18
					break;
    2cf4:	24 c0       	rjmp	.+72     	; 0x2d3e <__vector_18+0x134>
				}
				case 0x10:
				{
					PORTB ^= Bit(LED_ACTIVE);
    2cf6:	85 e2       	ldi	r24, 0x25	; 37
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	25 e2       	ldi	r18, 0x25	; 37
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	f9 01       	movw	r30, r18
    2d00:	30 81       	ld	r19, Z
    2d02:	20 e2       	ldi	r18, 0x20	; 32
    2d04:	23 27       	eor	r18, r19
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 83       	st	Z, r18
					break;
    2d0a:	19 c0       	rjmp	.+50     	; 0x2d3e <__vector_18+0x134>
				}
				case 0x20:
				{
					PORTB ^= Bit(LED_MSG_READ);
    2d0c:	85 e2       	ldi	r24, 0x25	; 37
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	25 e2       	ldi	r18, 0x25	; 37
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	f9 01       	movw	r30, r18
    2d16:	30 81       	ld	r19, Z
    2d18:	20 e4       	ldi	r18, 0x40	; 64
    2d1a:	23 27       	eor	r18, r19
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	20 83       	st	Z, r18
					break;
    2d20:	0e c0       	rjmp	.+28     	; 0x2d3e <__vector_18+0x134>
				}
				case 0x40:
				{
					PORTB ^= Bit(LED_MSG_WRITE);
    2d22:	85 e2       	ldi	r24, 0x25	; 37
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	25 e2       	ldi	r18, 0x25	; 37
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	f9 01       	movw	r30, r18
    2d2c:	30 81       	ld	r19, Z
    2d2e:	20 e8       	ldi	r18, 0x80	; 128
    2d30:	23 27       	eor	r18, r19
    2d32:	fc 01       	movw	r30, r24
    2d34:	20 83       	st	Z, r18
					break;
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <__vector_18+0x134>
				}
				case 0x80:
				{
					rb = 0;
    2d38:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			}
			// blink ACTIVE LED
			//PORTB ^= Bit(LED_ACTIVE);
		//PORTB ^= Bit(LED_MSG_READ);
		//PORTB ^= Bit(LED_MSG_WRITE);
			break;
    2d3c:	00 c0       	rjmp	.+0      	; 0x2d3e <__vector_18+0x134>
    2d3e:	00 00       	nop
				PORTB ^= Bit(LED_MSG_WRITE);
			break;
		}
*/
	}
    if (g_timer_led_msg_read) {
    2d40:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_timer_led_msg_read>
    2d44:	88 23       	and	r24, r24
    2d46:	91 f0       	breq	.+36     	; 0x2d6c <__vector_18+0x162>
        g_timer_led_msg_read--;
    2d48:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_timer_led_msg_read>
    2d4c:	81 50       	subi	r24, 0x01	; 1
    2d4e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_timer_led_msg_read>
        if (g_timer_led_msg_read == 0)
    2d52:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_timer_led_msg_read>
    2d56:	88 23       	and	r24, r24
    2d58:	49 f4       	brne	.+18     	; 0x2d6c <__vector_18+0x162>
            clrbit(PORTB, LED_MSG_READ);
    2d5a:	85 e2       	ldi	r24, 0x25	; 37
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	25 e2       	ldi	r18, 0x25	; 37
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	f9 01       	movw	r30, r18
    2d64:	20 81       	ld	r18, Z
    2d66:	2f 7b       	andi	r18, 0xBF	; 191
    2d68:	fc 01       	movw	r30, r24
    2d6a:	20 83       	st	Z, r18
    }

    if (g_timer_led_msg_write) {
    2d6c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_timer_led_msg_write>
    2d70:	88 23       	and	r24, r24
    2d72:	91 f0       	breq	.+36     	; 0x2d98 <__vector_18+0x18e>
        g_timer_led_msg_write--;
    2d74:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_timer_led_msg_write>
    2d78:	81 50       	subi	r24, 0x01	; 1
    2d7a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_timer_led_msg_write>
        if (g_timer_led_msg_write == 0)
    2d7e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_timer_led_msg_write>
    2d82:	88 23       	and	r24, r24
    2d84:	49 f4       	brne	.+18     	; 0x2d98 <__vector_18+0x18e>
            clrbit(PORTB, LED_MSG_WRITE);
    2d86:	85 e2       	ldi	r24, 0x25	; 37
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	25 e2       	ldi	r18, 0x25	; 37
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	f9 01       	movw	r30, r18
    2d90:	20 81       	ld	r18, Z
    2d92:	2f 77       	andi	r18, 0x7F	; 127
    2d94:	fc 01       	movw	r30, r24
    2d96:	20 83       	st	Z, r18
    }
}
    2d98:	00 00       	nop
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	ff 91       	pop	r31
    2da0:	ef 91       	pop	r30
    2da2:	9f 91       	pop	r25
    2da4:	8f 91       	pop	r24
    2da6:	3f 91       	pop	r19
    2da8:	2f 91       	pop	r18
    2daa:	0f 90       	pop	r0
    2dac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
    2db0:	0f 90       	pop	r0
    2db2:	1f 90       	pop	r1
    2db4:	18 95       	reti

00002db6 <init_system>:


static NOINLINE void init_system(void) {
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <init_system+0x6>
    2dbc:	1f 92       	push	r1
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
// sboxnet_init is done when sboxnet2usb is init over usb command CMD_SBOXNET_SET_MODE
    wdt_reset();
    2dc2:	a8 95       	wdr
    uint8_t mcusr = MCUSR;
    2dc4:	84 e5       	ldi	r24, 0x54	; 84
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 81       	ld	r24, Z
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
    MCUSR = 0;
    2dce:	84 e5       	ldi	r24, 0x54	; 84
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	10 82       	st	Z, r1
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	a8 95       	wdr
    2ddc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2de0:	88 61       	ori	r24, 0x18	; 24
    2de2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2de6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    2dea:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
    if (bit_is_set(mcusr, WDRF)) {
    2dec:	ce 01       	movw	r24, r28
    2dee:	03 96       	adiw	r24, 0x03	; 3
    2df0:	fc 01       	movw	r30, r24
    2df2:	80 81       	ld	r24, Z
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	88 70       	andi	r24, 0x08	; 8
    2dfa:	99 27       	eor	r25, r25
    2dfc:	89 2b       	or	r24, r25
    2dfe:	11 f0       	breq	.+4      	; 0x2e04 <init_system+0x4e>
        // jump to bootloader
        __asm__ __volatile__ (
    2e00:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__data_load_end+0x3a>
	// PB5 rt sboxnet2usb is active/blinks
	// PB1 SCLK
	// PB2 MOSI
	// PB3 MISO
	// PC1 Reset with external pull up
    PORTB = 0b00011111; // PB5..7: LEDs
    2e04:	85 e2       	ldi	r24, 0x25	; 37
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	2f e1       	ldi	r18, 0x1F	; 31
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	20 83       	st	Z, r18
	// PC4 .. PC7 N.C.
    PORTC = 0b11111111;
    2e0e:	88 e2       	ldi	r24, 0x28	; 40
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	2f ef       	ldi	r18, 0xFF	; 255
    2e14:	fc 01       	movw	r30, r24
    2e16:	20 83       	st	Z, r18
	// PD2 read from bus
	// PD3 write to bus
    PORTD = 0b01111111; // PD7=HWBE is low over resistor
    2e18:	8b e2       	ldi	r24, 0x2B	; 43
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	2f e7       	ldi	r18, 0x7F	; 127
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
	// DDR
	// PB5..7 Output
    DDRB = 0b11100000; // PB5..7: LEDs
    2e22:	84 e2       	ldi	r24, 0x24	; 36
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	20 ee       	ldi	r18, 0xE0	; 224
    2e28:	fc 01       	movw	r30, r24
    2e2a:	20 83       	st	Z, r18
	// PC input
    DDRC = 0;
    2e2c:	87 e2       	ldi	r24, 0x27	; 39
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	fc 01       	movw	r30, r24
    2e32:	10 82       	st	Z, r1
	// PD input, Bus transmitter overwrites port PD3 to be output when transmitter is enabled
    DDRD = 0;
    2e34:	8a e2       	ldi	r24, 0x2A	; 42
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	fc 01       	movw	r30, r24
    2e3a:	10 82       	st	Z, r1
    2e3c:	19 82       	std	Y+1, r1	; 0x01
\note For device with XTAL Divide Control Register (XDIV), \c x can actually range
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    2e3e:	80 e8       	ldi	r24, 0x80	; 128
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    __asm__ __volatile__ (
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	99 81       	ldd	r25, Y+1	; 0x01
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2e4e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2e52:	0f be       	out	0x3f, r0	; 63
#else
	clock_prescale_set(0);
#endif
    
    // timer 1: for generic timing and sboxnet. Every 32,77ms Overflow.
    TCCR1A = Bsv(WGM01,0)|Bsv(WGM00,0);     // Normal Mode
    2e54:	80 e8       	ldi	r24, 0x80	; 128
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	fc 01       	movw	r30, r24
    2e5a:	10 82       	st	Z, r1
    TCCR1B = Bsv(WGM02,0)|TC1_PRESCALER;
    2e5c:	81 e8       	ldi	r24, 0x81	; 129
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	22 e0       	ldi	r18, 0x02	; 2
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 83       	st	Z, r18
    TIFR1 = 0xff; // clear interrupt flags
    2e66:	86 e3       	ldi	r24, 0x36	; 54
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	2f ef       	ldi	r18, 0xFF	; 255
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	20 83       	st	Z, r18
    TIMSK1 = Bsv(TOIE1,1); // enable Timer1 TOV interrupt
    2e70:	8f e6       	ldi	r24, 0x6F	; 111
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	fc 01       	movw	r30, r24
    2e78:	20 83       	st	Z, r18
    
    if (eeprom_read_word((const uint16_t *)&eeprom.serialnumber.desc) == 0xffff) {
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <eeprom_read_word>
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	81 f4       	brne	.+32     	; 0x2ea6 <init_system+0xf0>
        /* empty SerialNumber string */
        eeprom_update_byte(&eeprom.serialnumber.desc.bLength, sizeof(struct usb_string_desc)+2);        
    2e86:	64 e0       	ldi	r22, 0x04	; 4
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <eeprom_update_byte>
        eeprom_update_byte(&eeprom.serialnumber.desc.bDescriptorType, USB_DESC_STRING);
    2e90:	63 e0       	ldi	r22, 0x03	; 3
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <eeprom_update_byte>
        eeprom_update_word((uint16_t*)&eeprom.serialnumber.str[0], 'x');
    2e9a:	68 e7       	ldi	r22, 0x78	; 120
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <eeprom_update_word>
    }
}
    2ea6:	00 00       	nop
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	08 95       	ret

00002eb4 <main>:

int main(void) {
    2eb4:	cf 92       	push	r12
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    cli();
    2ec4:	f8 94       	cli
    init_system();
    2ec6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <init_system>
        
    usb_init(&g_device_desc_P,
    2eca:	cc 24       	eor	r12, r12
    2ecc:	c3 94       	inc	r12
    2ece:	0f 2e       	mov	r0, r31
    2ed0:	fd e7       	ldi	r31, 0x7D	; 125
    2ed2:	ef 2e       	mov	r14, r31
    2ed4:	f3 e1       	ldi	r31, 0x13	; 19
    2ed6:	ff 2e       	mov	r15, r31
    2ed8:	f0 2d       	mov	r31, r0
    2eda:	03 e0       	ldi	r16, 0x03	; 3
    2edc:	2a e5       	ldi	r18, 0x5A	; 90
    2ede:	31 e0       	ldi	r19, 0x01	; 1
    2ee0:	42 e1       	ldi	r20, 0x12	; 18
    2ee2:	64 ee       	ldi	r22, 0xE4	; 228
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	82 ed       	ldi	r24, 0xD2	; 210
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <usb_init>
             &g_config_1_P, sizeof(g_config_1_P),
             g_strings_P, NUM_USB_STRINGS, &get_string,
             USB_MEM_SRC_PROGMEM);

    set_sleep_mode(SLEEP_MODE_IDLE);
    2eee:	83 e5       	ldi	r24, 0x53	; 83
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	23 e5       	ldi	r18, 0x53	; 83
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	f9 01       	movw	r30, r18
    2ef8:	20 81       	ld	r18, Z
    2efa:	21 7f       	andi	r18, 0xF1	; 241
    2efc:	fc 01       	movw	r30, r24
    2efe:	20 83       	st	Z, r18
    sleep_enable();
    2f00:	83 e5       	ldi	r24, 0x53	; 83
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	23 e5       	ldi	r18, 0x53	; 83
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	f9 01       	movw	r30, r18
    2f0a:	20 81       	ld	r18, Z
    2f0c:	21 60       	ori	r18, 0x01	; 1
    2f0e:	fc 01       	movw	r30, r24
    2f10:	20 83       	st	Z, r18
    sei();
    2f12:	78 94       	sei
    
    while(1) {
        usb_ep0_task();
    2f14:	0e 94 bd 11 	call	0x237a	; 0x237a <usb_ep0_task>
    }
    2f18:	fd cf       	rjmp	.-6      	; 0x2f14 <main+0x60>

00002f1a <__tablejump2__>:
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	ff 1f       	adc	r31, r31
    2f1e:	05 90       	lpm	r0, Z+
    2f20:	f4 91       	lpm	r31, Z
    2f22:	e0 2d       	mov	r30, r0
    2f24:	09 94       	ijmp

00002f26 <memset>:
    2f26:	dc 01       	movw	r26, r24
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <memset+0x6>
    2f2a:	6d 93       	st	X+, r22
    2f2c:	41 50       	subi	r20, 0x01	; 1
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	e0 f7       	brcc	.-8      	; 0x2f2a <memset+0x4>
    2f32:	08 95       	ret

00002f34 <eeprom_read_byte>:
    2f34:	f9 99       	sbic	0x1f, 1	; 31
    2f36:	fe cf       	rjmp	.-4      	; 0x2f34 <eeprom_read_byte>
    2f38:	92 bd       	out	0x22, r25	; 34
    2f3a:	81 bd       	out	0x21, r24	; 33
    2f3c:	f8 9a       	sbi	0x1f, 0	; 31
    2f3e:	99 27       	eor	r25, r25
    2f40:	80 b5       	in	r24, 0x20	; 32
    2f42:	08 95       	ret

00002f44 <eeprom_read_word>:
    2f44:	a8 e1       	ldi	r26, 0x18	; 24
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	42 e0       	ldi	r20, 0x02	; 2
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <eeprom_read_blraw>

00002f50 <eeprom_update_block>:
    2f50:	dc 01       	movw	r26, r24
    2f52:	a4 0f       	add	r26, r20
    2f54:	b5 1f       	adc	r27, r21
    2f56:	41 50       	subi	r20, 0x01	; 1
    2f58:	50 40       	sbci	r21, 0x00	; 0
    2f5a:	48 f0       	brcs	.+18     	; 0x2f6e <eeprom_update_block+0x1e>
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	84 0f       	add	r24, r20
    2f60:	95 1f       	adc	r25, r21
    2f62:	2e 91       	ld	r18, -X
    2f64:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <eeprom_update_r18>
    2f68:	41 50       	subi	r20, 0x01	; 1
    2f6a:	50 40       	sbci	r21, 0x00	; 0
    2f6c:	d0 f7       	brcc	.-12     	; 0x2f62 <eeprom_update_block+0x12>
    2f6e:	08 95       	ret

00002f70 <eeprom_update_byte>:
    2f70:	26 2f       	mov	r18, r22

00002f72 <eeprom_update_r18>:
    2f72:	f9 99       	sbic	0x1f, 1	; 31
    2f74:	fe cf       	rjmp	.-4      	; 0x2f72 <eeprom_update_r18>
    2f76:	92 bd       	out	0x22, r25	; 34
    2f78:	81 bd       	out	0x21, r24	; 33
    2f7a:	f8 9a       	sbi	0x1f, 0	; 31
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	00 b4       	in	r0, 0x20	; 32
    2f80:	02 16       	cp	r0, r18
    2f82:	39 f0       	breq	.+14     	; 0x2f92 <eeprom_update_r18+0x20>
    2f84:	1f ba       	out	0x1f, r1	; 31
    2f86:	20 bd       	out	0x20, r18	; 32
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	fa 9a       	sbi	0x1f, 2	; 31
    2f8e:	f9 9a       	sbi	0x1f, 1	; 31
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	08 95       	ret

00002f94 <eeprom_update_word>:
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	27 2f       	mov	r18, r23
    2f98:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <eeprom_update_r18>
    2f9c:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <eeprom_update_byte>

00002fa0 <eeprom_read_block>:
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22

00002fa4 <eeprom_read_blraw>:
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	f9 99       	sbic	0x1f, 1	; 31
    2fa8:	fe cf       	rjmp	.-4      	; 0x2fa6 <eeprom_read_blraw+0x2>
    2faa:	06 c0       	rjmp	.+12     	; 0x2fb8 <eeprom_read_blraw+0x14>
    2fac:	f2 bd       	out	0x22, r31	; 34
    2fae:	e1 bd       	out	0x21, r30	; 33
    2fb0:	f8 9a       	sbi	0x1f, 0	; 31
    2fb2:	31 96       	adiw	r30, 0x01	; 1
    2fb4:	00 b4       	in	r0, 0x20	; 32
    2fb6:	0d 92       	st	X+, r0
    2fb8:	41 50       	subi	r20, 0x01	; 1
    2fba:	50 40       	sbci	r21, 0x00	; 0
    2fbc:	b8 f7       	brcc	.-18     	; 0x2fac <eeprom_read_blraw+0x8>
    2fbe:	08 95       	ret

00002fc0 <_exit>:
    2fc0:	f8 94       	cli

00002fc2 <__stop_program>:
    2fc2:	ff cf       	rjmp	.-2      	; 0x2fc2 <__stop_program>
