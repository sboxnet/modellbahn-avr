
sboxnet2usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000018e8  0000199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  00800102  00800102  0000199e  2**0
                  ALLOC
  3 .eeprom       00000042  00810000  00810000  0000199e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000248  00000000  00000000  00001a50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ee0  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d3d  00000000  00000000  00005b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000207f  00000000  00000000  000068b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000620  00000000  00000000  00008934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c3e5  00000000  00000000  00008f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022b3  00000000  00000000  00015339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  000175ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000038d5  00000000  00000000  000178bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_11>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_16>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_18>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_23>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_25>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      74:	a2 08       	sbc	r10, r2
      76:	e2 08       	sbc	r14, r2
      78:	f6 08       	sbc	r15, r6
      7a:	56 09       	sbc	r21, r6
      7c:	42 0a       	sbc	r4, r18
      7e:	42 0a       	sbc	r4, r18
      80:	42 0a       	sbc	r4, r18
      82:	42 0a       	sbc	r4, r18
      84:	42 0a       	sbc	r4, r18
      86:	42 0a       	sbc	r4, r18
      88:	96 09       	sbc	r25, r6
      8a:	a7 09       	sbc	r26, r7
      8c:	b8 09       	sbc	r27, r8
      8e:	c9 09       	sbc	r28, r9
      90:	42 0a       	sbc	r4, r18
      92:	42 0a       	sbc	r4, r18
      94:	da 09       	sbc	r29, r10
      96:	42 0a       	sbc	r4, r18
      98:	42 0a       	sbc	r4, r18
      9a:	42 0a       	sbc	r4, r18
      9c:	42 0a       	sbc	r4, r18
      9e:	42 0a       	sbc	r4, r18
      a0:	42 0a       	sbc	r4, r18
      a2:	42 0a       	sbc	r4, r18
      a4:	42 0a       	sbc	r4, r18
      a6:	42 0a       	sbc	r4, r18
      a8:	42 0a       	sbc	r4, r18
      aa:	42 0a       	sbc	r4, r18
      ac:	42 0a       	sbc	r4, r18
      ae:	42 0a       	sbc	r4, r18
      b0:	42 0a       	sbc	r4, r18
      b2:	42 0a       	sbc	r4, r18
      b4:	42 0a       	sbc	r4, r18
      b6:	11 0a       	sbc	r1, r17

000000b8 <__trampolines_end>:
      b8:	08 10       	cpse	r0, r8
      ba:	20 40       	sbci	r18, 0x00	; 0

000000bc <g_strings_P>:
      bc:	22 01 dc 00 c2 00                                   ".....

000000c2 <g_string2_P>:
      c2:	18 03 73 00 62 00 6f 00 78 00 6e 00 65 00 74 00     ..s.b.o.x.n.e.t.
      d2:	32 00 75 00 73 00 62 00 00 00                       2.u.s.b...

000000dc <g_string1_P>:
      dc:	44 03 54 00 68 00 6f 00 6d 00 61 00 73 00 20 00     D.T.h.o.m.a.s. .
      ec:	4d 00 61 00 69 00 65 00 72 00 20 00 3c 00 62 00     M.a.i.e.r. .<.b.
      fc:	61 00 6c 00 61 00 67 00 69 00 40 00 6a 00 75 00     a.l.a.g.i.@.j.u.
     10c:	73 00 74 00 6d 00 61 00 69 00 6c 00 2e 00 64 00     s.t.m.a.i.l...d.
     11c:	65 00 3e 00 00 00                                   e.>...

00000122 <g_string0_P>:
     122:	04 03 09 04                                         ....

00000126 <g_config_1_P>:
     126:	09 02 12 00 01 01 00 80 19 09 04 00 00 00 ff ff     ................
     136:	ff 00                                               ..

00000138 <g_device_desc_P>:
     138:	12 01 10 01 ff ff ff 40 23 f1 02 a0 01 01 01 02     .......@#.......
     148:	03 01                                               ..

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	d4 e0       	ldi	r29, 0x04	; 4
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e8 ee       	ldi	r30, 0xE8	; 232
     15e:	f8 e1       	ldi	r31, 0x18	; 24
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	a2 30       	cpi	r26, 0x02	; 2
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	23 e0       	ldi	r18, 0x03	; 3
     16e:	a2 e0       	ldi	r26, 0x02	; 2
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a8 34       	cpi	r26, 0x48	; 72
     178:	b2 07       	cpc	r27, r18
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>

0000017c <stack_init8>:
        return 0;
    }
    return 1;
}

void usb_event_set_configuration(void) {
     17c:	88 e4       	ldi	r24, 0x48	; 72
     17e:	93 e0       	ldi	r25, 0x03	; 3
     180:	24 e0       	ldi	r18, 0x04	; 4
     182:	8f 3f       	cpi	r24, 0xFF	; 255
     184:	92 07       	cpc	r25, r18
     186:	40 f4       	brcc	.+16     	; 0x198 <stack_init8+0x1c>
     188:	fc 01       	movw	r30, r24
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	34 e0       	ldi	r19, 0x04	; 4
     18e:	85 ea       	ldi	r24, 0xA5	; 165
     190:	81 93       	st	Z+, r24
     192:	e2 17       	cp	r30, r18
     194:	f3 07       	cpc	r31, r19
     196:	e1 f7       	brne	.-8      	; 0x190 <stack_init8+0x14>
     198:	0e 94 00 0c 	call	0x1800	; 0x1800 <main>
     19c:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <sboxnet_debug_inc_recverrors>:
     1a4:	eb e2       	ldi	r30, 0x2B	; 43
     1a6:	f3 e0       	ldi	r31, 0x03	; 3
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	91 83       	std	Z+1, r25	; 0x01
     1b0:	80 83       	st	Z, r24
     1b2:	08 95       	ret

000001b4 <sboxnet_debug_inc_recverr_dor>:
     1b4:	e1 e3       	ldi	r30, 0x31	; 49
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	80 81       	ld	r24, Z
     1ba:	91 81       	ldd	r25, Z+1	; 0x01
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	91 83       	std	Z+1, r25	; 0x01
     1c0:	80 83       	st	Z, r24
     1c2:	08 95       	ret

000001c4 <sboxnet_debug_inc_recv_byte>:
     1c4:	e5 e1       	ldi	r30, 0x15	; 21
     1c6:	f3 e0       	ldi	r31, 0x03	; 3
     1c8:	80 81       	ld	r24, Z
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	91 83       	std	Z+1, r25	; 0x01
     1d0:	80 83       	st	Z, r24
     1d2:	08 95       	ret

000001d4 <sboxnet_prandom>:
     1d4:	e8 e0       	ldi	r30, 0x08	; 8
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	80 85       	ldd	r24, Z+8	; 0x08
     1da:	98 2f       	mov	r25, r24
     1dc:	99 0f       	add	r25, r25
     1de:	89 27       	eor	r24, r25
     1e0:	98 2f       	mov	r25, r24
     1e2:	96 95       	lsr	r25
     1e4:	89 27       	eor	r24, r25
     1e6:	98 2f       	mov	r25, r24
     1e8:	99 0f       	add	r25, r25
     1ea:	99 0f       	add	r25, r25
     1ec:	89 27       	eor	r24, r25
     1ee:	80 87       	std	Z+8, r24	; 0x08
     1f0:	08 95       	ret

000001f2 <sboxnet_rb_write>:
     1f2:	fc 01       	movw	r30, r24
     1f4:	94 81       	ldd	r25, Z+4	; 0x04
     1f6:	27 81       	ldd	r18, Z+7	; 0x07
     1f8:	86 81       	ldd	r24, Z+6	; 0x06
     1fa:	89 0f       	add	r24, r25
     1fc:	82 17       	cp	r24, r18
     1fe:	88 f4       	brcc	.+34     	; 0x222 <sboxnet_rb_write+0x30>
     200:	9f 5f       	subi	r25, 0xFF	; 255
     202:	94 83       	std	Z+4, r25	; 0x04
     204:	83 81       	ldd	r24, Z+3	; 0x03
     206:	df 01       	movw	r26, r30
     208:	a8 0f       	add	r26, r24
     20a:	b1 1d       	adc	r27, r1
     20c:	18 96       	adiw	r26, 0x08	; 8
     20e:	6c 93       	st	X, r22
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	82 17       	cp	r24, r18
     214:	18 f4       	brcc	.+6      	; 0x21c <sboxnet_rb_write+0x2a>
     216:	83 83       	std	Z+3, r24	; 0x03
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	08 95       	ret
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	08 95       	ret
     222:	e8 e0       	ldi	r30, 0x08	; 8
     224:	f1 e0       	ldi	r31, 0x01	; 1
     226:	81 81       	ldd	r24, Z+1	; 0x01
     228:	84 60       	ori	r24, 0x04	; 4
     22a:	81 83       	std	Z+1, r24	; 0x01
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	08 95       	ret

00000230 <sboxnet_rb_read_commit>:
     230:	fc 01       	movw	r30, r24
     232:	86 81       	ldd	r24, Z+6	; 0x06
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	89 17       	cp	r24, r25
     238:	40 f4       	brcc	.+16     	; 0x24a <sboxnet_rb_read_commit+0x1a>
     23a:	a8 e0       	ldi	r26, 0x08	; 8
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	9c 91       	ld	r25, X
     242:	11 97       	sbiw	r26, 0x01	; 1
     244:	92 60       	ori	r25, 0x02	; 2
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	91 81       	ldd	r25, Z+1	; 0x01
     24c:	89 1b       	sub	r24, r25
     24e:	86 83       	std	Z+6, r24	; 0x06
     250:	11 82       	std	Z+1, r1	; 0x01
     252:	80 81       	ld	r24, Z
     254:	82 83       	std	Z+2, r24	; 0x02
     256:	08 95       	ret

00000258 <sboxnet_rb_read>:
     258:	fc 01       	movw	r30, r24
     25a:	81 81       	ldd	r24, Z+1	; 0x01
     25c:	96 81       	ldd	r25, Z+6	; 0x06
     25e:	89 17       	cp	r24, r25
     260:	78 f4       	brcc	.+30     	; 0x280 <sboxnet_rb_read+0x28>
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	81 83       	std	Z+1, r24	; 0x01
     266:	90 81       	ld	r25, Z
     268:	df 01       	movw	r26, r30
     26a:	a9 0f       	add	r26, r25
     26c:	b1 1d       	adc	r27, r1
     26e:	18 96       	adiw	r26, 0x08	; 8
     270:	8c 91       	ld	r24, X
     272:	9f 5f       	subi	r25, 0xFF	; 255
     274:	90 83       	st	Z, r25
     276:	27 81       	ldd	r18, Z+7	; 0x07
     278:	92 17       	cp	r25, r18
     27a:	40 f0       	brcs	.+16     	; 0x28c <sboxnet_rb_read+0x34>
     27c:	10 82       	st	Z, r1
     27e:	08 95       	ret
     280:	e8 e0       	ldi	r30, 0x08	; 8
     282:	f1 e0       	ldi	r31, 0x01	; 1
     284:	81 81       	ldd	r24, Z+1	; 0x01
     286:	82 60       	ori	r24, 0x02	; 2
     288:	81 83       	std	Z+1, r24	; 0x01
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	08 95       	ret

0000028e <sboxnet_set_timer>:
     28e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     292:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     296:	82 0f       	add	r24, r18
     298:	93 1f       	adc	r25, r19
     29a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     29e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	86 bb       	out	0x16, r24	; 22
     2a6:	ef e6       	ldi	r30, 0x6F	; 111
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	84 60       	ori	r24, 0x04	; 4
     2ae:	80 83       	st	Z, r24
     2b0:	08 95       	ret

000002b2 <sboxnet_check_try_transmit>:
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	c8 e0       	ldi	r28, 0x08	; 8
     2b8:	d1 e0       	ldi	r29, 0x01	; 1
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	81 11       	cpse	r24, r1
     2be:	0d c0       	rjmp	.+26     	; 0x2da <sboxnet_check_try_transmit+0x28>
     2c0:	fe 01       	movw	r30, r28
     2c2:	e5 5f       	subi	r30, 0xF5	; 245
     2c4:	fe 4f       	sbci	r31, 0xFE	; 254
     2c6:	86 81       	ldd	r24, Z+6	; 0x06
     2c8:	87 30       	cpi	r24, 0x07	; 7
     2ca:	08 f1       	brcs	.+66     	; 0x30e <sboxnet_check_try_transmit+0x5c>
     2cc:	1b 82       	std	Y+3, r1	; 0x03
     2ce:	cf 01       	movw	r24, r30
     2d0:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     2d4:	8c 83       	std	Y+4, r24	; 0x04
     2d6:	88 23       	and	r24, r24
     2d8:	d1 f0       	breq	.+52     	; 0x30e <sboxnet_check_try_transmit+0x5c>
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	81 11       	cpse	r24, r1
     2de:	17 c0       	rjmp	.+46     	; 0x30e <sboxnet_check_try_transmit+0x5c>
     2e0:	88 81       	ld	r24, Y
     2e2:	81 11       	cpse	r24, r1
     2e4:	14 c0       	rjmp	.+40     	; 0x30e <sboxnet_check_try_transmit+0x5c>
     2e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <sboxnet_prandom>
     2ea:	2a 81       	ldd	r18, Y+2	; 0x02
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	22 0f       	add	r18, r18
     2f0:	33 1f       	adc	r19, r19
     2f2:	28 57       	subi	r18, 0x78	; 120
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	94 e0       	ldi	r25, 0x04	; 4
     2f8:	9c bb       	out	0x1c, r25	; 28
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_sboxnet>
     300:	8f 73       	andi	r24, 0x3F	; 63
     302:	a9 01       	movw	r20, r18
     304:	48 0f       	add	r20, r24
     306:	51 1d       	adc	r21, r1
     308:	ca 01       	movw	r24, r20
     30a:	0e 94 47 01 	call	0x28e	; 0x28e <sboxnet_set_timer>
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <sboxnet_can_send_msg>:
     314:	fc 01       	movw	r30, r24
     316:	23 81       	ldd	r18, Z+3	; 0x03
     318:	2f 73       	andi	r18, 0x3F	; 63
     31a:	2a 5f       	subi	r18, 0xFA	; 250
     31c:	8f b7       	in	r24, 0x3f	; 63
     31e:	f8 94       	cli
     320:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <g_sboxnet+0x112>
     324:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <g_sboxnet+0x111>
     328:	93 1b       	sub	r25, r19
     32a:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <g_sboxnet+0x10f>
     32e:	93 1b       	sub	r25, r19
     330:	8f bf       	out	0x3f, r24	; 63
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	29 17       	cp	r18, r25
     336:	08 f0       	brcs	.+2      	; 0x33a <sboxnet_can_send_msg+0x26>
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	08 95       	ret

0000033c <sboxnet_can_read>:
     33c:	8f b7       	in	r24, 0x3f	; 63
     33e:	f8 94       	cli
     340:	e8 e0       	ldi	r30, 0x08	; 8
     342:	f1 e0       	ldi	r31, 0x01	; 1
     344:	97 85       	ldd	r25, Z+15	; 0x0f
     346:	22 85       	ldd	r18, Z+10	; 0x0a
     348:	92 1b       	sub	r25, r18
     34a:	8f bf       	out	0x3f, r24	; 63
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	96 30       	cpi	r25, 0x06	; 6
     350:	08 f4       	brcc	.+2      	; 0x354 <sboxnet_can_read+0x18>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	08 95       	ret

00000356 <sboxnet_can_send>:
     356:	8f b7       	in	r24, 0x3f	; 63
     358:	f8 94       	cli
     35a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <g_sboxnet+0x112>
     35e:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <g_sboxnet+0x111>
     362:	92 1b       	sub	r25, r18
     364:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <g_sboxnet+0x10f>
     368:	92 1b       	sub	r25, r18
     36a:	8f bf       	out	0x3f, r24	; 63
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	97 30       	cpi	r25, 0x07	; 7
     370:	08 f4       	brcc	.+2      	; 0x374 <sboxnet_can_send+0x1e>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret

00000376 <sboxnet_set_sniffer_mode>:
     376:	88 23       	and	r24, r24
     378:	31 f0       	breq	.+12     	; 0x386 <sboxnet_set_sniffer_mode+0x10>
     37a:	e8 e0       	ldi	r30, 0x08	; 8
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	81 60       	ori	r24, 0x01	; 1
     382:	81 83       	std	Z+1, r24	; 0x01
     384:	08 95       	ret
     386:	e8 e0       	ldi	r30, 0x08	; 8
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	81 81       	ldd	r24, Z+1	; 0x01
     38c:	8e 7f       	andi	r24, 0xFE	; 254
     38e:	81 83       	std	Z+1, r24	; 0x01
     390:	08 95       	ret

00000392 <get_status>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <g_sboxnet_status>
     39a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_sboxnet_status>
     39e:	0e 94 9e 01 	call	0x33c	; 0x33c <sboxnet_can_read>
     3a2:	81 11       	cpse	r24, r1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <get_status+0x18>
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <get_status+0x1c>
     3aa:	c2 60       	ori	r28, 0x02	; 2
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	0e 94 ab 01 	call	0x356	; 0x356 <sboxnet_can_send>
     3b2:	81 11       	cpse	r24, r1
     3b4:	c0 61       	ori	r28, 0x10	; 16
     3b6:	8c 2f       	mov	r24, r28
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <init_system>:
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	a8 95       	wdr
     3ca:	84 b7       	in	r24, 0x34	; 52
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	14 be       	out	0x34, r1	; 52
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	a8 95       	wdr
     3d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3da:	88 61       	ori	r24, 0x18	; 24
     3dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	83 ff       	sbrs	r24, 3
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <init_system+0x32>
     3ec:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__data_load_end+0x1716>
     3f0:	8f e1       	ldi	r24, 0x1F	; 31
     3f2:	85 b9       	out	0x05, r24	; 5
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	88 b9       	out	0x08, r24	; 8
     3f8:	9f e7       	ldi	r25, 0x7F	; 127
     3fa:	9b b9       	out	0x0b, r25	; 11
     3fc:	90 ee       	ldi	r25, 0xE0	; 224
     3fe:	94 b9       	out	0x04, r25	; 4
     400:	17 b8       	out	0x07, r1	; 7
     402:	1a b8       	out	0x0a, r1	; 10
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	90 e8       	ldi	r25, 0x80	; 128
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     410:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     414:	0f be       	out	0x3f, r0	; 63
     416:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     420:	86 bb       	out	0x16, r24	; 22
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 34 0c 	call	0x1868	; 0x1868 <eeprom_read_word>
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	81 f4       	brne	.+32     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <eeprom_update_byte>
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 4a 0c 	call	0x1894	; 0x1894 <eeprom_update_byte>
     448:	68 e7       	ldi	r22, 0x78	; 120
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_word>
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <sboxnet_receiver_enable>:
     45c:	e8 ec       	ldi	r30, 0xC8	; 200
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 83       	st	Z, r24
     466:	e9 ec       	ldi	r30, 0xC9	; 201
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 69       	ori	r24, 0x90	; 144
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <sboxnet_init>:
     472:	e8 e0       	ldi	r30, 0x08	; 8
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	83 e3       	ldi	r24, 0x33	; 51
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	df 01       	movw	r26, r30
     47c:	9c 01       	movw	r18, r24
     47e:	1d 92       	st	X+, r1
     480:	21 50       	subi	r18, 0x01	; 1
     482:	30 40       	sbci	r19, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <sboxnet_init+0xc>
     486:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     48a:	80 87       	std	Z+8, r24	; 0x08
     48c:	89 e1       	ldi	r24, 0x19	; 25
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	8a ef       	ldi	r24, 0xFA	; 250
     492:	80 8b       	std	Z+16, r24	; 0x10
     494:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <g_sboxnet+0x112>
     498:	52 98       	cbi	0x0a, 2	; 10
     49a:	5a 9a       	sbi	0x0b, 2	; 11
     49c:	5b 9a       	sbi	0x0b, 3	; 11
     49e:	53 9a       	sbi	0x0a, 3	; 10
     4a0:	ea 98       	cbi	0x1d, 2	; 29
     4a2:	e9 e6       	ldi	r30, 0x69	; 105
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 7d       	andi	r24, 0xDF	; 223
     4aa:	80 83       	st	Z, r24
     4ac:	80 81       	ld	r24, Z
     4ae:	80 61       	ori	r24, 0x10	; 16
     4b0:	80 83       	st	Z, r24
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	8c bb       	out	0x1c, r24	; 28
     4b6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
     4c0:	90 e4       	ldi	r25, 0x40	; 64
     4c2:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     4c6:	96 e2       	ldi	r25, 0x26	; 38
     4c8:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
     4cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     4d0:	0e 94 2e 02 	call	0x45c	; 0x45c <sboxnet_receiver_enable>
     4d4:	08 95       	ret

000004d6 <__vector_23>:
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	c8 e0       	ldi	r28, 0x08	; 8
     506:	d1 e0       	ldi	r29, 0x01	; 1
     508:	10 91 c8 00 	lds	r17, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     50c:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     510:	00 91 ce 00 	lds	r16, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     514:	81 2f       	mov	r24, r17
     516:	8c 71       	andi	r24, 0x1C	; 28
     518:	d1 f0       	breq	.+52     	; 0x54e <__stack+0x4f>
     51a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sboxnet_debug_inc_recverrors>
     51e:	14 ff       	sbrs	r17, 4
     520:	08 c0       	rjmp	.+16     	; 0x532 <__stack+0x33>
     522:	fe 01       	movw	r30, r28
     524:	eb 5d       	subi	r30, 0xDB	; 219
     526:	fd 4f       	sbci	r31, 0xFD	; 253
     528:	80 81       	ld	r24, Z
     52a:	91 81       	ldd	r25, Z+1	; 0x01
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	91 83       	std	Z+1, r25	; 0x01
     530:	80 83       	st	Z, r24
     532:	13 fd       	sbrc	r17, 3
     534:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sboxnet_debug_inc_recverr_dor>
     538:	12 ff       	sbrs	r17, 2
     53a:	93 c0       	rjmp	.+294    	; 0x662 <__stack+0x163>
     53c:	fe 01       	movw	r30, r28
     53e:	e9 5d       	subi	r30, 0xD9	; 217
     540:	fd 4f       	sbci	r31, 0xFD	; 253
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
     54c:	8a c0       	rjmp	.+276    	; 0x662 <__stack+0x163>
     54e:	91 ff       	sbrs	r25, 1
     550:	36 c0       	rjmp	.+108    	; 0x5be <__stack+0xbf>
     552:	8d 85       	ldd	r24, Y+13	; 0x0d
     554:	88 23       	and	r24, r24
     556:	69 f0       	breq	.+26     	; 0x572 <__stack+0x73>
     558:	fe 01       	movw	r30, r28
     55a:	e5 5d       	subi	r30, 0xD5	; 213
     55c:	fd 4f       	sbci	r31, 0xFD	; 253
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sboxnet_debug_inc_recverrors>
     56c:	1d 86       	std	Y+13, r1	; 0x0d
     56e:	8e 85       	ldd	r24, Y+14	; 0x0e
     570:	8c 87       	std	Y+12, r24	; 0x0c
     572:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_sboxnet_addr>
     576:	08 17       	cp	r16, r24
     578:	29 f0       	breq	.+10     	; 0x584 <__stack+0x85>
     57a:	0f 3f       	cpi	r16, 0xFF	; 255
     57c:	19 f0       	breq	.+6      	; 0x584 <__stack+0x85>
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	80 ff       	sbrs	r24, 0
     582:	6f c0       	rjmp	.+222    	; 0x662 <__stack+0x163>
     584:	e8 ec       	ldi	r30, 0xC8	; 200
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	8e 7f       	andi	r24, 0xFE	; 254
     58c:	80 83       	st	Z, r24
     58e:	7e 01       	movw	r14, r28
     590:	89 e0       	ldi	r24, 0x09	; 9
     592:	e8 0e       	add	r14, r24
     594:	f1 1c       	adc	r15, r1
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	c7 01       	movw	r24, r14
     59a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     59e:	88 23       	and	r24, r24
     5a0:	59 f0       	breq	.+22     	; 0x5b8 <__stack+0xb9>
     5a2:	60 2f       	mov	r22, r16
     5a4:	c7 01       	movw	r24, r14
     5a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     5aa:	88 23       	and	r24, r24
     5ac:	29 f0       	breq	.+10     	; 0x5b8 <__stack+0xb9>
     5ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sboxnet_debug_inc_recv_byte>
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	8f 83       	std	Y+7, r24	; 0x07
     5b6:	5e c0       	rjmp	.+188    	; 0x674 <__stack+0x175>
     5b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sboxnet_debug_inc_recverr_dor>
     5bc:	50 c0       	rjmp	.+160    	; 0x65e <__stack+0x15f>
     5be:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c0:	9f 81       	ldd	r25, Y+7	; 0x07
     5c2:	98 17       	cp	r25, r24
     5c4:	48 f4       	brcc	.+18     	; 0x5d8 <__stack+0xd9>
     5c6:	fe 01       	movw	r30, r28
     5c8:	e3 5d       	subi	r30, 0xD3	; 211
     5ca:	fd 4f       	sbci	r31, 0xFD	; 253
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	43 c0       	rjmp	.+134    	; 0x65e <__stack+0x15f>
     5d8:	84 30       	cpi	r24, 0x04	; 4
     5da:	21 f4       	brne	.+8      	; 0x5e4 <__stack+0xe5>
     5dc:	80 2f       	mov	r24, r16
     5de:	8f 73       	andi	r24, 0x3F	; 63
     5e0:	8a 5f       	subi	r24, 0xFA	; 250
     5e2:	8f 83       	std	Y+7, r24	; 0x07
     5e4:	60 2f       	mov	r22, r16
     5e6:	ce 01       	movw	r24, r28
     5e8:	09 96       	adiw	r24, 0x09	; 9
     5ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     5ee:	81 11       	cpse	r24, r1
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__stack+0xf9>
     5f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sboxnet_debug_inc_recverr_dor>
     5f6:	33 c0       	rjmp	.+102    	; 0x65e <__stack+0x15f>
     5f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sboxnet_debug_inc_recv_byte>
     5fc:	4f 81       	ldd	r20, Y+7	; 0x07
     5fe:	2d 85       	ldd	r18, Y+13	; 0x0d
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	84 2f       	mov	r24, r20
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	28 17       	cp	r18, r24
     60a:	39 07       	cpc	r19, r25
     60c:	99 f5       	brne	.+102    	; 0x674 <__stack+0x175>
     60e:	8e 85       	ldd	r24, Y+14	; 0x0e
     610:	fe 01       	movw	r30, r28
     612:	e8 0f       	add	r30, r24
     614:	f1 1d       	adc	r31, r1
     616:	41 8b       	std	Z+17, r20	; 0x11
     618:	1f 82       	std	Y+7, r1	; 0x07
     61a:	e8 ec       	ldi	r30, 0xC8	; 200
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	81 60       	ori	r24, 0x01	; 1
     622:	80 83       	st	Z, r24
     624:	9f 85       	ldd	r25, Y+15	; 0x0f
     626:	8d 85       	ldd	r24, Y+13	; 0x0d
     628:	48 2f       	mov	r20, r24
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	49 0f       	add	r20, r25
     62e:	51 1d       	adc	r21, r1
     630:	28 89       	ldd	r18, Y+16	; 0x10
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	24 17       	cp	r18, r20
     636:	35 07       	cpc	r19, r21
     638:	2c f4       	brge	.+10     	; 0x644 <__stack+0x145>
     63a:	e8 e0       	ldi	r30, 0x08	; 8
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	21 81       	ldd	r18, Z+1	; 0x01
     640:	24 60       	ori	r18, 0x04	; 4
     642:	21 83       	std	Z+1, r18	; 0x01
     644:	89 0f       	add	r24, r25
     646:	8f 87       	std	Y+15, r24	; 0x0f
     648:	1d 86       	std	Y+13, r1	; 0x0d
     64a:	8c 85       	ldd	r24, Y+12	; 0x0c
     64c:	8e 87       	std	Y+14, r24	; 0x0e
     64e:	e7 e1       	ldi	r30, 0x17	; 23
     650:	f3 e0       	ldi	r31, 0x03	; 3
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	91 83       	std	Z+1, r25	; 0x01
     65a:	80 83       	st	Z, r24
     65c:	0b c0       	rjmp	.+22     	; 0x674 <__stack+0x175>
     65e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sboxnet_debug_inc_recverrors>
     662:	1f 82       	std	Y+7, r1	; 0x07
     664:	e8 ec       	ldi	r30, 0xC8	; 200
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24
     66e:	1d 86       	std	Y+13, r1	; 0x0d
     670:	8e 85       	ldd	r24, Y+14	; 0x0e
     672:	8c 87       	std	Y+12, r24	; 0x0c
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <__vector_25>:
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	4f 93       	push	r20
     6b6:	5f 93       	push	r21
     6b8:	6f 93       	push	r22
     6ba:	7f 93       	push	r23
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
     6cc:	c8 e0       	ldi	r28, 0x08	; 8
     6ce:	d1 e0       	ldi	r29, 0x01	; 1
     6d0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     6d4:	48 2f       	mov	r20, r24
     6d6:	44 71       	andi	r20, 0x14	; 20
     6d8:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     6dc:	2d 81       	ldd	r18, Y+5	; 0x05
     6de:	88 23       	and	r24, r24
     6e0:	2c f4       	brge	.+10     	; 0x6ec <__vector_25+0x4a>
     6e2:	41 11       	cpse	r20, r1
     6e4:	0d c0       	rjmp	.+26     	; 0x700 <__vector_25+0x5e>
     6e6:	32 13       	cpse	r19, r18
     6e8:	13 c0       	rjmp	.+38     	; 0x710 <__vector_25+0x6e>
     6ea:	68 c0       	rjmp	.+208    	; 0x7bc <__vector_25+0x11a>
     6ec:	fe 01       	movw	r30, r28
     6ee:	e5 5e       	subi	r30, 0xE5	; 229
     6f0:	fd 4f       	sbci	r31, 0xFD	; 253
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	44 23       	and	r20, r20
     6fe:	41 f0       	breq	.+16     	; 0x710 <__vector_25+0x6e>
     700:	fe 01       	movw	r30, r28
     702:	e3 5e       	subi	r30, 0xE3	; 227
     704:	fd 4f       	sbci	r31, 0xFD	; 253
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	91 83       	std	Z+1, r25	; 0x01
     70e:	80 83       	st	Z, r24
     710:	32 17       	cp	r19, r18
     712:	41 f0       	breq	.+16     	; 0x724 <__vector_25+0x82>
     714:	fe 01       	movw	r30, r28
     716:	e1 5e       	subi	r30, 0xE1	; 225
     718:	fd 4f       	sbci	r31, 0xFD	; 253
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
     724:	5b 98       	cbi	0x0b, 3	; 11
     726:	e9 ec       	ldi	r30, 0xC9	; 201
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	87 7a       	andi	r24, 0xA7	; 167
     72e:	80 83       	st	Z, r24
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	88 83       	st	Y, r24
     734:	fe 01       	movw	r30, r28
     736:	e7 5e       	subi	r30, 0xE7	; 231
     738:	fd 4f       	sbci	r31, 0xFD	; 253
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	81 11       	cpse	r24, r1
     748:	05 c0       	rjmp	.+10     	; 0x754 <__vector_25+0xb2>
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	8c 81       	ldd	r24, Y+4	; 0x04
     74e:	98 17       	cp	r25, r24
     750:	88 f0       	brcs	.+34     	; 0x774 <__vector_25+0xd2>
     752:	1c c0       	rjmp	.+56     	; 0x78c <__vector_25+0xea>
     754:	81 50       	subi	r24, 0x01	; 1
     756:	8a 83       	std	Y+2, r24	; 0x02
     758:	fe 01       	movw	r30, r28
     75a:	e5 5f       	subi	r30, 0xF5	; 245
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	11 82       	std	Z+1, r1	; 0x01
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	80 83       	st	Z, r24
     764:	ea 5e       	subi	r30, 0xEA	; 234
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
     772:	1d c0       	rjmp	.+58     	; 0x7ae <__vector_25+0x10c>
     774:	8e 01       	movw	r16, r28
     776:	05 5f       	subi	r16, 0xF5	; 245
     778:	1e 4f       	sbci	r17, 0xFE	; 254
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	8b 83       	std	Y+3, r24	; 0x03
     786:	9c 81       	ldd	r25, Y+4	; 0x04
     788:	89 17       	cp	r24, r25
     78a:	b8 f3       	brcs	.-18     	; 0x77a <__vector_25+0xd8>
     78c:	1c 82       	std	Y+4, r1	; 0x04
     78e:	1b 82       	std	Y+3, r1	; 0x03
     790:	89 e1       	ldi	r24, 0x19	; 25
     792:	8a 83       	std	Y+2, r24	; 0x02
     794:	ce 01       	movw	r24, r28
     796:	85 5f       	subi	r24, 0xF5	; 245
     798:	9e 4f       	sbci	r25, 0xFE	; 254
     79a:	0e 94 18 01 	call	0x230	; 0x230 <sboxnet_rb_read_commit>
     79e:	fe 01       	movw	r30, r28
     7a0:	ef 5c       	subi	r30, 0xCF	; 207
     7a2:	fd 4f       	sbci	r31, 0xFD	; 253
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
     7ae:	1c 82       	std	Y+4, r1	; 0x04
     7b0:	1b 82       	std	Y+3, r1	; 0x03
     7b2:	80 e8       	ldi	r24, 0x80	; 128
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 47 01 	call	0x28e	; 0x28e <sboxnet_set_timer>
     7ba:	41 c0       	rjmp	.+130    	; 0x83e <__vector_25+0x19c>
     7bc:	e9 ec       	ldi	r30, 0xC9	; 201
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	8f 76       	andi	r24, 0x6F	; 111
     7c4:	80 83       	st	Z, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	80 83       	st	Z, r24
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	8c 81       	ldd	r24, Y+4	; 0x04
     7d0:	98 17       	cp	r25, r24
     7d2:	88 f4       	brcc	.+34     	; 0x7f6 <__vector_25+0x154>
     7d4:	ce 01       	movw	r24, r28
     7d6:	85 5f       	subi	r24, 0xF5	; 245
     7d8:	9e 4f       	sbci	r25, 0xFE	; 254
     7da:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	9f 5f       	subi	r25, 0xFF	; 255
     7e2:	9b 83       	std	Y+3, r25	; 0x03
     7e4:	8d 83       	std	Y+5, r24	; 0x05
     7e6:	e9 ec       	ldi	r30, 0xC9	; 201
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	90 81       	ld	r25, Z
     7ec:	9e 7f       	andi	r25, 0xFE	; 254
     7ee:	90 83       	st	Z, r25
     7f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     7f4:	1d c0       	rjmp	.+58     	; 0x830 <__vector_25+0x18e>
     7f6:	e9 ec       	ldi	r30, 0xC9	; 201
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8f 7b       	andi	r24, 0xBF	; 191
     7fe:	80 83       	st	Z, r24
     800:	1c 82       	std	Y+4, r1	; 0x04
     802:	1b 82       	std	Y+3, r1	; 0x03
     804:	ce 01       	movw	r24, r28
     806:	85 5f       	subi	r24, 0xF5	; 245
     808:	9e 4f       	sbci	r25, 0xFE	; 254
     80a:	0e 94 18 01 	call	0x230	; 0x230 <sboxnet_rb_read_commit>
     80e:	ef e1       	ldi	r30, 0x1F	; 31
     810:	f3 e0       	ldi	r31, 0x03	; 3
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	80 83       	st	Z, r24
     81c:	0e 94 2e 02 	call	0x45c	; 0x45c <sboxnet_receiver_enable>
     820:	88 81       	ld	r24, Y
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	09 f4       	brne	.+2      	; 0x828 <__vector_25+0x186>
     826:	18 82       	st	Y, r1
     828:	89 e1       	ldi	r24, 0x19	; 25
     82a:	8a 83       	std	Y+2, r24	; 0x02
     82c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sboxnet_check_try_transmit>
     830:	cd 5e       	subi	r28, 0xED	; 237
     832:	dd 4f       	sbci	r29, 0xFD	; 253
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	99 83       	std	Y+1, r25	; 0x01
     83c:	88 83       	st	Y, r24
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <sboxnet_receive_msg>:
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ac 01       	movw	r20, r24
     878:	66 30       	cpi	r22, 0x06	; 6
     87a:	08 f4       	brcc	.+2      	; 0x87e <sboxnet_receive_msg+0x16>
     87c:	73 c0       	rjmp	.+230    	; 0x964 <sboxnet_receive_msg+0xfc>
     87e:	9f b7       	in	r25, 0x3f	; 63
     880:	f8 94       	cli
     882:	e8 e0       	ldi	r30, 0x08	; 8
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	37 85       	ldd	r19, Z+15	; 0x0f
     888:	22 85       	ldd	r18, Z+10	; 0x0a
     88a:	83 2f       	mov	r24, r19
     88c:	82 1b       	sub	r24, r18
     88e:	87 30       	cpi	r24, 0x07	; 7
     890:	08 f4       	brcc	.+2      	; 0x894 <sboxnet_receive_msg+0x2c>
     892:	72 c0       	rjmp	.+228    	; 0x978 <sboxnet_receive_msg+0x110>
     894:	23 17       	cp	r18, r19
     896:	38 f4       	brcc	.+14     	; 0x8a6 <sboxnet_receive_msg+0x3e>
     898:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <g_sboxnet+0x9>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e8 5f       	subi	r30, 0xF8	; 248
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	c1 89       	ldd	r28, Z+17	; 0x11
     8a4:	6a c0       	rjmp	.+212    	; 0x97a <sboxnet_receive_msg+0x112>
     8a6:	e8 e0       	ldi	r30, 0x08	; 8
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	21 81       	ldd	r18, Z+1	; 0x01
     8ac:	22 60       	ori	r18, 0x02	; 2
     8ae:	21 83       	std	Z+1, r18	; 0x01
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
     8b2:	63 c0       	rjmp	.+198    	; 0x97a <sboxnet_receive_msg+0x112>
     8b4:	ec 2f       	mov	r30, r28
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	28 2f       	mov	r18, r24
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	2e 17       	cp	r18, r30
     8c0:	3f 07       	cpc	r19, r31
     8c2:	0c f4       	brge	.+2      	; 0x8c6 <sboxnet_receive_msg+0x5e>
     8c4:	51 c0       	rjmp	.+162    	; 0x968 <sboxnet_receive_msg+0x100>
     8c6:	6c 17       	cp	r22, r28
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <sboxnet_receive_msg+0x64>
     8ca:	50 c0       	rjmp	.+160    	; 0x96c <sboxnet_receive_msg+0x104>
     8cc:	c6 34       	cpi	r28, 0x46	; 70
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <sboxnet_receive_msg+0x6a>
     8d0:	4f c0       	rjmp	.+158    	; 0x970 <sboxnet_receive_msg+0x108>
     8d2:	8a 01       	movw	r16, r20
     8d4:	df b7       	in	r29, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	81 e1       	ldi	r24, 0x11	; 17
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     8e0:	df bf       	out	0x3f, r29	; 63
     8e2:	cc 23       	and	r28, r28
     8e4:	09 f1       	breq	.+66     	; 0x928 <sboxnet_receive_msg+0xc0>
     8e6:	78 01       	movw	r14, r16
     8e8:	4f ef       	ldi	r20, 0xFF	; 255
     8ea:	4c 0f       	add	r20, r28
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	4f 5f       	subi	r20, 0xFF	; 255
     8f0:	5f 4f       	sbci	r21, 0xFF	; 255
     8f2:	04 0f       	add	r16, r20
     8f4:	15 1f       	adc	r17, r21
     8f6:	df ef       	ldi	r29, 0xFF	; 255
     8f8:	df b6       	in	r13, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	81 e1       	ldi	r24, 0x11	; 17
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     904:	df be       	out	0x3f, r13	; 63
     906:	9d 2f       	mov	r25, r29
     908:	98 27       	eor	r25, r24
     90a:	28 e0       	ldi	r18, 0x08	; 8
     90c:	3c e8       	ldi	r19, 0x8C	; 140
     90e:	96 95       	lsr	r25
     910:	08 f4       	brcc	.+2      	; 0x914 <sboxnet_receive_msg+0xac>
     912:	93 27       	eor	r25, r19
     914:	2a 95       	dec	r18
     916:	d9 f7       	brne	.-10     	; 0x90e <sboxnet_receive_msg+0xa6>
     918:	d9 2f       	mov	r29, r25
     91a:	f7 01       	movw	r30, r14
     91c:	81 93       	st	Z+, r24
     91e:	7f 01       	movw	r14, r30
     920:	0e 17       	cp	r16, r30
     922:	1f 07       	cpc	r17, r31
     924:	49 f7       	brne	.-46     	; 0x8f8 <sboxnet_receive_msg+0x90>
     926:	01 c0       	rjmp	.+2      	; 0x92a <sboxnet_receive_msg+0xc2>
     928:	df ef       	ldi	r29, 0xFF	; 255
     92a:	1f b7       	in	r17, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	81 e1       	ldi	r24, 0x11	; 17
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 18 01 	call	0x230	; 0x230 <sboxnet_rb_read_commit>
     936:	1f bf       	out	0x3f, r17	; 63
     938:	dd 23       	and	r29, r29
     93a:	59 f0       	breq	.+22     	; 0x952 <sboxnet_receive_msg+0xea>
     93c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sboxnet_debug_inc_recverrors>
     940:	e7 e3       	ldi	r30, 0x37	; 55
     942:	f3 e0       	ldi	r31, 0x03	; 3
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	80 83       	st	Z, r24
     94e:	8e ef       	ldi	r24, 0xFE	; 254
     950:	19 c0       	rjmp	.+50     	; 0x984 <sboxnet_receive_msg+0x11c>
     952:	e9 e1       	ldi	r30, 0x19	; 25
     954:	f3 e0       	ldi	r31, 0x03	; 3
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	8c 2f       	mov	r24, r28
     962:	10 c0       	rjmp	.+32     	; 0x984 <sboxnet_receive_msg+0x11c>
     964:	8d ef       	ldi	r24, 0xFD	; 253
     966:	0e c0       	rjmp	.+28     	; 0x984 <sboxnet_receive_msg+0x11c>
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	0c c0       	rjmp	.+24     	; 0x984 <sboxnet_receive_msg+0x11c>
     96c:	8d ef       	ldi	r24, 0xFD	; 253
     96e:	0a c0       	rjmp	.+20     	; 0x984 <sboxnet_receive_msg+0x11c>
     970:	8c ef       	ldi	r24, 0xFC	; 252
     972:	08 c0       	rjmp	.+16     	; 0x984 <sboxnet_receive_msg+0x11c>
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	06 c0       	rjmp	.+12     	; 0x984 <sboxnet_receive_msg+0x11c>
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	9f bf       	out	0x3f, r25	; 63
     97c:	c6 30       	cpi	r28, 0x06	; 6
     97e:	08 f0       	brcs	.+2      	; 0x982 <sboxnet_receive_msg+0x11a>
     980:	99 cf       	rjmp	.-206    	; 0x8b4 <sboxnet_receive_msg+0x4c>
     982:	f8 cf       	rjmp	.-16     	; 0x974 <sboxnet_receive_msg+0x10c>
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <sboxnet_send_msg>:
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	fc 01       	movw	r30, r24
     9a4:	03 81       	ldd	r16, Z+3	; 0x03
     9a6:	0f 73       	andi	r16, 0x3F	; 63
     9a8:	0a 5f       	subi	r16, 0xFA	; 250
     9aa:	8f b7       	in	r24, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <g_sboxnet+0x112>
     9b2:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <g_sboxnet+0x111>
     9b6:	92 1b       	sub	r25, r18
     9b8:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <g_sboxnet+0x10f>
     9bc:	92 1b       	sub	r25, r18
     9be:	8f bf       	out	0x3f, r24	; 63
     9c0:	09 17       	cp	r16, r25
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <sboxnet_send_msg+0x32>
     9c4:	78 c0       	rjmp	.+240    	; 0xab6 <sboxnet_send_msg+0x122>
     9c6:	7f 01       	movw	r14, r30
     9c8:	cf b7       	in	r28, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	60 2f       	mov	r22, r16
     9ce:	83 e1       	ldi	r24, 0x13	; 19
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     9d6:	cf bf       	out	0x3f, r28	; 63
     9d8:	88 23       	and	r24, r24
     9da:	09 f4       	brne	.+2      	; 0x9de <sboxnet_send_msg+0x4a>
     9dc:	37 c0       	rjmp	.+110    	; 0xa4c <sboxnet_send_msg+0xb8>
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	01 50       	subi	r16, 0x01	; 1
     9e2:	11 09       	sbc	r17, r1
     9e4:	10 16       	cp	r1, r16
     9e6:	11 06       	cpc	r1, r17
     9e8:	34 f5       	brge	.+76     	; 0xa36 <sboxnet_send_msg+0xa2>
     9ea:	d1 2c       	mov	r13, r1
     9ec:	cf ef       	ldi	r28, 0xFF	; 255
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	d8 12       	cpse	r13, r24
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <sboxnet_send_msg+0x66>
     9f4:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_sboxnet_addr>
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <sboxnet_send_msg+0x6e>
     9fa:	f7 01       	movw	r30, r14
     9fc:	ed 0d       	add	r30, r13
     9fe:	f1 1d       	adc	r31, r1
     a00:	60 81       	ld	r22, Z
     a02:	9c 2f       	mov	r25, r28
     a04:	96 27       	eor	r25, r22
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	2c e8       	ldi	r18, 0x8C	; 140
     a0a:	96 95       	lsr	r25
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <sboxnet_send_msg+0x7c>
     a0e:	92 27       	eor	r25, r18
     a10:	8a 95       	dec	r24
     a12:	d9 f7       	brne	.-10     	; 0xa0a <sboxnet_send_msg+0x76>
     a14:	c9 2f       	mov	r28, r25
     a16:	df b7       	in	r29, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	83 e1       	ldi	r24, 0x13	; 19
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     a22:	df bf       	out	0x3f, r29	; 63
     a24:	88 23       	and	r24, r24
     a26:	91 f0       	breq	.+36     	; 0xa4c <sboxnet_send_msg+0xb8>
     a28:	d3 94       	inc	r13
     a2a:	8d 2d       	mov	r24, r13
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 17       	cp	r24, r16
     a30:	91 07       	cpc	r25, r17
     a32:	ec f2       	brlt	.-70     	; 0x9ee <sboxnet_send_msg+0x5a>
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <sboxnet_send_msg+0xa4>
     a36:	cf ef       	ldi	r28, 0xFF	; 255
     a38:	df b7       	in	r29, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	6c 2f       	mov	r22, r28
     a3e:	83 e1       	ldi	r24, 0x13	; 19
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sboxnet_rb_write>
     a46:	df bf       	out	0x3f, r29	; 63
     a48:	81 11       	cpse	r24, r1
     a4a:	0b c0       	rjmp	.+22     	; 0xa62 <sboxnet_send_msg+0xce>
     a4c:	8f b7       	in	r24, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <g_sboxnet+0x10f>
     a54:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <g_sboxnet+0x110>
     a58:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <g_sboxnet+0x10e>
     a5c:	8f bf       	out	0x3f, r24	; 63
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	2b c0       	rjmp	.+86     	; 0xab8 <sboxnet_send_msg+0x124>
     a62:	cf b7       	in	r28, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <g_sboxnet+0x111>
     a6a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <g_sboxnet+0x10f>
     a6e:	48 2f       	mov	r20, r24
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	49 0f       	add	r20, r25
     a74:	51 1d       	adc	r21, r1
     a76:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <g_sboxnet+0x112>
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	24 17       	cp	r18, r20
     a7e:	35 07       	cpc	r19, r21
     a80:	2c f4       	brge	.+10     	; 0xa8c <sboxnet_send_msg+0xf8>
     a82:	e8 e0       	ldi	r30, 0x08	; 8
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	21 81       	ldd	r18, Z+1	; 0x01
     a88:	24 60       	ori	r18, 0x04	; 4
     a8a:	21 83       	std	Z+1, r18	; 0x01
     a8c:	89 0f       	add	r24, r25
     a8e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <g_sboxnet+0x111>
     a92:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <g_sboxnet+0x10f>
     a96:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <g_sboxnet+0x10e>
     a9a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <g_sboxnet+0x110>
     a9e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sboxnet_check_try_transmit>
     aa2:	cf bf       	out	0x3f, r28	; 63
     aa4:	ed e1       	ldi	r30, 0x1D	; 29
     aa6:	f3 e0       	ldi	r31, 0x03	; 3
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <sboxnet_send_msg+0x124>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	08 95       	ret

00000ac8 <__vector_16>:
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	cf 93       	push	r28
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
     aec:	ef e6       	ldi	r30, 0x6F	; 111
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8b 7f       	andi	r24, 0xFB	; 251
     af4:	80 83       	st	Z, r24
     af6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_sboxnet>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_16+0x38>
     afe:	5b c0       	rjmp	.+182    	; 0xbb6 <__vector_16+0xee>
     b00:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_sboxnet+0x4>
     b04:	88 23       	and	r24, r24
     b06:	09 f4       	brne	.+2      	; 0xb0a <__vector_16+0x42>
     b08:	53 c0       	rjmp	.+166    	; 0xbb0 <__vector_16+0xe8>
     b0a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_sboxnet+0x3>
     b0e:	81 11       	cpse	r24, r1
     b10:	4f c0       	rjmp	.+158    	; 0xbb0 <__vector_16+0xe8>
     b12:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <g_sboxnet+0x111>
     b16:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <g_sboxnet+0x10c>
     b1a:	89 17       	cp	r24, r25
     b1c:	38 f4       	brcc	.+14     	; 0xb2c <__vector_16+0x64>
     b1e:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <g_sboxnet+0x10b>
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	ed 5e       	subi	r30, 0xED	; 237
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	c0 85       	ldd	r28, Z+8	; 0x08
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <__vector_16+0x70>
     b2c:	e8 e0       	ldi	r30, 0x08	; 8
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	81 83       	std	Z+1, r24	; 0x01
     b36:	c0 e0       	ldi	r28, 0x00	; 0
     b38:	5b 9a       	sbi	0x0b, 3	; 11
     b3a:	e9 ec       	ldi	r30, 0xC9	; 201
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	89 60       	ori	r24, 0x09	; 9
     b42:	80 83       	st	Z, r24
     b44:	e2 99       	sbic	0x1c, 2	; 28
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__vector_16+0x84>
     b48:	4a 99       	sbic	0x09, 2	; 9
     b4a:	16 c0       	rjmp	.+44     	; 0xb78 <__vector_16+0xb0>
     b4c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <sboxnet_prandom>
     b50:	e8 e0       	ldi	r30, 0x08	; 8
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	22 81       	ldd	r18, Z+2	; 0x02
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	22 0f       	add	r18, r18
     b5a:	33 1f       	adc	r19, r19
     b5c:	28 58       	subi	r18, 0x88	; 136
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	94 e0       	ldi	r25, 0x04	; 4
     b62:	9c bb       	out	0x1c, r25	; 28
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	90 83       	st	Z, r25
     b68:	8f 73       	andi	r24, 0x3F	; 63
     b6a:	a9 01       	movw	r20, r18
     b6c:	48 0f       	add	r20, r24
     b6e:	51 1d       	adc	r21, r1
     b70:	ca 01       	movw	r24, r20
     b72:	0e 94 47 01 	call	0x28e	; 0x28e <sboxnet_set_timer>
     b76:	3e c0       	rjmp	.+124    	; 0xbf4 <__vector_16+0x12c>
     b78:	e9 ec       	ldi	r30, 0xC9	; 201
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 76       	andi	r24, 0x6F	; 111
     b80:	80 83       	st	Z, r24
     b82:	80 81       	ld	r24, Z
     b84:	80 65       	ori	r24, 0x50	; 80
     b86:	80 83       	st	Z, r24
     b88:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     b8c:	e8 ec       	ldi	r30, 0xC8	; 200
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	80 83       	st	Z, r24
     b96:	83 e1       	ldi	r24, 0x13	; 19
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 2c 01 	call	0x258	; 0x258 <sboxnet_rb_read>
     b9e:	e8 e0       	ldi	r30, 0x08	; 8
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	c5 83       	std	Z+5, r28	; 0x05
     ba4:	83 81       	ldd	r24, Z+3	; 0x03
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	83 83       	std	Z+3, r24	; 0x03
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	80 83       	st	Z, r24
     bae:	22 c0       	rjmp	.+68     	; 0xbf4 <__vector_16+0x12c>
     bb0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_sboxnet>
     bb4:	1f c0       	rjmp	.+62     	; 0xbf4 <__vector_16+0x12c>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	51 f4       	brne	.+20     	; 0xbce <__vector_16+0x106>
     bba:	5b 9a       	sbi	0x0b, 3	; 11
     bbc:	c4 e0       	ldi	r28, 0x04	; 4
     bbe:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <g_sboxnet>
     bc2:	80 e2       	ldi	r24, 0x20	; 32
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 47 01 	call	0x28e	; 0x28e <sboxnet_set_timer>
     bca:	cc bb       	out	0x1c, r28	; 28
     bcc:	13 c0       	rjmp	.+38     	; 0xbf4 <__vector_16+0x12c>
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	89 f4       	brne	.+34     	; 0xbf4 <__vector_16+0x12c>
     bd2:	e2 99       	sbic	0x1c, 2	; 28
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <__vector_16+0x120>
     bd6:	4a 9b       	sbis	0x09, 2	; 9
     bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <__vector_16+0x120>
     bda:	0e 94 2e 02 	call	0x45c	; 0x45c <sboxnet_receiver_enable>
     bde:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_sboxnet>
     be2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sboxnet_check_try_transmit>
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <__vector_16+0x12c>
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	8c bb       	out	0x1c, r24	; 28
     bec:	80 e2       	ldi	r24, 0x20	; 32
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 47 01 	call	0x28e	; 0x28e <sboxnet_set_timer>
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	cf 91       	pop	r28
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	7f 91       	pop	r23
     c04:	6f 91       	pop	r22
     c06:	5f 91       	pop	r21
     c08:	4f 91       	pop	r20
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0
     c14:	1f 90       	pop	r1
     c16:	18 95       	reti

00000c18 <usb_ep_read_data>:
     c18:	66 23       	and	r22, r22
     c1a:	41 f0       	breq	.+16     	; 0xc2c <usb_ep_read_data+0x14>
     c1c:	e8 2f       	mov	r30, r24
     c1e:	f9 2f       	mov	r31, r25
     c20:	a1 ef       	ldi	r26, 0xF1	; 241
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	8c 91       	ld	r24, X
     c26:	81 93       	st	Z+, r24
     c28:	61 50       	subi	r22, 0x01	; 1
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <usb_ep_read_data+0xc>
     c2c:	08 95       	ret

00000c2e <usb_ep_waitIN>:
     c2e:	e8 ee       	ldi	r30, 0xE8	; 232
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ab e3       	ldi	r26, 0x3B	; 59
     c34:	b3 e0       	ldi	r27, 0x03	; 3
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <usb_ep_waitIN+0x10>
     c38:	8c 91       	ld	r24, X
     c3a:	8c 71       	andi	r24, 0x1C	; 28
     c3c:	29 f0       	breq	.+10     	; 0xc48 <usb_ep_waitIN+0x1a>
     c3e:	80 81       	ld	r24, Z
     c40:	80 ff       	sbrs	r24, 0
     c42:	fa cf       	rjmp	.-12     	; 0xc38 <usb_ep_waitIN+0xa>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	08 95       	ret

00000c4c <usb_ep_send_zlp>:
     c4c:	0e 94 17 06 	call	0xc2e	; 0xc2e <usb_ep_waitIN>
     c50:	81 11       	cpse	r24, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <usb_ep_send_zlp+0x16>
     c54:	e8 ee       	ldi	r30, 0xE8	; 232
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8e 7f       	andi	r24, 0xFE	; 254
     c5c:	80 83       	st	Z, r24
     c5e:	0e 94 17 06 	call	0xc2e	; 0xc2e <usb_ep_waitIN>
     c62:	08 95       	ret

00000c64 <usb_mem_read_byte>:
     c64:	61 30       	cpi	r22, 0x01	; 1
     c66:	19 f0       	breq	.+6      	; 0xc6e <usb_mem_read_byte+0xa>
     c68:	62 30       	cpi	r22, 0x02	; 2
     c6a:	21 f0       	breq	.+8      	; 0xc74 <usb_mem_read_byte+0x10>
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <usb_mem_read_byte+0x16>
     c6e:	fc 01       	movw	r30, r24
     c70:	84 91       	lpm	r24, Z
     c72:	08 95       	ret
     c74:	0e 94 2c 0c 	call	0x1858	; 0x1858 <eeprom_read_byte>
     c78:	08 95       	ret
     c7a:	fc 01       	movw	r30, r24
     c7c:	80 81       	ld	r24, Z
     c7e:	08 95       	ret

00000c80 <usb_ep_getbufsize>:
     c80:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     c84:	e2 95       	swap	r30
     c86:	ef 70       	andi	r30, 0x0F	; 15
     c88:	e3 70       	andi	r30, 0x03	; 3
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	e8 54       	subi	r30, 0x48	; 72
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	84 91       	lpm	r24, Z
     c92:	08 95       	ret

00000c94 <usb_ep_send_control_data_chunk>:
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	4c 01       	movw	r8, r24
     cba:	eb 01       	movw	r28, r22
     cbc:	34 2e       	mov	r3, r20
     cbe:	0e 94 40 06 	call	0xc80	; 0xc80 <usb_ep_getbufsize>
     cc2:	48 2e       	mov	r4, r24
     cc4:	0f 2e       	mov	r0, r31
     cc6:	fb e3       	ldi	r31, 0x3B	; 59
     cc8:	af 2e       	mov	r10, r31
     cca:	f3 e0       	ldi	r31, 0x03	; 3
     ccc:	bf 2e       	mov	r11, r31
     cce:	f0 2d       	mov	r31, r0
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f8 ee       	ldi	r31, 0xE8	; 232
     cd4:	cf 2e       	mov	r12, r31
     cd6:	d1 2c       	mov	r13, r1
     cd8:	f0 2d       	mov	r31, r0
     cda:	0f 2e       	mov	r0, r31
     cdc:	f2 ef       	ldi	r31, 0xF2	; 242
     cde:	6f 2e       	mov	r6, r31
     ce0:	71 2c       	mov	r7, r1
     ce2:	f0 2d       	mov	r31, r0
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f1 ef       	ldi	r31, 0xF1	; 241
     ce8:	ef 2e       	mov	r14, r31
     cea:	f1 2c       	mov	r15, r1
     cec:	f0 2d       	mov	r31, r0
     cee:	f5 01       	movw	r30, r10
     cf0:	80 81       	ld	r24, Z
     cf2:	8c 71       	andi	r24, 0x1C	; 28
     cf4:	a9 f1       	breq	.+106    	; 0xd60 <usb_ep_send_control_data_chunk+0xcc>
     cf6:	f6 01       	movw	r30, r12
     cf8:	80 81       	ld	r24, Z
     cfa:	83 fd       	sbrc	r24, 3
     cfc:	36 c0       	rjmp	.+108    	; 0xd6a <usb_ep_send_control_data_chunk+0xd6>
     cfe:	80 81       	ld	r24, Z
     d00:	f8 2f       	mov	r31, r24
     d02:	f4 70       	andi	r31, 0x04	; 4
     d04:	2f 2e       	mov	r2, r31
     d06:	82 ff       	sbrs	r24, 2
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <usb_ep_send_control_data_chunk+0x88>
     d0a:	e8 ee       	ldi	r30, 0xE8	; 232
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8b 7f       	andi	r24, 0xFB	; 251
     d12:	80 83       	st	Z, r24
     d14:	68 94       	set
     d16:	22 24       	eor	r2, r2
     d18:	21 f8       	bld	r2, 1
     d1a:	35 c0       	rjmp	.+106    	; 0xd86 <usb_ep_send_control_data_chunk+0xf2>
     d1c:	f6 01       	movw	r30, r12
     d1e:	80 81       	ld	r24, Z
     d20:	80 ff       	sbrs	r24, 0
     d22:	e5 cf       	rjmp	.-54     	; 0xcee <usb_ep_send_control_data_chunk+0x5a>
     d24:	f3 01       	movw	r30, r6
     d26:	50 80       	ld	r5, Z
     d28:	20 97       	sbiw	r28, 0x00	; 0
     d2a:	11 f1       	breq	.+68     	; 0xd70 <usb_ep_send_control_data_chunk+0xdc>
     d2c:	54 14       	cp	r5, r4
     d2e:	18 f5       	brcc	.+70     	; 0xd76 <usb_ep_send_control_data_chunk+0xe2>
     d30:	84 01       	movw	r16, r8
     d32:	0f 5f       	subi	r16, 0xFF	; 255
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	63 2d       	mov	r22, r3
     d38:	c4 01       	movw	r24, r8
     d3a:	0e 94 32 06 	call	0xc64	; 0xc64 <usb_mem_read_byte>
     d3e:	f7 01       	movw	r30, r14
     d40:	80 83       	st	Z, r24
     d42:	21 97       	sbiw	r28, 0x01	; 1
     d44:	53 94       	inc	r5
     d46:	20 97       	sbiw	r28, 0x00	; 0
     d48:	99 f0       	breq	.+38     	; 0xd70 <usb_ep_send_control_data_chunk+0xdc>
     d4a:	48 01       	movw	r8, r16
     d4c:	54 14       	cp	r5, r4
     d4e:	80 f3       	brcs	.-32     	; 0xd30 <usb_ep_send_control_data_chunk+0x9c>
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <usb_ep_send_control_data_chunk+0xe2>
     d52:	f6 01       	movw	r30, r12
     d54:	80 81       	ld	r24, Z
     d56:	8e 7f       	andi	r24, 0xFE	; 254
     d58:	80 83       	st	Z, r24
     d5a:	20 97       	sbiw	r28, 0x00	; 0
     d5c:	41 f6       	brne	.-112    	; 0xcee <usb_ep_send_control_data_chunk+0x5a>
     d5e:	13 c0       	rjmp	.+38     	; 0xd86 <usb_ep_send_control_data_chunk+0xf2>
     d60:	0f 2e       	mov	r0, r31
     d62:	f3 e0       	ldi	r31, 0x03	; 3
     d64:	2f 2e       	mov	r2, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	0e c0       	rjmp	.+28     	; 0xd86 <usb_ep_send_control_data_chunk+0xf2>
     d6a:	22 24       	eor	r2, r2
     d6c:	23 94       	inc	r2
     d6e:	0b c0       	rjmp	.+22     	; 0xd86 <usb_ep_send_control_data_chunk+0xf2>
     d70:	45 14       	cp	r4, r5
     d72:	21 f0       	breq	.+8      	; 0xd7c <usb_ep_send_control_data_chunk+0xe8>
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <usb_ep_send_control_data_chunk+0xf2>
     d76:	45 10       	cpse	r4, r5
     d78:	ba cf       	rjmp	.-140    	; 0xcee <usb_ep_send_control_data_chunk+0x5a>
     d7a:	eb cf       	rjmp	.-42     	; 0xd52 <usb_ep_send_control_data_chunk+0xbe>
     d7c:	e8 ee       	ldi	r30, 0xE8	; 232
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	80 83       	st	Z, r24
     d86:	82 2d       	mov	r24, r2
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	bf 90       	pop	r11
     d9a:	af 90       	pop	r10
     d9c:	9f 90       	pop	r9
     d9e:	8f 90       	pop	r8
     da0:	7f 90       	pop	r7
     da2:	6f 90       	pop	r6
     da4:	5f 90       	pop	r5
     da6:	4f 90       	pop	r4
     da8:	3f 90       	pop	r3
     daa:	2f 90       	pop	r2
     dac:	08 95       	ret

00000dae <usb_ep_send_control_data_finish>:
     dae:	ab e3       	ldi	r26, 0x3B	; 59
     db0:	b3 e0       	ldi	r27, 0x03	; 3
     db2:	e8 ee       	ldi	r30, 0xE8	; 232
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	8c 91       	ld	r24, X
     db8:	8c 71       	andi	r24, 0x1C	; 28
     dba:	49 f1       	breq	.+82     	; 0xe0e <usb_ep_send_control_data_finish+0x60>
     dbc:	80 81       	ld	r24, Z
     dbe:	83 fd       	sbrc	r24, 3
     dc0:	28 c0       	rjmp	.+80     	; 0xe12 <usb_ep_send_control_data_finish+0x64>
     dc2:	90 81       	ld	r25, Z
     dc4:	89 2f       	mov	r24, r25
     dc6:	84 70       	andi	r24, 0x04	; 4
     dc8:	92 ff       	sbrs	r25, 2
     dca:	07 c0       	rjmp	.+14     	; 0xdda <usb_ep_send_control_data_finish+0x2c>
     dcc:	e8 ee       	ldi	r30, 0xE8	; 232
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8b 7f       	andi	r24, 0xFB	; 251
     dd4:	80 83       	st	Z, r24
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	08 95       	ret
     dda:	90 81       	ld	r25, Z
     ddc:	90 ff       	sbrs	r25, 0
     dde:	eb cf       	rjmp	.-42     	; 0xdb6 <usb_ep_send_control_data_finish+0x8>
     de0:	e8 ee       	ldi	r30, 0xE8	; 232
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	90 81       	ld	r25, Z
     de6:	9e 7f       	andi	r25, 0xFE	; 254
     de8:	90 83       	st	Z, r25
     dea:	ab e3       	ldi	r26, 0x3B	; 59
     dec:	b3 e0       	ldi	r27, 0x03	; 3
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <usb_ep_send_control_data_finish+0x4e>
     df0:	9c 91       	ld	r25, X
     df2:	9c 71       	andi	r25, 0x1C	; 28
     df4:	81 f0       	breq	.+32     	; 0xe16 <usb_ep_send_control_data_finish+0x68>
     df6:	90 81       	ld	r25, Z
     df8:	93 fd       	sbrc	r25, 3
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <usb_ep_send_control_data_finish+0x6c>
     dfc:	90 81       	ld	r25, Z
     dfe:	92 ff       	sbrs	r25, 2
     e00:	f7 cf       	rjmp	.-18     	; 0xdf0 <usb_ep_send_control_data_finish+0x42>
     e02:	e8 ee       	ldi	r30, 0xE8	; 232
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	90 81       	ld	r25, Z
     e08:	9b 7f       	andi	r25, 0xFB	; 251
     e0a:	90 83       	st	Z, r25
     e0c:	08 95       	ret
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	08 95       	ret
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	08 95       	ret
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	08 95       	ret

00000e1e <usb_ep_send_control_data>:
     e1e:	62 17       	cp	r22, r18
     e20:	73 07       	cpc	r23, r19
     e22:	08 f4       	brcc	.+2      	; 0xe26 <usb_ep_send_control_data+0x8>
     e24:	9b 01       	movw	r18, r22
     e26:	b9 01       	movw	r22, r18
     e28:	0e 94 4a 06 	call	0xc94	; 0xc94 <usb_ep_send_control_data_chunk>
     e2c:	81 11       	cpse	r24, r1
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <usb_ep_send_control_data+0x16>
     e30:	0e 94 d7 06 	call	0xdae	; 0xdae <usb_ep_send_control_data_finish>
     e34:	08 95       	ret

00000e36 <get_string>:
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	63 30       	cpi	r22, 0x03	; 3
     e3c:	c9 f4       	brne	.+50     	; 0xe70 <get_string+0x3a>
     e3e:	dc 01       	movw	r26, r24
     e40:	e8 ee       	ldi	r30, 0xE8	; 232
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	20 81       	ld	r18, Z
     e46:	27 7f       	andi	r18, 0xF7	; 247
     e48:	20 83       	st	Z, r18
     e4a:	16 96       	adiw	r26, 0x06	; 6
     e4c:	cd 91       	ld	r28, X+
     e4e:	dc 91       	ld	r29, X
     e50:	17 97       	sbiw	r26, 0x07	; 7
     e52:	62 e0       	ldi	r22, 0x02	; 2
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 32 06 	call	0xc64	; 0xc64 <usb_mem_read_byte>
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	9e 01       	movw	r18, r28
     e62:	42 e0       	ldi	r20, 0x02	; 2
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <get_string+0x3c>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <usb_ep_recv_control_data_chunk>:
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	5b 01       	movw	r10, r22
     e8e:	ea 01       	movw	r28, r20
     e90:	fb 01       	movw	r30, r22
     e92:	11 82       	std	Z+1, r1	; 0x01
     e94:	10 82       	st	Z, r1
     e96:	20 97       	sbiw	r28, 0x00	; 0
     e98:	09 f4       	brne	.+2      	; 0xe9c <usb_ep_recv_control_data_chunk+0x24>
     e9a:	41 c0       	rjmp	.+130    	; 0xf1e <usb_ep_recv_control_data_chunk+0xa6>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	0f 2e       	mov	r0, r31
     ea2:	fb e3       	ldi	r31, 0x3B	; 59
     ea4:	cf 2e       	mov	r12, r31
     ea6:	f3 e0       	ldi	r31, 0x03	; 3
     ea8:	df 2e       	mov	r13, r31
     eaa:	f0 2d       	mov	r31, r0
     eac:	0f 2e       	mov	r0, r31
     eae:	f8 ee       	ldi	r31, 0xE8	; 232
     eb0:	ef 2e       	mov	r14, r31
     eb2:	f1 2c       	mov	r15, r1
     eb4:	f0 2d       	mov	r31, r0
     eb6:	a2 ef       	ldi	r26, 0xF2	; 242
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	01 ef       	ldi	r16, 0xF1	; 241
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	f6 01       	movw	r30, r12
     ec0:	40 81       	ld	r20, Z
     ec2:	4c 71       	andi	r20, 0x1C	; 28
     ec4:	71 f1       	breq	.+92     	; 0xf22 <usb_ep_recv_control_data_chunk+0xaa>
     ec6:	f7 01       	movw	r30, r14
     ec8:	40 81       	ld	r20, Z
     eca:	64 2f       	mov	r22, r20
     ecc:	68 70       	andi	r22, 0x08	; 8
     ece:	43 fd       	sbrc	r20, 3
     ed0:	2a c0       	rjmp	.+84     	; 0xf26 <usb_ep_recv_control_data_chunk+0xae>
     ed2:	40 81       	ld	r20, Z
     ed4:	42 ff       	sbrs	r20, 2
     ed6:	f3 cf       	rjmp	.-26     	; 0xebe <usb_ep_recv_control_data_chunk+0x46>
     ed8:	4c 91       	ld	r20, X
     eda:	44 23       	and	r20, r20
     edc:	91 f0       	breq	.+36     	; 0xf02 <usb_ep_recv_control_data_chunk+0x8a>
     ede:	2c 17       	cp	r18, r28
     ee0:	3d 07       	cpc	r19, r29
     ee2:	18 f5       	brcc	.+70     	; 0xf2a <usb_ep_recv_control_data_chunk+0xb2>
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	f8 01       	movw	r30, r16
     ee8:	50 81       	ld	r21, Z
     eea:	fc 01       	movw	r30, r24
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	50 83       	st	Z, r21
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	5c 91       	ld	r21, X
     ef6:	55 23       	and	r21, r21
     ef8:	21 f0       	breq	.+8      	; 0xf02 <usb_ep_recv_control_data_chunk+0x8a>
     efa:	2c 17       	cp	r18, r28
     efc:	3d 07       	cpc	r19, r29
     efe:	90 f3       	brcs	.-28     	; 0xee4 <usb_ep_recv_control_data_chunk+0x6c>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <usb_ep_recv_control_data_chunk+0xb2>
     f02:	4c 91       	ld	r20, X
     f04:	41 11       	cpse	r20, r1
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <usb_ep_recv_control_data_chunk+0x98>
     f08:	f7 01       	movw	r30, r14
     f0a:	40 81       	ld	r20, Z
     f0c:	4b 7f       	andi	r20, 0xFB	; 251
     f0e:	40 83       	st	Z, r20
     f10:	2c 17       	cp	r18, r28
     f12:	3d 07       	cpc	r19, r29
     f14:	a0 f2       	brcs	.-88     	; 0xebe <usb_ep_recv_control_data_chunk+0x46>
     f16:	f5 01       	movw	r30, r10
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	0a c0       	rjmp	.+20     	; 0xf32 <usb_ep_recv_control_data_chunk+0xba>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <usb_ep_recv_control_data_chunk+0xba>
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	06 c0       	rjmp	.+12     	; 0xf32 <usb_ep_recv_control_data_chunk+0xba>
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <usb_ep_recv_control_data_chunk+0xba>
     f2a:	4c 91       	ld	r20, X
     f2c:	44 23       	and	r20, r20
     f2e:	61 f3       	breq	.-40     	; 0xf08 <usb_ep_recv_control_data_chunk+0x90>
     f30:	f2 cf       	rjmp	.-28     	; 0xf16 <usb_ep_recv_control_data_chunk+0x9e>
     f32:	86 2f       	mov	r24, r22
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	cf 90       	pop	r12
     f44:	bf 90       	pop	r11
     f46:	af 90       	pop	r10
     f48:	08 95       	ret

00000f4a <usb_ep_recv_control_data_finish>:
     f4a:	e8 ee       	ldi	r30, 0xE8	; 232
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	80 83       	st	Z, r24
     f54:	0e 94 26 06 	call	0xc4c	; 0xc4c <usb_ep_send_zlp>
     f58:	08 95       	ret

00000f5a <usb_ep_recv_control_data>:
     f5a:	0e 94 3c 07 	call	0xe78	; 0xe78 <usb_ep_recv_control_data_chunk>
     f5e:	81 11       	cpse	r24, r1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <usb_ep_recv_control_data+0xc>
     f62:	0e 94 a5 07 	call	0xf4a	; 0xf4a <usb_ep_recv_control_data_finish>
     f66:	08 95       	ret

00000f68 <usb_ep_setup>:
     f68:	40 31       	cpi	r20, 0x10	; 16
     f6a:	29 f0       	breq	.+10     	; 0xf76 <usb_ep_setup+0xe>
     f6c:	40 32       	cpi	r20, 0x20	; 32
     f6e:	29 f0       	breq	.+10     	; 0xf7a <usb_ep_setup+0x12>
     f70:	48 30       	cpi	r20, 0x08	; 8
     f72:	29 f4       	brne	.+10     	; 0xf7e <usb_ep_setup+0x16>
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <usb_ep_setup+0x1a>
     f76:	32 e1       	ldi	r19, 0x12	; 18
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <usb_ep_setup+0x1c>
     f7a:	32 e2       	ldi	r19, 0x22	; 34
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <usb_ep_setup+0x1c>
     f7e:	32 e3       	ldi	r19, 0x32	; 50
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <usb_ep_setup+0x1c>
     f82:	32 e0       	ldi	r19, 0x02	; 2
     f84:	98 2f       	mov	r25, r24
     f86:	97 70       	andi	r25, 0x07	; 7
     f88:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     f8c:	ab ee       	ldi	r26, 0xEB	; 235
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	9c 91       	ld	r25, X
     f92:	91 60       	ori	r25, 0x01	; 1
     f94:	9c 93       	st	X, r25
     f96:	62 95       	swap	r22
     f98:	66 0f       	add	r22, r22
     f9a:	66 0f       	add	r22, r22
     f9c:	60 7c       	andi	r22, 0xC0	; 192
     f9e:	88 1f       	adc	r24, r24
     fa0:	88 27       	eor	r24, r24
     fa2:	88 1f       	adc	r24, r24
     fa4:	86 2b       	or	r24, r22
     fa6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     faa:	e2 2f       	mov	r30, r18
     fac:	e1 70       	andi	r30, 0x01	; 1
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	e3 2b       	or	r30, r19
     fba:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     fbe:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
     fc2:	08 95       	ret

00000fc4 <usb_ep_setup_control>:
     fc4:	eb e3       	ldi	r30, 0x3B	; 59
     fc6:	f3 e0       	ldi	r31, 0x03	; 3
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	64 85       	ldd	r22, Z+12	; 0x0c
     fce:	07 96       	adiw	r24, 0x07	; 7
     fd0:	0e 94 32 06 	call	0xc64	; 0xc64 <usb_mem_read_byte>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	48 2f       	mov	r20, r24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 b4 07 	call	0xf68	; 0xf68 <usb_ep_setup>
     fe0:	08 95       	ret

00000fe2 <usb_intr_endofreset>:
     fe2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <usb_ep_setup_control>
     fe6:	eb e3       	ldi	r30, 0x3B	; 59
     fe8:	f3 e0       	ldi	r31, 0x03	; 3
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	80 83       	st	Z, r24
     fee:	11 82       	std	Z+1, r1	; 0x01
     ff0:	08 95       	ret

00000ff2 <__vector_11>:
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	1f 93       	push	r17
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <__vector_11+0x2a>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	10 91 e9 00 	lds	r17, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	83 ff       	sbrs	r24, 3
    103a:	09 c0       	rjmp	.+18     	; 0x104e <__vector_11+0x5c>
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	83 fd       	sbrc	r24, 3
    1040:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <usb_intr_endofreset>
    1044:	e1 ee       	ldi	r30, 0xE1	; 225
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	80 83       	st	Z, r24
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1056:	10 93 e9 00 	sts	0x00E9, r17	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	1f 91       	pop	r17
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <usb_init>:
    1086:	cf 92       	push	r12
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	eb e3       	ldi	r30, 0x3B	; 59
    1090:	f3 e0       	ldi	r31, 0x03	; 3
    1092:	5d e0       	ldi	r21, 0x0D	; 13
    1094:	df 01       	movw	r26, r30
    1096:	1d 92       	st	X+, r1
    1098:	5a 95       	dec	r21
    109a:	e9 f7       	brne	.-6      	; 0x1096 <usb_init+0x10>
    109c:	10 82       	st	Z, r1
    109e:	93 83       	std	Z+3, r25	; 0x03
    10a0:	82 83       	std	Z+2, r24	; 0x02
    10a2:	75 83       	std	Z+5, r23	; 0x05
    10a4:	64 83       	std	Z+4, r22	; 0x04
    10a6:	46 83       	std	Z+6, r20	; 0x06
    10a8:	30 87       	std	Z+8, r19	; 0x08
    10aa:	27 83       	std	Z+7, r18	; 0x07
    10ac:	01 87       	std	Z+9, r16	; 0x09
    10ae:	f3 86       	std	Z+11, r15	; 0x0b
    10b0:	e2 86       	std	Z+10, r14	; 0x0a
    10b2:	c4 86       	std	Z+12, r12	; 0x0c
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    10ba:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	89 bd       	out	0x29, r24	; 41
    10c2:	86 e0       	ldi	r24, 0x06	; 6
    10c4:	89 bd       	out	0x29, r24	; 41
    10c6:	09 b4       	in	r0, 0x29	; 41
    10c8:	00 fe       	sbrs	r0, 0
    10ca:	fd cf       	rjmp	.-6      	; 0x10c6 <usb_init+0x40>
    10cc:	e8 ed       	ldi	r30, 0xD8	; 216
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 ea       	ldi	r24, 0xA0	; 160
    10d2:	80 83       	st	Z, r24
    10d4:	80 e8       	ldi	r24, 0x80	; 128
    10d6:	80 83       	st	Z, r24
    10d8:	e2 ee       	ldi	r30, 0xE2	; 226
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
    10de:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    10e2:	89 e0       	ldi	r24, 0x09	; 9
    10e4:	80 83       	st	Z, r24
    10e6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <g_usb_dev>
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <usb_event_ep0_request>:
        st |= SBOXNET_STATUS_TX_CANSEND;
    }
    return st;
}

uint8_t usb_event_ep0_request(struct usb_device_request* req) {
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	c8 54       	subi	r28, 0x48	; 72
    110c:	d1 09       	sbc	r29, r1
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	dc 01       	movw	r26, r24
    if ( (req->bmRequestType & 0x7f) != (USB_REQTYPE_TYP_VENDOR|USB_REQTYPE_REC_INTERFACE) )
    111a:	9c 91       	ld	r25, X
    111c:	9f 77       	andi	r25, 0x7F	; 127
    111e:	91 34       	cpi	r25, 0x41	; 65
    1120:	09 f0       	breq	.+2      	; 0x1124 <usb_event_ep0_request+0x2a>
    1122:	ae c1       	rjmp	.+860    	; 0x1480 <usb_event_ep0_request+0x386>
        return 1;

    switch(req->bRequest) {        
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	ec 91       	ld	r30, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	4e 2f       	mov	r20, r30
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	fa 01       	movw	r30, r20
    1130:	f0 97       	sbiw	r30, 0x30	; 48
    1132:	e2 32       	cpi	r30, 0x22	; 34
    1134:	f1 05       	cpc	r31, r1
    1136:	08 f0       	brcs	.+2      	; 0x113a <usb_event_ep0_request+0x40>
    1138:	a5 c1       	rjmp	.+842    	; 0x1484 <usb_event_ep0_request+0x38a>
    113a:	8d 01       	movw	r16, r26
    113c:	e6 5c       	subi	r30, 0xC6	; 198
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__tablejump2__>

static inline uint8_t usb_ep_isSETUP(void) {
    return bit_is_set(UEINTX, RXSTPI);
}
static inline void usb_ep_clearSETUP(void) {
    clrbit(UEINTX, RXSTPI);
    1144:	e8 ee       	ldi	r30, 0xE8	; 232
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	80 83       	st	Z, r24
        case CMD_SBOXNET_SET_MODE: {
            usb_ep_clearSETUP();
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    114e:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1150:	f8 94       	cli
                if (req->wValue & SBOXNET_FLG_BOOTLOADER) {
    1152:	fd 01       	movw	r30, r26
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	87 ff       	sbrs	r24, 7
    1158:	08 c0       	rjmp	.+16     	; 0x116a <usb_event_ep0_request+0x70>
                    wdt_reset();
    115a:	a8 95       	wdr
                    // first, enable watchdog. the watchdog timeout makes a reset of the device.
                    // then after the reset, in init_system() MCUSR is checked if the cause of the reset was a timeout.
                    // if yes, jump to bootloader.
                    WDTCSR = Bit(WDCE)|Bit(WDE);
    115c:	e0 e6       	ldi	r30, 0x60	; 96
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	88 e1       	ldi	r24, 0x18	; 24
    1162:	80 83       	st	Z, r24
                    WDTCSR = Bit(WDP2)|Bit(WDE);  // 0.5s timeout
    1164:	8c e0       	ldi	r24, 0x0C	; 12
    1166:	80 83       	st	Z, r24
    1168:	8f c1       	rjmp	.+798    	; 0x1488 <usb_event_ep0_request+0x38e>

                } else if (req->wValue & SBOXNET_FLG_ENABLED) {
    116a:	80 ff       	sbrs	r24, 0
    116c:	15 c0       	rjmp	.+42     	; 0x1198 <usb_event_ep0_request+0x9e>
                    g_sboxnet_addr = req->wIndex;
    116e:	fd 01       	movw	r30, r26
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_sboxnet_addr>
                    if (!(g_sboxnet_flags & SBOXNET_FLG_ENABLED)) {
    1176:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_sboxnet_flags>
    117a:	80 fd       	sbrc	r24, 0
    117c:	07 c0       	rjmp	.+14     	; 0x118c <usb_event_ep0_request+0x92>
                        sboxnet_init();
    117e:	0e 94 39 02 	call	0x472	; 0x472 <sboxnet_init>
                        g_sboxnet_flags |= SBOXNET_FLG_ENABLED;
    1182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_sboxnet_flags>
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_sboxnet_flags>
                    }
                    sboxnet_set_sniffer_mode(req->wValue & SBOXNET_FLG_SNIFFER);
    118c:	f8 01       	movw	r30, r16
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	82 70       	andi	r24, 0x02	; 2
    1192:	0e 94 bb 01 	call	0x376	; 0x376 <sboxnet_set_sniffer_mode>
    1196:	78 c1       	rjmp	.+752    	; 0x1488 <usb_event_ep0_request+0x38e>
                } else {
                    if (g_sboxnet_flags & SBOXNET_FLG_ENABLED) {
    1198:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_sboxnet_flags>
    119c:	80 ff       	sbrs	r24, 0
    119e:	74 c1       	rjmp	.+744    	; 0x1488 <usb_event_ep0_request+0x38e>

// Sboxnet deinit

SBOXNET_SECTION __ATTR_NO_UNUSED_WARN 
static void sboxnet_deinit(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11a0:	8f b7       	in	r24, 0x3f	; 63
    11a2:	f8 94       	cli
        SBOXNET_VAR->state = SBOXNET_STATE_NONE;
    11a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_sboxnet>
#ifdef __AVR_XMEGA__
        SBOXNET_USART_ID.CTRLB = Bsv(USART_RXEN_bp,0)|Bsv(USART_TXEN_bp,0)|Bsv(USART_CLK2X_bp,0)|Bsv(USART_MPCM_bp,0);
        SBOXNET_USART_ID.CTRLA = USART_RXCINTLVL_OFF_gc|USART_TXCINTLVL_OFF_gc|USART_DREINTLVL_OFF_gc;
#else // __AVR_XMEGA__
        __UCSRB = Bsv(__RXCIE,0)|Bsv(__TXCIE,0)|Bsv(__UDRIE,0)|Bsv(__RXEN,0)|Bsv(__TXEN,0)|Bsv(__UCSZ2,1)|Bsv(__TXB8,0); // 9 chars
    11a8:	94 e0       	ldi	r25, 0x04	; 4
    11aa:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
#endif // __AVR_XMEGA__
        
        port_dirin(SBOXNET_RxD_PORT, Bit(SBOXNET_RxD_BIT));
    11ae:	52 98       	cbi	0x0a, 2	; 10
        port_dirin(SBOXNET_TxD_PORT, Bit(SBOXNET_TxD_BIT));
    11b0:	53 98       	cbi	0x0a, 3	; 10
        port_pullup_on(SBOXNET_TxD_PORT, Bit(SBOXNET_TxD_BIT));
    11b2:	5b 9a       	sbi	0x0b, 3	; 11
        SBOXNET_RxD_PORT.SBOXNET_HW_SENSOR_INTMASK = 0;
#else
#if SBOXNET_USE_HW_SENSOR_PINCH == 1
        clrbit(SBOXNET_HW_SENSOR_PCMSK, SBOXNET_HW_SENSOR_PCINT_BIT);        
#else
        clrbit(SBOXNET_HW_SENSOR_EIMSK, SBOXNET_HW_SENSOR_IE_BIT); // disable interrupt
    11b4:	ea 98       	cbi	0x1d, 2	; 29
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b6:	8f bf       	out	0x3f, r24	; 63
                        sboxnet_deinit();
                        g_sboxnet_flags &= ~SBOXNET_FLG_ENABLED;
    11b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_sboxnet_flags>
    11bc:	8e 7f       	andi	r24, 0xFE	; 254
    11be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_sboxnet_flags>
    11c2:	62 c1       	rjmp	.+708    	; 0x1488 <usb_event_ep0_request+0x38e>
    11c4:	e8 ee       	ldi	r30, 0xE8	; 232
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	80 83       	st	Z, r24
            return 0;
        }
        
        case CMD_SBOXNET_GET_STATUS: {            
            usb_ep_clearSETUP();
            uint8_t st = get_status();
    11ce:	0e 94 c9 01 	call	0x392	; 0x392 <get_status>
    11d2:	89 83       	std	Y+1, r24	; 0x01
            usb_ep_send_control_data(&st, 1, USB_MEM_SRC_RAM, req->wLength);
    11d4:	f8 01       	movw	r30, r16
    11d6:	26 81       	ldd	r18, Z+6	; 0x06
    11d8:	37 81       	ldd	r19, Z+7	; 0x07
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	ce 01       	movw	r24, r28
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	52 c1       	rjmp	.+676    	; 0x1490 <usb_event_ep0_request+0x396>
    11ec:	e8 ee       	ldi	r30, 0xE8	; 232
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	87 7f       	andi	r24, 0xF7	; 247
    11f4:	80 83       	st	Z, r24
        }
        
        case CMD_SBOXNET_RECEIVE: {
            usb_ep_clearSETUP();
 
            uint16_t wlen = req->wLength;
    11f6:	fd 01       	movw	r30, r26
    11f8:	e6 80       	ldd	r14, Z+6	; 0x06
    11fa:	f7 80       	ldd	r15, Z+7	; 0x07
            uint8_t usbrc = 0;
            struct {
                uint8_t status;
            } buf;
            if (wlen >= sizeof(buf)) {
    11fc:	e1 14       	cp	r14, r1
    11fe:	f1 04       	cpc	r15, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <usb_event_ep0_request+0x10a>
    1202:	50 c0       	rjmp	.+160    	; 0x12a4 <usb_event_ep0_request+0x1aa>
                wlen -= sizeof(buf);
                buf.status = get_status();
    1204:	0e 94 c9 01 	call	0x392	; 0x392 <get_status>
    1208:	28 96       	adiw	r28, 0x08	; 8
    120a:	8f af       	std	Y+63, r24	; 0x3f
    120c:	28 97       	sbiw	r28, 0x08	; 8
                usbrc = usb_ep_send_control_data_chunk(&buf, sizeof(buf), USB_MEM_SRC_RAM);
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	89 5b       	subi	r24, 0xB9	; 185
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	0e 94 4a 06 	call	0xc94	; 0xc94 <usb_ep_send_control_data_chunk>
            }
            
            if (usbrc == USB_RC_OK) {
    121e:	81 11       	cpse	r24, r1
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <usb_event_ep0_request+0x1ae>
            uint8_t usbrc = 0;
            struct {
                uint8_t status;
            } buf;
            if (wlen >= sizeof(buf)) {
                wlen -= sizeof(buf);
    1222:	f1 e0       	ldi	r31, 0x01	; 1
    1224:	ef 1a       	sub	r14, r31
    1226:	f1 08       	sbc	r15, r1
                buf.status = get_status();
                usbrc = usb_ep_send_control_data_chunk(&buf, sizeof(buf), USB_MEM_SRC_RAM);
            }
            
            if (usbrc == USB_RC_OK) {
                while (wlen > 1) {
    1228:	22 e0       	ldi	r18, 0x02	; 2
    122a:	e2 16       	cp	r14, r18
    122c:	f1 04       	cpc	r15, r1
    122e:	d0 f1       	brcs	.+116    	; 0x12a4 <usb_event_ep0_request+0x1aa>
#define LED_MSG_READ  6
#define LED_MSG_WRITE 7

static void trigger_led_msg_read(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        g_timer_led_msg_read = 100/TC1_PERIOD_MS;
    1230:	13 e0       	ldi	r17, 0x03	; 3
                    struct {
                        int8_t msglen;
                        struct sboxnet_msg_max msg;
                    } buf;
                    uint8_t maxs = sizeof(buf.msg);
                    if (wlen < 257) {
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	e8 16       	cp	r14, r24
    1236:	f8 06       	cpc	r15, r24
    1238:	18 f4       	brcc	.+6      	; 0x1240 <usb_event_ep0_request+0x146>
                        maxs = (uint8_t)(wlen - 1);
    123a:	6f ef       	ldi	r22, 0xFF	; 255
    123c:	6e 0d       	add	r22, r14
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <usb_event_ep0_request+0x148>
                while (wlen > 1) {
                    struct {
                        int8_t msglen;
                        struct sboxnet_msg_max msg;
                    } buf;
                    uint8_t maxs = sizeof(buf.msg);
    1240:	65 e4       	ldi	r22, 0x45	; 69
                    if (wlen < 257) {
                        maxs = (uint8_t)(wlen - 1);
                    }
                    buf.msglen = sboxnet_receive_msg(&buf.msg.msgh, maxs);
    1242:	ce 01       	movw	r24, r28
    1244:	02 96       	adiw	r24, 0x02	; 2
    1246:	0e 94 34 04 	call	0x868	; 0x868 <sboxnet_receive_msg>
    124a:	08 2f       	mov	r16, r24
    124c:	89 83       	std	Y+1, r24	; 0x01
                    if (buf.msglen > 0) {
    124e:	18 16       	cp	r1, r24
    1250:	a4 f4       	brge	.+40     	; 0x127a <usb_event_ep0_request+0x180>
#define LED_ACTIVE    5
#define LED_MSG_READ  6
#define LED_MSG_WRITE 7

static void trigger_led_msg_read(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1252:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1254:	f8 94       	cli
        g_timer_led_msg_read = 100/TC1_PERIOD_MS;
    1256:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <g_timer_led_msg_read>
        setbit(PORTB, LED_MSG_READ);
    125a:	2e 9a       	sbi	0x05, 6	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    125c:	8f bf       	out	0x3f, r24	; 63
                    }
                    buf.msglen = sboxnet_receive_msg(&buf.msg.msgh, maxs);
                    if (buf.msglen > 0) {
                        wlen -= (buf.msglen + 1);
                        trigger_led_msg_read();
                        usbrc = usb_ep_send_control_data_chunk(&buf, buf.msglen + 1, USB_MEM_SRC_RAM);
    125e:	69 81       	ldd	r22, Y+1	; 0x01
    1260:	06 2e       	mov	r0, r22
    1262:	00 0c       	add	r0, r0
    1264:	77 0b       	sbc	r23, r23
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 4a 06 	call	0xc94	; 0xc94 <usb_ep_send_control_data_chunk>
                    } else {
                        usbrc = usb_ep_send_control_data_chunk(&buf.msglen, 1, USB_MEM_SRC_RAM);
                        break;
                    }
                    if (usbrc != USB_RC_OK) {
    1274:	88 23       	and	r24, r24
    1276:	59 f0       	breq	.+22     	; 0x128e <usb_event_ep0_request+0x194>
    1278:	17 c0       	rjmp	.+46     	; 0x12a8 <usb_event_ep0_request+0x1ae>
                    if (buf.msglen > 0) {
                        wlen -= (buf.msglen + 1);
                        trigger_led_msg_read();
                        usbrc = usb_ep_send_control_data_chunk(&buf, buf.msglen + 1, USB_MEM_SRC_RAM);
                    } else {
                        usbrc = usb_ep_send_control_data_chunk(&buf.msglen, 1, USB_MEM_SRC_RAM);
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	0e 94 4a 06 	call	0xc94	; 0xc94 <usb_ep_send_control_data_chunk>
                    if (usbrc != USB_RC_OK) {
                        break;
                    }
                }
            }
            if (usbrc == USB_RC_OK) {
    1288:	88 23       	and	r24, r24
    128a:	61 f0       	breq	.+24     	; 0x12a4 <usb_event_ep0_request+0x1aa>
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <usb_event_ep0_request+0x1ae>
                    if (wlen < 257) {
                        maxs = (uint8_t)(wlen - 1);
                    }
                    buf.msglen = sboxnet_receive_msg(&buf.msg.msgh, maxs);
                    if (buf.msglen > 0) {
                        wlen -= (buf.msglen + 1);
    128e:	e0 1a       	sub	r14, r16
    1290:	f1 08       	sbc	r15, r1
    1292:	07 fd       	sbrc	r16, 7
    1294:	f3 94       	inc	r15
    1296:	e1 e0       	ldi	r30, 0x01	; 1
    1298:	ee 1a       	sub	r14, r30
    129a:	f1 08       	sbc	r15, r1
                buf.status = get_status();
                usbrc = usb_ep_send_control_data_chunk(&buf, sizeof(buf), USB_MEM_SRC_RAM);
            }
            
            if (usbrc == USB_RC_OK) {
                while (wlen > 1) {
    129c:	f2 e0       	ldi	r31, 0x02	; 2
    129e:	ef 16       	cp	r14, r31
    12a0:	f1 04       	cpc	r15, r1
    12a2:	38 f6       	brcc	.-114    	; 0x1232 <usb_event_ep0_request+0x138>
                        break;
                    }
                }
            }
            if (usbrc == USB_RC_OK) {
                usb_ep_send_control_data_finish();
    12a4:	0e 94 d7 06 	call	0xdae	; 0xdae <usb_ep_send_control_data_finish>
            }
            return 0;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	f2 c0       	rjmp	.+484    	; 0x1490 <usb_event_ep0_request+0x396>
    12ac:	e8 ee       	ldi	r30, 0xE8	; 232
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	87 7f       	andi	r24, 0xF7	; 247
    12b4:	80 83       	st	Z, r24
        
        case CMD_SBOXNET_TRANSMIT: {            
            usb_ep_clearSETUP();
            struct sboxnet_msg_max msg;
            uint16_t readb;
            usb_ep_recv_control_data(&msg, &readb, minvalof(req->wLength,sizeof(msg)));
    12b6:	fd 01       	movw	r30, r26
    12b8:	46 81       	ldd	r20, Z+6	; 0x06
    12ba:	57 81       	ldd	r21, Z+7	; 0x07
    12bc:	46 34       	cpi	r20, 0x46	; 70
    12be:	51 05       	cpc	r21, r1
    12c0:	10 f0       	brcs	.+4      	; 0x12c6 <usb_event_ep0_request+0x1cc>
    12c2:	45 e4       	ldi	r20, 0x45	; 69
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	be 01       	movw	r22, r28
    12c8:	69 5b       	subi	r22, 0xB9	; 185
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	ce 01       	movw	r24, r28
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <usb_ep_recv_control_data>
            if (readb >= SBOXNET_MSG_HEADER_LEN) {
    12d4:	29 96       	adiw	r28, 0x09	; 9
    12d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12da:	29 97       	sbiw	r28, 0x09	; 9
    12dc:	05 97       	sbiw	r24, 0x05	; 5
    12de:	f8 f0       	brcs	.+62     	; 0x131e <usb_event_ep0_request+0x224>
                if (sboxnet_can_send_msg(&msg.msgh)) {
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 8a 01 	call	0x314	; 0x314 <sboxnet_can_send_msg>
    12e8:	88 23       	and	r24, r24
    12ea:	99 f0       	breq	.+38     	; 0x1312 <usb_event_ep0_request+0x218>
        g_timer_led_msg_read = 100/TC1_PERIOD_MS;
        setbit(PORTB, LED_MSG_READ);
    }
}
static void trigger_led_msg_write(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ee:	f8 94       	cli
        g_timer_led_msg_write = 100/TC1_PERIOD_MS;
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
        setbit(PORTB, LED_MSG_WRITE);
    12f6:	2f 9a       	sbi	0x05, 7	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12f8:	8f bf       	out	0x3f, r24	; 63
            uint16_t readb;
            usb_ep_recv_control_data(&msg, &readb, minvalof(req->wLength,sizeof(msg)));
            if (readb >= SBOXNET_MSG_HEADER_LEN) {
                if (sboxnet_can_send_msg(&msg.msgh)) {
                    trigger_led_msg_write();
                    if (sboxnet_send_msg(&msg.msgh) != 0)
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 ca 04 	call	0x994	; 0x994 <sboxnet_send_msg>
    1302:	88 23       	and	r24, r24
    1304:	89 f0       	breq	.+34     	; 0x1328 <usb_event_ep0_request+0x22e>
                        g_sboxnet_status |= SBOXNET_STATUS_TX_XERR;
    1306:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_sboxnet_status>
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_sboxnet_status>
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <usb_event_ep0_request+0x22e>
                } else {
                    g_sboxnet_status |= SBOXNET_STATUS_TX_OVF;
    1312:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_sboxnet_status>
    1316:	80 64       	ori	r24, 0x40	; 64
    1318:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_sboxnet_status>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <usb_event_ep0_request+0x22e>
                }
            } else {
                g_sboxnet_status |= SBOXNET_STATUS_TX_ERR;
    131e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_sboxnet_status>
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_sboxnet_status>
            }
            return 0;
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	b2 c0       	rjmp	.+356    	; 0x1490 <usb_event_ep0_request+0x396>
    132c:	e8 ee       	ldi	r30, 0xE8	; 232
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	87 7f       	andi	r24, 0xF7	; 247
    1334:	80 83       	st	Z, r24
        }
        
        case CMD_SBOXNET_GET_DBGINFO: {
            usb_ep_clearSETUP();
            usb_ep_send_control_data(&g_sboxnet.debug, sizeof(struct sboxnet_debug_info), USB_MEM_SRC_RAM, req->wLength);
    1336:	fd 01       	movw	r30, r26
    1338:	26 81       	ldd	r18, Z+6	; 0x06
    133a:	37 81       	ldd	r19, Z+7	; 0x07
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	66 e2       	ldi	r22, 0x26	; 38
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	85 e1       	ldi	r24, 0x15	; 21
    1344:	93 e0       	ldi	r25, 0x03	; 3
    1346:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	a1 c0       	rjmp	.+322    	; 0x1490 <usb_event_ep0_request+0x396>
    134e:	e8 ee       	ldi	r30, 0xE8	; 232
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	80 83       	st	Z, r24
        }

        case CMD_SBOXNET_GET_DBGSTATE: {
            usb_ep_clearSETUP();
            usb_ep_send_control_data(&g_sboxnet, 9, USB_MEM_SRC_RAM, req->wLength);
    1358:	fd 01       	movw	r30, r26
    135a:	26 81       	ldd	r18, Z+6	; 0x06
    135c:	37 81       	ldd	r19, Z+7	; 0x07
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	69 e0       	ldi	r22, 0x09	; 9
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 c0       	rjmp	.+288    	; 0x1490 <usb_event_ep0_request+0x396>
    1370:	e8 ee       	ldi	r30, 0xE8	; 232
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	87 7f       	andi	r24, 0xF7	; 247
    1378:	80 83       	st	Z, r24
        }
        
        case CMD_SBOXNET_GET_DBGRECVBUF: {
            usb_ep_clearSETUP();
            usb_ep_send_control_data(&g_sboxnet.recv_buf, sizeof(g_sboxnet.recv_buf), USB_MEM_SRC_RAM, req->wLength);
    137a:	fd 01       	movw	r30, r26
    137c:	26 81       	ldd	r18, Z+6	; 0x06
    137e:	37 81       	ldd	r19, Z+7	; 0x07
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	62 e0       	ldi	r22, 0x02	; 2
    1384:	71 e0       	ldi	r23, 0x01	; 1
    1386:	81 e1       	ldi	r24, 0x11	; 17
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	7f c0       	rjmp	.+254    	; 0x1490 <usb_event_ep0_request+0x396>
    1392:	e8 ee       	ldi	r30, 0xE8	; 232
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	87 7f       	andi	r24, 0xF7	; 247
    139a:	80 83       	st	Z, r24
        }
        case CMD_SBOXNET_GET_DBGTMITBUF: {
            usb_ep_clearSETUP();
            usb_ep_send_control_data(&g_sboxnet.tmit_buf, sizeof(g_sboxnet.tmit_buf), USB_MEM_SRC_RAM, req->wLength);
    139c:	fd 01       	movw	r30, r26
    139e:	26 81       	ldd	r18, Z+6	; 0x06
    13a0:	37 81       	ldd	r19, Z+7	; 0x07
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	83 e1       	ldi	r24, 0x13	; 19
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	6e c0       	rjmp	.+220    	; 0x1490 <usb_event_ep0_request+0x396>
    13b4:	e8 ee       	ldi	r30, 0xE8	; 232
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	87 7f       	andi	r24, 0xF7	; 247
    13bc:	80 83       	st	Z, r24
            usb_ep_clearSETUP();
            struct {
                uint16_t size;
                uint16_t free;
            } buf;
            buf.size = stack_size();
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	94 e0       	ldi	r25, 0x04	; 4
    13c2:	88 54       	subi	r24, 0x48	; 72
    13c4:	93 40       	sbci	r25, 0x03	; 3
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01

#define STACK_MAGIC 0xa5

static uint16_t stack_free(void) {
    uint8_t* p = &_end;
    while (p < &__stack) {
    13ca:	88 e4       	ldi	r24, 0x48	; 72
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	94 40       	sbci	r25, 0x04	; 4
    13d2:	90 f4       	brcc	.+36     	; 0x13f8 <usb_event_ep0_request+0x2fe>
        if (*p != STACK_MAGIC) {
    13d4:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__bss_end>
    13d8:	85 3a       	cpi	r24, 0xA5	; 165
    13da:	89 f4       	brne	.+34     	; 0x13fe <usb_event_ep0_request+0x304>
    13dc:	89 e4       	ldi	r24, 0x49	; 73
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	4f ef       	ldi	r20, 0xFF	; 255
    13e2:	54 e0       	ldi	r21, 0x04	; 4
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <usb_event_ep0_request+0x2f4>
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	20 81       	ld	r18, Z
    13ea:	25 3a       	cpi	r18, 0xA5	; 165
    13ec:	51 f4       	brne	.+20     	; 0x1402 <usb_event_ep0_request+0x308>
            break;
        }
        p++;
    13ee:	fc 01       	movw	r30, r24

#define STACK_MAGIC 0xa5

static uint16_t stack_free(void) {
    uint8_t* p = &_end;
    while (p < &__stack) {
    13f0:	48 17       	cp	r20, r24
    13f2:	59 07       	cpc	r21, r25
    13f4:	c1 f7       	brne	.-16     	; 0x13e6 <usb_event_ep0_request+0x2ec>
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <usb_event_ep0_request+0x308>
extern uint8_t __stack;

#define STACK_MAGIC 0xa5

static uint16_t stack_free(void) {
    uint8_t* p = &_end;
    13f8:	e8 e4       	ldi	r30, 0x48	; 72
    13fa:	f3 e0       	ldi	r31, 0x03	; 3
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <usb_event_ep0_request+0x308>
    13fe:	e8 e4       	ldi	r30, 0x48	; 72
    1400:	f3 e0       	ldi	r31, 0x03	; 3
            struct {
                uint16_t size;
                uint16_t free;
            } buf;
            buf.size = stack_size();
            buf.free = stack_free();
    1402:	e8 54       	subi	r30, 0x48	; 72
    1404:	f3 40       	sbci	r31, 0x03	; 3
    1406:	fc 83       	std	Y+4, r31	; 0x04
    1408:	eb 83       	std	Y+3, r30	; 0x03
            usb_ep_send_control_data(&buf, sizeof(buf), USB_MEM_SRC_RAM, req->wLength);
    140a:	f8 01       	movw	r30, r16
    140c:	26 81       	ldd	r18, Z+6	; 0x06
    140e:	37 81       	ldd	r19, Z+7	; 0x07
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	64 e0       	ldi	r22, 0x04	; 4
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
            return 0;   
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	37 c0       	rjmp	.+110    	; 0x1490 <usb_event_ep0_request+0x396>
    1422:	e8 ee       	ldi	r30, 0xE8	; 232
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	87 7f       	andi	r24, 0xF7	; 247
    142a:	80 83       	st	Z, r24
            usb_ep_clearSETUP();
            struct {
                struct usb_string_desc desc;
                wchar_t str[SERIALNUMBER_SIZE];
            } buf;
            memset(&buf, 0xff, sizeof(buf));
    142c:	42 e4       	ldi	r20, 0x42	; 66
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	6f ef       	ldi	r22, 0xFF	; 255
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	0e 94 25 0c 	call	0x184a	; 0x184a <memset>
            uint16_t readb;
            usb_ep_recv_control_data(&buf.str, &readb, minvalof(req->wLength,sizeof(buf.str)));
    143c:	f8 01       	movw	r30, r16
    143e:	46 81       	ldd	r20, Z+6	; 0x06
    1440:	57 81       	ldd	r21, Z+7	; 0x07
    1442:	41 34       	cpi	r20, 0x41	; 65
    1444:	51 05       	cpc	r21, r1
    1446:	10 f0       	brcs	.+4      	; 0x144c <usb_event_ep0_request+0x352>
    1448:	40 e4       	ldi	r20, 0x40	; 64
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	be 01       	movw	r22, r28
    144e:	69 5b       	subi	r22, 0xB9	; 185
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	ce 01       	movw	r24, r28
    1454:	03 96       	adiw	r24, 0x03	; 3
    1456:	0e 94 ad 07 	call	0xf5a	; 0xf5a <usb_ep_recv_control_data>
            buf.desc.bLength = sizeof(struct usb_string_desc)+(uint8_t)readb;
    145a:	29 96       	adiw	r28, 0x09	; 9
    145c:	4e ad       	ldd	r20, Y+62	; 0x3e
    145e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1460:	29 97       	sbiw	r28, 0x09	; 9
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	84 0f       	add	r24, r20
    1466:	89 83       	std	Y+1, r24	; 0x01
            buf.desc.bDescriptorType = USB_DESC_STRING;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	8a 83       	std	Y+2, r24	; 0x02
            eeprom_update_block(&buf, &eeprom.serialnumber, sizeof(struct usb_string_desc)+readb);
    146c:	4e 5f       	subi	r20, 0xFE	; 254
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 3a 0c 	call	0x1874	; 0x1874 <eeprom_update_block>
            return 0;
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <usb_event_ep0_request+0x396>
    return st;
}

uint8_t usb_event_ep0_request(struct usb_device_request* req) {
    if ( (req->bmRequestType & 0x7f) != (USB_REQTYPE_TYP_VENDOR|USB_REQTYPE_REC_INTERFACE) )
        return 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <usb_event_ep0_request+0x396>
        }
#endif
        
        default: break;
    }
    return 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <usb_event_ep0_request+0x396>
    1488:	ff be       	out	0x3f, r15	; 63
                        sboxnet_deinit();
                        g_sboxnet_flags &= ~SBOXNET_FLG_ENABLED;
                    }
                }
            }
            usb_ep_send_zlp();
    148a:	0e 94 26 06 	call	0xc4c	; 0xc4c <usb_ep_send_zlp>
            return 0;
    148e:	80 e0       	ldi	r24, 0x00	; 0
#endif
        
        default: break;
    }
    return 1;
}
    1490:	c8 5b       	subi	r28, 0xB8	; 184
    1492:	df 4f       	sbci	r29, 0xFF	; 255
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	08 95       	ret

000014ac <usb_ep0_task>:
    }
    return 1;
}


void usb_ep0_task(void) {
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	28 97       	sbiw	r28, 0x08	; 8
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    struct usb_device_request req;
    
    UENUM = 0;
    14cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
uint8_t usb_event_ep0_request(struct usb_device_request*);



static inline uint8_t usb_ep_isSETUP(void) {
    return bit_is_set(UEINTX, RXSTPI);
    14d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    if (usb_ep_isSETUP()) { // setup packet received
    14d4:	83 ff       	sbrs	r24, 3
    14d6:	1f c1       	rjmp	.+574    	; 0x1716 <usb_ep0_task+0x26a>
        // read packet
        usb_ep_read_data(&req, sizeof(req));
    14d8:	68 e0       	ldi	r22, 0x08	; 8
    14da:	ce 01       	movw	r24, r28
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	0e 94 0c 06 	call	0xc18	; 0xc18 <usb_ep_read_data>
        DHEXB(req.bmRequestType);
        DHEXB(req.bRequest);
        DPSTR(",V"); DHEXW(req.wValue);
        DPSTR(",I"); DHEXW(req.wIndex);
        DPSTR(",L"); DHEXW(req.wLength);
        if ((req.bmRequestType & USB_REQTYPE_TYP_mask) == USB_REQTYPE_TYP_STANDARD) {
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	98 2f       	mov	r25, r24
    14e6:	90 76       	andi	r25, 0x60	; 96
    14e8:	09 f0       	breq	.+2      	; 0x14ec <usb_ep0_task+0x40>
    14ea:	00 c1       	rjmp	.+512    	; 0x16ec <usb_ep0_task+0x240>
            switch(req.bRequest) {
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	96 30       	cpi	r25, 0x06	; 6
    14f0:	11 f1       	breq	.+68     	; 0x1536 <usb_ep0_task+0x8a>
    14f2:	20 f4       	brcc	.+8      	; 0x14fc <usb_ep0_task+0x50>
    14f4:	95 30       	cpi	r25, 0x05	; 5
    14f6:	09 f4       	brne	.+2      	; 0x14fa <usb_ep0_task+0x4e>
    14f8:	ac c0       	rjmp	.+344    	; 0x1652 <usb_ep0_task+0x1a6>
    14fa:	f8 c0       	rjmp	.+496    	; 0x16ec <usb_ep0_task+0x240>
    14fc:	98 30       	cpi	r25, 0x08	; 8
    14fe:	21 f0       	breq	.+8      	; 0x1508 <usb_ep0_task+0x5c>
    1500:	99 30       	cpi	r25, 0x09	; 9
    1502:	09 f4       	brne	.+2      	; 0x1506 <usb_ep0_task+0x5a>
    1504:	cb c0       	rjmp	.+406    	; 0x169c <usb_ep0_task+0x1f0>
    1506:	f2 c0       	rjmp	.+484    	; 0x16ec <usb_ep0_task+0x240>
                case USB_REQUEST_CLEAR_FEATURE:
                    // not supported
                    break;
                    
                case USB_REQUEST_GET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    1508:	80 38       	cpi	r24, 0x80	; 128
    150a:	09 f0       	breq	.+2      	; 0x150e <usb_ep0_task+0x62>
    150c:	ef c0       	rjmp	.+478    	; 0x16ec <usb_ep0_task+0x240>

//------------------------------------------------------------

static uint8_t usb_ep0_get_configuration(void) {
    struct usb_dev* dev = &g_usb_dev;
    if (dev->state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED)) {
    150e:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    1512:	88 71       	andi	r24, 0x18	; 24
    1514:	09 f4       	brne	.+2      	; 0x1518 <usb_ep0_task+0x6c>
    1516:	ea c0       	rjmp	.+468    	; 0x16ec <usb_ep0_task+0x240>
}
static inline void usb_ep_clearSETUP(void) {
    clrbit(UEINTX, RXSTPI);
    1518:	e8 ee       	ldi	r30, 0xE8	; 232
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	80 83       	st	Z, r24
        usb_ep_clearSETUP();
        usb_ep_send_control_data(&dev->cur_config, 1, USB_MEM_SRC_RAM, 1);
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	8c e3       	ldi	r24, 0x3C	; 60
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
    1534:	ee c0       	rjmp	.+476    	; 0x1712 <usb_ep0_task+0x266>
                        rc = usb_ep0_get_configuration();
                    }
                    break;
                
                case USB_REQUEST_GET_DESCRIPTOR:
                    if (req.bmRequestType == (USB_REQTYPE_DEV2HOST|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    1536:	80 38       	cpi	r24, 0x80	; 128
    1538:	09 f0       	breq	.+2      	; 0x153c <usb_ep0_task+0x90>
    153a:	d8 c0       	rjmp	.+432    	; 0x16ec <usb_ep0_task+0x240>
    return 1;
}

static uint8_t usb_ep0_get_descriptor(struct usb_device_request* req) {
    struct usb_dev* dev = &g_usb_dev;
    switch (highbyte(req->wValue)) {
    153c:	0b 81       	ldd	r16, Y+3	; 0x03
    153e:	1c 81       	ldd	r17, Y+4	; 0x04
    1540:	81 2f       	mov	r24, r17
    1542:	99 27       	eor	r25, r25
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	b9 f0       	breq	.+46     	; 0x1578 <usb_ep0_task+0xcc>
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	39 f1       	breq	.+78     	; 0x159e <usb_ep0_task+0xf2>
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	09 f0       	breq	.+2      	; 0x1556 <usb_ep0_task+0xaa>
    1554:	cb c0       	rjmp	.+406    	; 0x16ec <usb_ep0_task+0x240>
    1556:	e8 ee       	ldi	r30, 0xE8	; 232
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	87 7f       	andi	r24, 0xF7	; 247
    155e:	80 83       	st	Z, r24
        case USB_DESC_DEVICE:
        {
            usb_ep_clearSETUP();
            usb_ep_send_control_data(dev->pdesc_dev, sizeof(struct usb_device_desc), dev->desc_dtype, req->wLength);
    1560:	2f 81       	ldd	r18, Y+7	; 0x07
    1562:	38 85       	ldd	r19, Y+8	; 0x08
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f3 e0       	ldi	r31, 0x03	; 3
    1568:	44 85       	ldd	r20, Z+12	; 0x0c
    156a:	62 e1       	ldi	r22, 0x12	; 18
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
    1576:	cd c0       	rjmp	.+410    	; 0x1712 <usb_ep0_task+0x266>
        }
        
        case USB_DESC_CONFIGURATION:
        {
            uint8_t idx = lowbyte(req->wValue);
            if (idx == 0) {
    1578:	01 11       	cpse	r16, r1
    157a:	b8 c0       	rjmp	.+368    	; 0x16ec <usb_ep0_task+0x240>
    157c:	e8 ee       	ldi	r30, 0xE8	; 232
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	80 83       	st	Z, r24
                usb_ep_clearSETUP();
                usb_ep_send_control_data(dev->pdesc_config, dev->desc_config_size, dev->desc_dtype, req->wLength);
    1586:	2f 81       	ldd	r18, Y+7	; 0x07
    1588:	38 85       	ldd	r19, Y+8	; 0x08
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f3 e0       	ldi	r31, 0x03	; 3
    158e:	66 81       	ldd	r22, Z+6	; 0x06
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	44 85       	ldd	r20, Z+12	; 0x0c
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	95 81       	ldd	r25, Z+5	; 0x05
    1598:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
    159c:	ba c0       	rjmp	.+372    	; 0x1712 <usb_ep0_task+0x266>
            break;
        }
            
        case USB_DESC_STRING:
        {   // ignore language
            uint8_t idx = lowbyte(req->wValue);
    159e:	f0 2e       	mov	r15, r16
            if (dev->get_string_func != NULL && (*dev->get_string_func)(req, idx) == 0) {
    15a0:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <g_usb_dev+0xa>
    15a4:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <g_usb_dev+0xb>
    15a8:	30 97       	sbiw	r30, 0x00	; 0
    15aa:	39 f0       	breq	.+14     	; 0x15ba <usb_ep0_task+0x10e>
    15ac:	60 2f       	mov	r22, r16
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	09 95       	icall
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <usb_ep0_task+0x10e>
    15b8:	ac c0       	rjmp	.+344    	; 0x1712 <usb_ep0_task+0x266>
                return 0;
            }
            if (idx < dev->desc_string_num) {
    15ba:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <g_usb_dev+0x9>
    15be:	f8 16       	cp	r15, r24
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <usb_ep0_task+0x118>
    15c2:	94 c0       	rjmp	.+296    	; 0x16ec <usb_ep0_task+0x240>
                const struct usb_string_desc* paddr;
                
                switch (dev->desc_dtype) {
    15c4:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <g_usb_dev+0xc>
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <usb_ep0_task+0x126>
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	71 f0       	breq	.+28     	; 0x15ec <usb_ep0_task+0x140>
    15d0:	1b c0       	rjmp	.+54     	; 0x1608 <usb_ep0_task+0x15c>
                    case USB_MEM_SRC_PROGMEM:
                        paddr = (const struct usb_string_desc*)pgm_read_word(dev->pdesc_string + idx);
    15d2:	c8 01       	movw	r24, r16
    15d4:	99 27       	eor	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <g_usb_dev+0x7>
    15de:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <g_usb_dev+0x8>
    15e2:	e8 0f       	add	r30, r24
    15e4:	f9 1f       	adc	r31, r25
    15e6:	05 91       	lpm	r16, Z+
    15e8:	14 91       	lpm	r17, Z
    15ea:	1a c0       	rjmp	.+52     	; 0x1620 <usb_ep0_task+0x174>
                        break;
                
                    case USB_MEM_SRC_EEPROM:
                        paddr = (const struct usb_string_desc*)eeprom_read_word((const uint16_t*)dev->pdesc_string + idx);
    15ec:	c8 01       	movw	r24, r16
    15ee:	99 27       	eor	r25, r25
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <g_usb_dev+0x7>
    15f8:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <g_usb_dev+0x8>
    15fc:	82 0f       	add	r24, r18
    15fe:	93 1f       	adc	r25, r19
    1600:	0e 94 34 0c 	call	0x1868	; 0x1868 <eeprom_read_word>
    1604:	8c 01       	movw	r16, r24
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <usb_ep0_task+0x174>
                        break;
                        
                    default:
                        paddr = (const struct usb_string_desc*)dev->pdesc_string[idx];
    1608:	c8 01       	movw	r24, r16
    160a:	99 27       	eor	r25, r25
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <g_usb_dev+0x7>
    1614:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <g_usb_dev+0x8>
    1618:	e8 0f       	add	r30, r24
    161a:	f9 1f       	adc	r31, r25
    161c:	00 81       	ld	r16, Z
    161e:	11 81       	ldd	r17, Z+1	; 0x01
                        break;
                }
                if (paddr != NULL) {
    1620:	01 15       	cp	r16, r1
    1622:	11 05       	cpc	r17, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <usb_ep0_task+0x17c>
    1626:	62 c0       	rjmp	.+196    	; 0x16ec <usb_ep0_task+0x240>
    1628:	e8 ee       	ldi	r30, 0xE8	; 232
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	87 7f       	andi	r24, 0xF7	; 247
    1630:	80 83       	st	Z, r24
                    usb_ep_clearSETUP();
                    usb_ep_send_control_data(paddr, usb_mem_read_byte(paddr, dev->desc_dtype), dev->desc_dtype, req->wLength);
    1632:	cf 80       	ldd	r12, Y+7	; 0x07
    1634:	d8 84       	ldd	r13, Y+8	; 0x08
    1636:	f0 90 47 03 	lds	r15, 0x0347	; 0x800347 <g_usb_dev+0xc>
    163a:	6f 2d       	mov	r22, r15
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 32 06 	call	0xc64	; 0xc64 <usb_mem_read_byte>
    1642:	68 2f       	mov	r22, r24
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	96 01       	movw	r18, r12
    1648:	4f 2d       	mov	r20, r15
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <usb_ep_send_control_data>
    1650:	60 c0       	rjmp	.+192    	; 0x1712 <usb_ep0_task+0x266>
                case USB_REQUEST_GET_STATUS:
                    // not supported
                    break;
                    
                case USB_REQUEST_SET_ADDRESS:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    1652:	81 11       	cpse	r24, r1
    1654:	4b c0       	rjmp	.+150    	; 0x16ec <usb_ep0_task+0x240>
}

static uint8_t usb_ep0_set_address(struct usb_device_request* req) {
    struct usb_dev* dev = &g_usb_dev;
    
    if (dev->state & (USB_DEVICE_STATE_DEFAULT|USB_DEVICE_STATE_ADDRESS)) {
    1656:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    165a:	8c 70       	andi	r24, 0x0C	; 12
    165c:	09 f4       	brne	.+2      	; 0x1660 <usb_ep0_task+0x1b4>
    165e:	46 c0       	rjmp	.+140    	; 0x16ec <usb_ep0_task+0x240>
        uint8_t addr = req->wValue & 0x007f;
    1660:	1b 81       	ldd	r17, Y+3	; 0x03
    1662:	1f 77       	andi	r17, 0x7F	; 127
    1664:	e8 ee       	ldi	r30, 0xE8	; 232
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	87 7f       	andi	r24, 0xF7	; 247
    166c:	80 83       	st	Z, r24
        usb_ep_clearSETUP();
        UDADDR = addr;
    166e:	0f 2e       	mov	r0, r31
    1670:	f3 ee       	ldi	r31, 0xE3	; 227
    1672:	ef 2e       	mov	r14, r31
    1674:	f1 2c       	mov	r15, r1
    1676:	f0 2d       	mov	r31, r0
    1678:	f7 01       	movw	r30, r14
    167a:	10 83       	st	Z, r17
        usb_ep_send_zlp();
    167c:	0e 94 26 06 	call	0xc4c	; 0xc4c <usb_ep_send_zlp>
        setbit(UDADDR, ADDEN);
    1680:	f7 01       	movw	r30, r14
    1682:	80 81       	ld	r24, Z
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	80 83       	st	Z, r24
        if (addr) {
    1688:	11 23       	and	r17, r17
    168a:	21 f0       	breq	.+8      	; 0x1694 <usb_ep0_task+0x1e8>
            dev->state = USB_DEVICE_STATE_ADDRESS;
    168c:	88 e0       	ldi	r24, 0x08	; 8
    168e:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <g_usb_dev>
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <usb_ep0_task+0x266>
        } else {
            dev->state = USB_DEVICE_STATE_DEFAULT;
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <g_usb_dev>
    169a:	3b c0       	rjmp	.+118    	; 0x1712 <usb_ep0_task+0x266>
                        rc = usb_ep0_set_address(&req);
                    }
                    break;
                
                case USB_REQUEST_SET_CONFIGURATION:
                    if (req.bmRequestType == (USB_REQTYPE_HOST2DEV|USB_REQTYPE_TYP_STANDARD|USB_REQTYPE_REC_DEVICE)) {
    169c:	81 11       	cpse	r24, r1
    169e:	26 c0       	rjmp	.+76     	; 0x16ec <usb_ep0_task+0x240>
    return 1;
}

static uint8_t usb_ep0_set_configuration(struct usb_device_request* req) {
    struct usb_dev* dev = &g_usb_dev;
    if (dev->state & (USB_DEVICE_STATE_ADDRESS|USB_DEVICE_STATE_CONFIGURED)) {
    16a0:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_usb_dev>
    16a4:	88 71       	andi	r24, 0x18	; 24
    16a6:	11 f1       	breq	.+68     	; 0x16ec <usb_ep0_task+0x240>
        uint8_t confnr = lowbyte(req->wValue);
    16a8:	1b 81       	ldd	r17, Y+3	; 0x03
        if (confnr == 0) {
    16aa:	11 11       	cpse	r17, r1
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <usb_ep0_task+0x20e>
            dev->state = USB_DEVICE_STATE_ADDRESS;
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f3 e0       	ldi	r31, 0x03	; 3
    16b2:	88 e0       	ldi	r24, 0x08	; 8
    16b4:	80 83       	st	Z, r24
            dev->cur_config = 0;
    16b6:	11 82       	std	Z+1, r1	; 0x01
    16b8:	11 c0       	rjmp	.+34     	; 0x16dc <usb_ep0_task+0x230>
            
        } else {
            uint8_t cnr = usb_mem_read_byte(&((struct usb_configuration_desc*)dev->pdesc_config)->bConfigurationValue, dev->desc_dtype);
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f3 e0       	ldi	r31, 0x03	; 3
    16be:	84 81       	ldd	r24, Z+4	; 0x04
    16c0:	95 81       	ldd	r25, Z+5	; 0x05
    16c2:	64 85       	ldd	r22, Z+12	; 0x0c
    16c4:	05 96       	adiw	r24, 0x05	; 5
    16c6:	0e 94 32 06 	call	0xc64	; 0xc64 <usb_mem_read_byte>
            if (confnr == cnr) {
    16ca:	18 13       	cpse	r17, r24
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <usb_ep0_task+0x240>
                dev->state = USB_DEVICE_STATE_CONFIGURED;
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f3 e0       	ldi	r31, 0x03	; 3
    16d2:	80 e1       	ldi	r24, 0x10	; 16
    16d4:	80 83       	st	Z, r24
                dev->cur_config = confnr;
    16d6:	11 83       	std	Z+1, r17	; 0x01

                usb_event_set_configuration();
                
                UENUM = 0; // switch back to ep0 !
    16d8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    16dc:	e8 ee       	ldi	r30, 0xE8	; 232
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	87 7f       	andi	r24, 0xF7	; 247
    16e4:	80 83       	st	Z, r24
            } else {
                return 1;
            }
        }
        usb_ep_clearSETUP();
        usb_ep_send_zlp();
    16e6:	0e 94 26 06 	call	0xc4c	; 0xc4c <usb_ep_send_zlp>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <usb_ep0_task+0x266>
                default:
                    break;
            }
        }
        if (rc != 0) {
            rc = usb_event_ep0_request(&req);
    16ec:	ce 01       	movw	r24, r28
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <usb_event_ep0_request>
        }
        
        UENUM = 0;
    16f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
        
        if (rc != 0) { // if SETUP packet was not processed, enter STALL
    16f8:	88 23       	and	r24, r24
    16fa:	69 f0       	breq	.+26     	; 0x1716 <usb_ep0_task+0x26a>
    16fc:	e8 ee       	ldi	r30, 0xE8	; 232
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	87 7f       	andi	r24, 0xF7	; 247
    1704:	80 83       	st	Z, r24
}
static inline void usb_ep_clearOUT(void) {
    clrbit(UEINTX, RXOUTI);
}
static inline void usb_ep_set_stall(void) {
    setbit(UECONX, STALLRQ);
    1706:	eb ee       	ldi	r30, 0xEB	; 235
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 62       	ori	r24, 0x20	; 32
    170e:	80 83       	st	Z, r24
            usb_ep_set_stall();
            DPSTR("np");
        }
        DPSTR("\n");
    }
}
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <usb_ep0_task+0x26a>
        }
        if (rc != 0) {
            rc = usb_event_ep0_request(&req);
        }
        
        UENUM = 0;
    1712:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
            usb_ep_set_stall();
            DPSTR("np");
        }
        DPSTR("\n");
    }
}
    1716:	28 96       	adiw	r28, 0x08	; 8
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	08 95       	ret

00001734 <__vector_18>:

uint8_t t1 = 0;
uint8_t t2 = 0;
ISR(TIMER1_OVF_vect) { // every 32.77ms
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	8f 93       	push	r24
    1740:	9f 93       	push	r25
    
    g_timer++;
    1742:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_timer>
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <g_timer>
	// startup test: blink leds
	static uint8_t rb = 1;
	switch (g_timer & 0xf) {// every 0.5s
    174c:	8f 70       	andi	r24, 0x0F	; 15
    174e:	e9 f5       	brne	.+122    	; 0x17ca <__vector_18+0x96>
		case 0: // every 0.5s
		{	
			rb <<= 1;
    1750:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1754:	88 0f       	add	r24, r24
    1756:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			switch(rb) {
    175a:	88 30       	cpi	r24, 0x08	; 8
    175c:	11 f1       	breq	.+68     	; 0x17a2 <__vector_18+0x6e>
    175e:	38 f4       	brcc	.+14     	; 0x176e <__vector_18+0x3a>
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	a9 f0       	breq	.+42     	; 0x178e <__vector_18+0x5a>
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	c1 f0       	breq	.+48     	; 0x1798 <__vector_18+0x64>
    1768:	81 11       	cpse	r24, r1
    176a:	2f c0       	rjmp	.+94     	; 0x17ca <__vector_18+0x96>
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <__vector_18+0x50>
    176e:	80 32       	cpi	r24, 0x20	; 32
    1770:	09 f1       	breq	.+66     	; 0x17b4 <__vector_18+0x80>
    1772:	18 f4       	brcc	.+6      	; 0x177a <__vector_18+0x46>
    1774:	80 31       	cpi	r24, 0x10	; 16
    1776:	c9 f0       	breq	.+50     	; 0x17aa <__vector_18+0x76>
    1778:	28 c0       	rjmp	.+80     	; 0x17ca <__vector_18+0x96>
    177a:	80 34       	cpi	r24, 0x40	; 64
    177c:	01 f1       	breq	.+64     	; 0x17be <__vector_18+0x8a>
    177e:	80 38       	cpi	r24, 0x80	; 128
    1780:	11 f1       	breq	.+68     	; 0x17c6 <__vector_18+0x92>
    1782:	23 c0       	rjmp	.+70     	; 0x17ca <__vector_18+0x96>
				case 0:
				{
					PORTB ^= Bit(LED_ACTIVE);
    1784:	95 b1       	in	r25, 0x05	; 5
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	89 27       	eor	r24, r25
    178a:	85 b9       	out	0x05, r24	; 5
					break;
    178c:	1e c0       	rjmp	.+60     	; 0x17ca <__vector_18+0x96>
				}
				case 0x02:
				{
					PORTB ^= Bit(LED_ACTIVE);
    178e:	95 b1       	in	r25, 0x05	; 5
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	89 27       	eor	r24, r25
    1794:	85 b9       	out	0x05, r24	; 5
					break;
    1796:	19 c0       	rjmp	.+50     	; 0x17ca <__vector_18+0x96>
				}
				case 0x04:
				{
					PORTB ^= Bit(LED_MSG_READ);
    1798:	95 b1       	in	r25, 0x05	; 5
    179a:	80 e4       	ldi	r24, 0x40	; 64
    179c:	89 27       	eor	r24, r25
    179e:	85 b9       	out	0x05, r24	; 5
					break;
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <__vector_18+0x96>
				}
				case 0x08:
				{
					PORTB ^= Bit(LED_MSG_WRITE);
    17a2:	85 b1       	in	r24, 0x05	; 5
    17a4:	80 58       	subi	r24, 0x80	; 128
    17a6:	85 b9       	out	0x05, r24	; 5
					break;
    17a8:	10 c0       	rjmp	.+32     	; 0x17ca <__vector_18+0x96>
				}
				case 0x10:
				{
					PORTB ^= Bit(LED_ACTIVE);
    17aa:	95 b1       	in	r25, 0x05	; 5
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	89 27       	eor	r24, r25
    17b0:	85 b9       	out	0x05, r24	; 5
					break;
    17b2:	0b c0       	rjmp	.+22     	; 0x17ca <__vector_18+0x96>
				}
				case 0x20:
				{
					PORTB ^= Bit(LED_MSG_READ);
    17b4:	95 b1       	in	r25, 0x05	; 5
    17b6:	80 e4       	ldi	r24, 0x40	; 64
    17b8:	89 27       	eor	r24, r25
    17ba:	85 b9       	out	0x05, r24	; 5
					break;
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <__vector_18+0x96>
				}
				case 0x40:
				{
					PORTB ^= Bit(LED_MSG_WRITE);
    17be:	85 b1       	in	r24, 0x05	; 5
    17c0:	80 58       	subi	r24, 0x80	; 128
    17c2:	85 b9       	out	0x05, r24	; 5
					break;
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__vector_18+0x96>
				}
				case 0x80:
				{
					rb = 0;
    17c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				PORTB ^= Bit(LED_MSG_WRITE);
			break;
		}
*/
	}
    if (g_timer_led_msg_read) {
    17ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_timer_led_msg_read>
    17ce:	88 23       	and	r24, r24
    17d0:	31 f0       	breq	.+12     	; 0x17de <__vector_18+0xaa>
        g_timer_led_msg_read--;
    17d2:	81 50       	subi	r24, 0x01	; 1
    17d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_timer_led_msg_read>
        if (g_timer_led_msg_read == 0)
    17d8:	81 11       	cpse	r24, r1
    17da:	01 c0       	rjmp	.+2      	; 0x17de <__vector_18+0xaa>
            clrbit(PORTB, LED_MSG_READ);
    17dc:	2e 98       	cbi	0x05, 6	; 5
    }

    if (g_timer_led_msg_write) {
    17de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    17e2:	88 23       	and	r24, r24
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <__vector_18+0xbe>
        g_timer_led_msg_write--;
    17e6:	81 50       	subi	r24, 0x01	; 1
    17e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
        if (g_timer_led_msg_write == 0)
    17ec:	81 11       	cpse	r24, r1
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <__vector_18+0xbe>
            clrbit(PORTB, LED_MSG_WRITE);
    17f0:	2f 98       	cbi	0x05, 7	; 5
    }
}
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <main>:
        eeprom_update_word((uint16_t*)&eeprom.serialnumber.str[0], 'x');
    }
}

int main(void) {
    cli();
    1800:	f8 94       	cli
    init_system();
    1802:	0e 94 df 01 	call	0x3be	; 0x3be <init_system>
        
    usb_init(&g_device_desc_P,
    1806:	cc 24       	eor	r12, r12
    1808:	c3 94       	inc	r12
    180a:	0f 2e       	mov	r0, r31
    180c:	fb e1       	ldi	r31, 0x1B	; 27
    180e:	ef 2e       	mov	r14, r31
    1810:	f7 e0       	ldi	r31, 0x07	; 7
    1812:	ff 2e       	mov	r15, r31
    1814:	f0 2d       	mov	r31, r0
    1816:	03 e0       	ldi	r16, 0x03	; 3
    1818:	2c eb       	ldi	r18, 0xBC	; 188
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	42 e1       	ldi	r20, 0x12	; 18
    181e:	66 e2       	ldi	r22, 0x26	; 38
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	88 e3       	ldi	r24, 0x38	; 56
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 43 08 	call	0x1086	; 0x1086 <usb_init>
             &g_config_1_P, sizeof(g_config_1_P),
             g_strings_P, NUM_USB_STRINGS, &get_string,
             USB_MEM_SRC_PROGMEM);

    set_sleep_mode(SLEEP_MODE_IDLE);
    182a:	83 b7       	in	r24, 0x33	; 51
    182c:	81 7f       	andi	r24, 0xF1	; 241
    182e:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    1830:	83 b7       	in	r24, 0x33	; 51
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	83 bf       	out	0x33, r24	; 51
    sei();
    1836:	78 94       	sei
    
    while(1) {
        usb_ep0_task();
    1838:	0e 94 56 0a 	call	0x14ac	; 0x14ac <usb_ep0_task>
    183c:	fd cf       	rjmp	.-6      	; 0x1838 <main+0x38>

0000183e <__tablejump2__>:
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	05 90       	lpm	r0, Z+
    1844:	f4 91       	lpm	r31, Z
    1846:	e0 2d       	mov	r30, r0
    1848:	09 94       	ijmp

0000184a <memset>:
    184a:	dc 01       	movw	r26, r24
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <memset+0x6>
    184e:	6d 93       	st	X+, r22
    1850:	41 50       	subi	r20, 0x01	; 1
    1852:	50 40       	sbci	r21, 0x00	; 0
    1854:	e0 f7       	brcc	.-8      	; 0x184e <memset+0x4>
    1856:	08 95       	ret

00001858 <eeprom_read_byte>:
    1858:	f9 99       	sbic	0x1f, 1	; 31
    185a:	fe cf       	rjmp	.-4      	; 0x1858 <eeprom_read_byte>
    185c:	92 bd       	out	0x22, r25	; 34
    185e:	81 bd       	out	0x21, r24	; 33
    1860:	f8 9a       	sbi	0x1f, 0	; 31
    1862:	99 27       	eor	r25, r25
    1864:	80 b5       	in	r24, 0x20	; 32
    1866:	08 95       	ret

00001868 <eeprom_read_word>:
    1868:	a8 e1       	ldi	r26, 0x18	; 24
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	42 e0       	ldi	r20, 0x02	; 2
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <eeprom_read_blraw>

00001874 <eeprom_update_block>:
    1874:	dc 01       	movw	r26, r24
    1876:	a4 0f       	add	r26, r20
    1878:	b5 1f       	adc	r27, r21
    187a:	41 50       	subi	r20, 0x01	; 1
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	48 f0       	brcs	.+18     	; 0x1892 <eeprom_update_block+0x1e>
    1880:	cb 01       	movw	r24, r22
    1882:	84 0f       	add	r24, r20
    1884:	95 1f       	adc	r25, r21
    1886:	2e 91       	ld	r18, -X
    1888:	0e 94 4b 0c 	call	0x1896	; 0x1896 <eeprom_update_r18>
    188c:	41 50       	subi	r20, 0x01	; 1
    188e:	50 40       	sbci	r21, 0x00	; 0
    1890:	d0 f7       	brcc	.-12     	; 0x1886 <eeprom_update_block+0x12>
    1892:	08 95       	ret

00001894 <eeprom_update_byte>:
    1894:	26 2f       	mov	r18, r22

00001896 <eeprom_update_r18>:
    1896:	f9 99       	sbic	0x1f, 1	; 31
    1898:	fe cf       	rjmp	.-4      	; 0x1896 <eeprom_update_r18>
    189a:	92 bd       	out	0x22, r25	; 34
    189c:	81 bd       	out	0x21, r24	; 33
    189e:	f8 9a       	sbi	0x1f, 0	; 31
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	00 b4       	in	r0, 0x20	; 32
    18a4:	02 16       	cp	r0, r18
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <eeprom_update_r18+0x20>
    18a8:	1f ba       	out	0x1f, r1	; 31
    18aa:	20 bd       	out	0x20, r18	; 32
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	fa 9a       	sbi	0x1f, 2	; 31
    18b2:	f9 9a       	sbi	0x1f, 1	; 31
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	08 95       	ret

000018b8 <eeprom_update_word>:
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	27 2f       	mov	r18, r23
    18bc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <eeprom_update_r18>
    18c0:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <eeprom_update_byte>

000018c4 <eeprom_read_block>:
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22

000018c8 <eeprom_read_blraw>:
    18c8:	fc 01       	movw	r30, r24
    18ca:	f9 99       	sbic	0x1f, 1	; 31
    18cc:	fe cf       	rjmp	.-4      	; 0x18ca <eeprom_read_blraw+0x2>
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <eeprom_read_blraw+0x14>
    18d0:	f2 bd       	out	0x22, r31	; 34
    18d2:	e1 bd       	out	0x21, r30	; 33
    18d4:	f8 9a       	sbi	0x1f, 0	; 31
    18d6:	31 96       	adiw	r30, 0x01	; 1
    18d8:	00 b4       	in	r0, 0x20	; 32
    18da:	0d 92       	st	X+, r0
    18dc:	41 50       	subi	r20, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	b8 f7       	brcc	.-18     	; 0x18d0 <eeprom_read_blraw+0x8>
    18e2:	08 95       	ret

000018e4 <_exit>:
    18e4:	f8 94       	cli

000018e6 <__stop_program>:
    18e6:	ff cf       	rjmp	.-2      	; 0x18e6 <__stop_program>
